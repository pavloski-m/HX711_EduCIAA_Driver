
/home/pablo/CIAA/firmware_v3/HX711_EduCIAA_Driver/out/HX711_EduCIAA_Driver.elf:     file format elf32-littlearm
/home/pablo/CIAA/firmware_v3/HX711_EduCIAA_Driver/out/HX711_EduCIAA_Driver.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000629

Program Header:
0x70000001 off    0x00013154 vaddr 0x1a003154 paddr 0x1a003154 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000044 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000315c memsz 0x0000315c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00315c align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003150  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a00315c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000044  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a003150  1a003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003154  1a003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 18 .noinit       00000000  1000008c  1000008c  00020048  2**2
                  CONTENTS
 19 .debug_info   0001c623  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003c26  00000000  00000000  0003c66b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000c08  00000000  00000000  00040291  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000aa0  00000000  00000000  00040e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000d4c9  00000000  00000000  00041939  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0001070c  00000000  00000000  0004ee02  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000297fc  00000000  00000000  0005f50e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  00088d0a  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  00088d72  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002ecc  00000000  00000000  00088da4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003150 l    d  .init_array	00000000 .init_array
1a003154 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000008c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 HX711_driver.c
10000048 l     O .bss	0000000a uartBuff
10000054 l     O .bss	00000004 sgnFilter
10000058 l     O .bss	00000004 dataTare
1000005c l     O .bss	00000004 prevValue.14194
00000000 l    df *ABS*	00000000 HX711port.c
10000000 l     O .data	00000001 sckCycles
10000060 l     O .bss	00000001 clkSignal
10000061 l     O .bss	00000001 outSignal
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 board.c
1a0006f4 l     F .text	00000020 Chip_SCU_I2C0PinConfig
1a000714 l     F .text	00000038 Chip_GPIO_SetPinState
1a00074c l     F .text	0000003e Chip_GPIO_SetPinDIROutput
1a00078a l     F .text	00000040 Chip_GPIO_SetPinDIRInput
1a0007ca l     F .text	00000020 Chip_SSP_Enable
1a0007ea l     F .text	00000032 Chip_SSP_SetFormat
1a00081c l     F .text	00000026 Chip_SSP_Set_Mode
1a000842 l     F .text	0000001a Chip_UART_TXEnable
1a00085c l     F .text	0000001c Chip_UART_ConfigData
1a002eb0 l     O .text	0000000c GpioLeds
1a002ebc l     O .text	00000008 GpioButtons
1a002ec4 l     O .text	00000012 GpioPorts
1a000878 l     F .text	00000054 Board_LED_Init
1a0008cc l     F .text	00000044 Board_TEC_Init
1a000910 l     F .text	00000044 Board_GPIO_Init
1a000954 l     F .text	00000024 Board_I2C_Init
1a000978 l     F .text	00000038 Board_SPI_Init
1a0009b0 l     F .text	00000038 Board_ADC_Init
00000000 l    df *ABS*	00000000 board_sysinit.c
1a000a54 l     F .text	00000034 Chip_SCU_PinMuxSet
1a000a88 l     F .text	0000004a Chip_SCU_SetPinMuxing
1a000ad4 l     F .text	00000054 Chip_CREG_SetFlashAcceleration
1a002ed8 l     O .text	00000004 InitClkStates
1a002edc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
1a000bc0 l     F .text	00000030 enableClk
1a000bf0 l     F .text	00000030 getClkRate
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000d08 l     F .text	0000001a Chip_UART_TXDisable
1a000d22 l     F .text	0000001c Chip_UART_SetupFIFOS
1a000d3e l     F .text	0000001c Chip_UART_ConfigData
1a000d5a l     F .text	00000020 Chip_UART_EnableDivisorAccess
1a000d7a l     F .text	00000020 Chip_UART_DisableDivisorAccess
1a000d9a l     F .text	00000028 Chip_UART_SetDivisorLatches
1a002f50 l     O .text	00000008 UART_PClock
1a002f58 l     O .text	00000008 UART_BClock
1a000dc4 l     F .text	00000068 Chip_UART_GetIndex
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001090 l     F .text	00000010 getFullConvClk
1a0010a0 l     F .text	0000002c Chip_ADC_GetClockIndex
1a0010cc l     F .text	00000066 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002f60 l     O .text	0000006c periph_to_base
10000064 l     O .bss	00000008 audio_usb_pll_freq
1a001264 l     F .text	00000022 ABS
1a001288 l     F .text	00000124 pll_calc_divs
1a0013ac l     F .text	00000180 pll_get_frac
1a00152c l     F .text	00000040 Chip_Clock_GetDivRate
1a00156c l     F .text	00000090 Chip_Clock_FindBaseClock
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001c40 l     F .text	00000020 Chip_Clock_DisableMainPLL
1a001c60 l     F .text	00000048 Chip_Clock_SetupMainPLL
1a001ca8 l     F .text	00000024 Chip_Clock_MainPLLLocked
1a002fd8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001e14 l     F .text	00000032 Chip_SSP_SetFormat
1a001e46 l     F .text	00000026 Chip_SSP_Set_Mode
1a001e6c l     F .text	0000002c Chip_SSP_GetClockIndex
1a001e98 l     F .text	00000030 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
1a001fc0 l     F .text	0000002c SCB_GetFPUType
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002054 l     F .text	00000034 Chip_SCU_PinMuxSet
1a002088 l     F .text	0000003a Chip_SCU_PinMux
1a0020c2 l     F .text	0000001a Chip_UART_TXEnable
1a0020dc l     F .text	0000001e Chip_UART_SendByte
1a0020fa l     F .text	0000001a Chip_UART_ReadByte
1a002114 l     F .text	0000001c Chip_UART_SetupFIFOS
1a002130 l     F .text	00000018 Chip_UART_ReadLineStatus
1a002148 l     F .text	00000022 Chip_UART_SetRS485Flags
1a003020 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
1a002368 l     F .text	00000054 __NVIC_SetPriority
1a0023bc l     F .text	00000044 SysTick_Config
10000070 l     O .bss	00000008 tickCounter
10000078 l     O .bss	00000004 tickHookFunction
1000007c l     O .bss	00000004 callBackFuncParams
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002524 l     F .text	00000034 Chip_SCU_PinMuxSet
1a002558 l     F .text	0000003a Chip_SCU_PinMux
1a002592 l     F .text	00000038 Chip_GPIO_SetPinState
1a0025ca l     F .text	00000034 Chip_GPIO_ReadPortBit
1a0025fe l     F .text	00000062 Chip_GPIO_SetDir
1a002660 l     F .text	00000098 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000080 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a003154 l       .init_array	00000000 __init_array_end
1a003150 l       .bss_RAM5	00000000 __preinit_array_end
1a003150 l       .init_array	00000000 __init_array_start
1a003150 l       .bss_RAM5	00000000 __preinit_array_start
1a001804 g     F .text	00000040 Chip_Clock_GetDividerSource
1a0001c4  w    F .text	00000006 DebugMon_Handler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0000c0 g       .text	00000000 __section_table_start
1a0001d6  w    F .text	00000006 I2C0_IRQHandler
1a0003ac g     F .text	00000024 inicialize
1a000a48 g     F .text	0000000c __stdio_init
1a0001a6  w    F .text	00000006 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a001220 g     F .text	0000002a Chip_ADC_SetResolution
1a0024e8 g     F .text	0000003c SysTick_Handler
1a000eb4 g     F .text	00000070 Chip_UART_SetBaud
1a0001d6  w    F .text	00000006 SPIFI_ADCHS_IRQHandler
1a0005fc  w    F .text	0000000e initialise_monitor_handles
1a0001d6  w    F .text	00000006 SDIO_IRQHandler
1a0001ca  w    F .text	00000006 PendSV_Handler
1a0001a0  w    F .text	00000006 NMI_Handler
1a00315c g       .ARM.exidx	00000000 __exidx_end
1a0000fc g       .text	00000000 __data_section_table_end
1a0004fc g     F .text	000000b8 readRawValue
1a0001d6  w    F .text	00000006 UART1_IRQHandler
53ff7176 g       *ABS*	00000000 __valid_user_code_checksum
1a00315c g       .ARM.exidx	00000000 _etext
1a0001d6  w    F .text	00000006 USB1_IRQHandler
1a0001d6  w    F .text	00000006 TIMER3_IRQHandler
1a0019bc g     F .text	00000024 Chip_Clock_GetBaseClocktHz
1a000404 g     F .text	00000018 updateTare
1a0001d6  w    F .text	00000006 UART0_IRQHandler
1a000168 g     F .text	00000038 bss_init
1a0001d6  w    F .text	00000006 SGPIO_IRQHandler
1a002ac4 g     F .text	00000000 .hidden __aeabi_uldivmod
1000008c g       .noinit	00000000 _noinit
1a002334 g     F .text	00000032 uartWriteString
10000084 g     O .bss	00000004 SystemCoreClock
1a000e2c g     F .text	00000088 Chip_UART_Init
1a0001d6  w    F .text	00000006 ADC0_IRQHandler
1a0001b8  w    F .text	00000006 UsageFault_Handler
1a001ba4 g     F .text	00000088 Chip_Clock_GetRate
1a000b3c g     F .text	00000074 Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000300 g     F .text	000000ac itoa
1a002af4 g     F .text	000002d0 .hidden __udivmoddi4
1a002ea8 g     O .text	00000004 ExtRateIn
1a0001d6  w    F .text	00000006 IntDefaultHandler
1a0001d6  w    F .text	00000006 SSP0_SSP1_IRQHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a003154 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a002dc8 g     F .text	00000048 __libc_init_array
1a0001d6  w    F .text	00000006 ADC1_IRQHandler
1a0001d6  w    F .text	00000006 RIT_WDT_IRQHandler
1a0001d6  w    F .text	00000006 FLASH_EEPROM_ATIMER_IRQHandler
1a000a14 g     F .text	00000034 Board_Init
1a000618  w    F .text	0000000e _init
1a0000c0 g       .text	00000000 __data_section_table
1a0001d6  w    F .text	00000006 RTC_IRQHandler
1000008c g       .bss	00000000 _ebss
1a0001d6  w    F .text	00000006 TIMER0_IRQHandler
1a000628 g     F .text	000000cc Reset_Handler
1a002400 g     F .text	000000a0 tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000ca0 g     F .text	00000068 Chip_I2C_SetClockRate
1a0001d6  w    F .text	00000006 LCD_IRQHandler
1a0015fc g     F .text	00000070 Chip_Clock_EnableCrystal
1a0001d6  w    F .text	00000006 M4_IRQHandler
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000124 g     F .text	00000044 data_init
1a000c6c g     F .text	00000034 Chip_I2C_Init
1a001744 g     F .text	000000c0 Chip_Clock_GetMainPLLHz
1a003068 g     O .text	000000e6 gpioPinsInit
1a002300 g     F .text	00000034 uartWriteByte
1a001ec8 g     F .text	00000036 Chip_SSP_SetClockRate
1a00041c g     F .text	00000058 actualizarDato
1a001a7c g     F .text	0000004c Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a0011bc g     F .text	00000064 Chip_ADC_SetSampleRate
1a001efe g     F .text	00000074 Chip_SSP_SetBitRate
1a0001d6  w    F .text	00000006 I2S0_I2S1_QEI_IRQHandler
1a001c2c g     F .text	00000014 Chip_GPIO_Init
1a002eac g     O .text	00000004 OscRateIn
1a0021dc g     F .text	00000124 uartInit
1000008c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000124 g       .text	00000000 __bss_section_table_end
1a0026f8 g     F .text	000001c0 gpioInit
1a000474 g     F .text	00000088 initHx711
1a002dc4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0029d4 g     F .text	00000020 USB0_IRQHandler
1a0001d6  w    F .text	00000006 SCT_IRQHandler
1a001844 g     F .text	00000038 Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002e10 g     F .text	00000010 memset
1a0001ac  w    F .text	00000006 MemManage_Handler
1a0005b4 g     F .text	00000048 main
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0001be  w    F .text	00000006 SVC_Handler
1a00216c g     F .text	00000038 uartTxReady
1a001ac8 g     F .text	0000007c Chip_Clock_EnableOpts
1a00187c g     F .text	00000140 Chip_Clock_GetClockInputHz
1a00166c g     F .text	000000d8 Chip_Clock_CalcMainPLLValue
1a001fec g     F .text	00000038 SystemInit
1a002a74 g     F .text	00000050 delay
1a0000fc g       .text	00000000 __bss_section_table
1a0028b8 g     F .text	00000094 gpioWrite
1a0003d0 g     F .text	00000034 msgOffset
1a00060a  w    F .text	0000000e _fini
1a001134 g     F .text	00000088 Chip_ADC_Init
10000088 g     O .bss	00000004 g_pUsbApi
1a000b28 g     F .text	00000014 Board_SetupMuxing
1a000f24 g     F .text	0000016c Chip_UART_SetBaudFDR
1a0024a0 g     F .text	00000018 tickRead
10000040 g     O .data	00000008 tickRateMS
1a0001d6  w    F .text	00000006 SPI_DAC_IRQHandler
1a0001d6  w    F .text	00000006 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a0021a4 g     F .text	00000038 uartTxWrite
1a0001d6  w    F .text	00000006 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000008c g       .bss	00000000 _pvHeapStart
1a0001d6  w    F .text	00000006 UART2_CAN1_IRQHandler
1a000124 g       .text	00000000 __section_table_end
1a001f74 g     F .text	0000004c Chip_SSP_Init
1a0009e8 g     F .text	0000002c Board_Debug_Init
10000048 g       .data	00000000 _edata
1a000c20 g     F .text	0000004c Chip_I2C_EventHandler
1a0001d6  w    F .text	00000006 M0SUB_IRQHandler
1a001ccc g     F .text	00000148 Chip_SetupCoreClock
1a000000 g     O .text	00000040 g_pfnVectors
1a00124c g     F .text	00000018 SystemCoreClockUpdate
1a0001d6  w    F .text	00000006 DMA_IRQHandler
1a0001d6  w    F .text	00000006 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002dc4  w    F .text	00000002 .hidden __aeabi_idiv0
1a0001b2  w    F .text	00000006 BusFault_Handler
1a001b44 g     F .text	00000060 Chip_Clock_Enable
1a0001d6  w    F .text	00000006 UART3_IRQHandler
1a0001d6  w    F .text	00000006 MCPWM_IRQHandler
1a00294c g     F .text	00000088 gpioRead
1a0029f4 g     F .text	00000080 boardInit
1a000040 g     O .text	00000080 g_pfnVendorVectors
1a0001d6  w    F .text	00000006 GINT1_IRQHandler
1a0024b8 g     F .text	00000030 tickPowerSet
1a0019e0 g     F .text	0000009c Chip_Clock_SetBaseClock
1a002024 g     F .text	00000030 cyclesCounterInit
1a0001d6  w    F .text	00000006 GPIO4_IRQHandler
1a000bb0 g     F .text	00000010 Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 29 06 00 1a a1 01 00 1a a7 01 00 1a     ....)...........
1a000010:	ad 01 00 1a b3 01 00 1a b9 01 00 1a 76 71 ff 53     ............vq.S
	...
1a00002c:	bf 01 00 1a c5 01 00 1a 00 00 00 00 cb 01 00 1a     ................
1a00003c:	e9 24 00 1a                                         .$..

1a000040 <g_pfnVendorVectors>:
1a000040:	d7 01 00 1a d7 01 00 1a d7 01 00 1a 00 00 00 00     ................
1a000050:	d7 01 00 1a d7 01 00 1a d7 01 00 1a d7 01 00 1a     ................
1a000060:	d5 29 00 1a d7 01 00 1a d7 01 00 1a d7 01 00 1a     .)..............
1a000070:	d7 01 00 1a d7 01 00 1a d7 01 00 1a d7 01 00 1a     ................
1a000080:	d7 01 00 1a d7 01 00 1a d7 01 00 1a d7 01 00 1a     ................
1a000090:	d7 01 00 1a d7 01 00 1a d7 01 00 1a d7 01 00 1a     ................
1a0000a0:	d7 01 00 1a d7 01 00 1a d7 01 00 1a d7 01 00 1a     ................
1a0000b0:	d7 01 00 1a d7 01 00 1a d7 01 00 1a d7 01 00 1a     ................

1a0000c0 <__data_section_table>:
1a0000c0:	1a00315c 	.word	0x1a00315c
1a0000c4:	10000000 	.word	0x10000000
1a0000c8:	00000048 	.word	0x00000048
1a0000cc:	1a00315c 	.word	0x1a00315c
1a0000d0:	10080000 	.word	0x10080000
1a0000d4:	00000000 	.word	0x00000000
1a0000d8:	1a00315c 	.word	0x1a00315c
1a0000dc:	20000000 	.word	0x20000000
1a0000e0:	00000000 	.word	0x00000000
1a0000e4:	1a00315c 	.word	0x1a00315c
1a0000e8:	20008000 	.word	0x20008000
1a0000ec:	00000000 	.word	0x00000000
1a0000f0:	1a00315c 	.word	0x1a00315c
1a0000f4:	2000c000 	.word	0x2000c000
1a0000f8:	00000000 	.word	0x00000000

1a0000fc <__bss_section_table>:
1a0000fc:	10000048 	.word	0x10000048
1a000100:	00000044 	.word	0x00000044
1a000104:	10080000 	.word	0x10080000
1a000108:	00000000 	.word	0x00000000
1a00010c:	20000000 	.word	0x20000000
1a000110:	00000000 	.word	0x00000000
1a000114:	20008000 	.word	0x20008000
1a000118:	00000000 	.word	0x00000000
1a00011c:	2000c000 	.word	0x2000c000
1a000120:	00000000 	.word	0x00000000

1a000124 <data_init>:
    PendSV_Handler,                 // The PendSV handler
    SysTick_Handler,                // The SysTick handler
};

__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000124:	b480      	push	{r7}
1a000126:	b089      	sub	sp, #36	; 0x24
1a000128:	af00      	add	r7, sp, #0
1a00012a:	60f8      	str	r0, [r7, #12]
1a00012c:	60b9      	str	r1, [r7, #8]
1a00012e:	607a      	str	r2, [r7, #4]
    unsigned int *pulDest = (unsigned int*) start;
1a000130:	68bb      	ldr	r3, [r7, #8]
1a000132:	61fb      	str	r3, [r7, #28]
    unsigned int *pulSrc = (unsigned int*) romstart;
1a000134:	68fb      	ldr	r3, [r7, #12]
1a000136:	61bb      	str	r3, [r7, #24]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a000138:	2300      	movs	r3, #0
1a00013a:	617b      	str	r3, [r7, #20]
1a00013c:	e00a      	b.n	1a000154 <data_init+0x30>
        *pulDest++ = *pulSrc++;
1a00013e:	69ba      	ldr	r2, [r7, #24]
1a000140:	1d13      	adds	r3, r2, #4
1a000142:	61bb      	str	r3, [r7, #24]
1a000144:	69fb      	ldr	r3, [r7, #28]
1a000146:	1d19      	adds	r1, r3, #4
1a000148:	61f9      	str	r1, [r7, #28]
1a00014a:	6812      	ldr	r2, [r2, #0]
1a00014c:	601a      	str	r2, [r3, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a00014e:	697b      	ldr	r3, [r7, #20]
1a000150:	3304      	adds	r3, #4
1a000152:	617b      	str	r3, [r7, #20]
1a000154:	697a      	ldr	r2, [r7, #20]
1a000156:	687b      	ldr	r3, [r7, #4]
1a000158:	429a      	cmp	r2, r3
1a00015a:	d3f0      	bcc.n	1a00013e <data_init+0x1a>
}
1a00015c:	bf00      	nop
1a00015e:	3724      	adds	r7, #36	; 0x24
1a000160:	46bd      	mov	sp, r7
1a000162:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000166:	4770      	bx	lr

1a000168 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
1a000168:	b480      	push	{r7}
1a00016a:	b085      	sub	sp, #20
1a00016c:	af00      	add	r7, sp, #0
1a00016e:	6078      	str	r0, [r7, #4]
1a000170:	6039      	str	r1, [r7, #0]
    unsigned int *pulDest = (unsigned int*) start;
1a000172:	687b      	ldr	r3, [r7, #4]
1a000174:	60fb      	str	r3, [r7, #12]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a000176:	2300      	movs	r3, #0
1a000178:	60bb      	str	r3, [r7, #8]
1a00017a:	e007      	b.n	1a00018c <bss_init+0x24>
        *pulDest++ = 0;
1a00017c:	68fb      	ldr	r3, [r7, #12]
1a00017e:	1d1a      	adds	r2, r3, #4
1a000180:	60fa      	str	r2, [r7, #12]
1a000182:	2200      	movs	r2, #0
1a000184:	601a      	str	r2, [r3, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000186:	68bb      	ldr	r3, [r7, #8]
1a000188:	3304      	adds	r3, #4
1a00018a:	60bb      	str	r3, [r7, #8]
1a00018c:	68ba      	ldr	r2, [r7, #8]
1a00018e:	683b      	ldr	r3, [r7, #0]
1a000190:	429a      	cmp	r2, r3
1a000192:	d3f3      	bcc.n	1a00017c <bss_init+0x14>
}
1a000194:	bf00      	nop
1a000196:	3714      	adds	r7, #20
1a000198:	46bd      	mov	sp, r7
1a00019a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00019e:	4770      	bx	lr

1a0001a0 <NMI_Handler>:


}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a0001a0:	b480      	push	{r7}
1a0001a2:	af00      	add	r7, sp, #0
    while (1) {
1a0001a4:	e7fe      	b.n	1a0001a4 <NMI_Handler+0x4>

1a0001a6 <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a0001a6:	b480      	push	{r7}
1a0001a8:	af00      	add	r7, sp, #0
    while (1) {
1a0001aa:	e7fe      	b.n	1a0001aa <HardFault_Handler+0x4>

1a0001ac <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a0001ac:	b480      	push	{r7}
1a0001ae:	af00      	add	r7, sp, #0
    while (1) {
1a0001b0:	e7fe      	b.n	1a0001b0 <MemManage_Handler+0x4>

1a0001b2 <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a0001b2:	b480      	push	{r7}
1a0001b4:	af00      	add	r7, sp, #0
    while (1) {
1a0001b6:	e7fe      	b.n	1a0001b6 <BusFault_Handler+0x4>

1a0001b8 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a0001b8:	b480      	push	{r7}
1a0001ba:	af00      	add	r7, sp, #0
    while (1) {
1a0001bc:	e7fe      	b.n	1a0001bc <UsageFault_Handler+0x4>

1a0001be <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a0001be:	b480      	push	{r7}
1a0001c0:	af00      	add	r7, sp, #0
    while (1) {
1a0001c2:	e7fe      	b.n	1a0001c2 <SVC_Handler+0x4>

1a0001c4 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a0001c4:	b480      	push	{r7}
1a0001c6:	af00      	add	r7, sp, #0
    while (1) {
1a0001c8:	e7fe      	b.n	1a0001c8 <DebugMon_Handler+0x4>

1a0001ca <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a0001ca:	b480      	push	{r7}
1a0001cc:	af00      	add	r7, sp, #0
    while (1) {
1a0001ce:	e7fe      	b.n	1a0001ce <PendSV_Handler+0x4>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a0001d0:	b480      	push	{r7}
1a0001d2:	af00      	add	r7, sp, #0
    while (1) {
1a0001d4:	e7fe      	b.n	1a0001d4 <PendSV_Handler+0xa>

1a0001d6 <ADC0_IRQHandler>:
    QEI_IRQHandler,           // 68
};
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001d6:	b480      	push	{r7}
1a0001d8:	af00      	add	r7, sp, #0
    while (1) {
1a0001da:	e7fe      	b.n	1a0001da <ADC0_IRQHandler+0x4>
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <itoa>:
static uint32_t sgnFilter;
static uint32_t dataTare;
//


char* itoa(int value, char* result, int base) {
1a000300:	b480      	push	{r7}
1a000302:	b089      	sub	sp, #36	; 0x24
1a000304:	af00      	add	r7, sp, #0
1a000306:	60f8      	str	r0, [r7, #12]
1a000308:	60b9      	str	r1, [r7, #8]
1a00030a:	607a      	str	r2, [r7, #4]
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a00030c:	687b      	ldr	r3, [r7, #4]
1a00030e:	2b01      	cmp	r3, #1
1a000310:	dd02      	ble.n	1a000318 <itoa+0x18>
1a000312:	687b      	ldr	r3, [r7, #4]
1a000314:	2b24      	cmp	r3, #36	; 0x24
1a000316:	dd04      	ble.n	1a000322 <itoa+0x22>
1a000318:	68bb      	ldr	r3, [r7, #8]
1a00031a:	2200      	movs	r2, #0
1a00031c:	701a      	strb	r2, [r3, #0]
1a00031e:	68bb      	ldr	r3, [r7, #8]
1a000320:	e03c      	b.n	1a00039c <itoa+0x9c>

   char* ptr = result, *ptr1 = result, tmp_char;
1a000322:	68bb      	ldr	r3, [r7, #8]
1a000324:	61fb      	str	r3, [r7, #28]
1a000326:	68bb      	ldr	r3, [r7, #8]
1a000328:	61bb      	str	r3, [r7, #24]
   int tmp_value;

   do {
      tmp_value = value;
1a00032a:	68fb      	ldr	r3, [r7, #12]
1a00032c:	617b      	str	r3, [r7, #20]
      value /= base;
1a00032e:	68fa      	ldr	r2, [r7, #12]
1a000330:	687b      	ldr	r3, [r7, #4]
1a000332:	fb92 f3f3 	sdiv	r3, r2, r3
1a000336:	60fb      	str	r3, [r7, #12]
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000338:	68fb      	ldr	r3, [r7, #12]
1a00033a:	687a      	ldr	r2, [r7, #4]
1a00033c:	fb02 f303 	mul.w	r3, r2, r3
1a000340:	697a      	ldr	r2, [r7, #20]
1a000342:	1ad3      	subs	r3, r2, r3
1a000344:	f103 0223 	add.w	r2, r3, #35	; 0x23
1a000348:	69fb      	ldr	r3, [r7, #28]
1a00034a:	1c59      	adds	r1, r3, #1
1a00034c:	61f9      	str	r1, [r7, #28]
1a00034e:	4916      	ldr	r1, [pc, #88]	; (1a0003a8 <itoa+0xa8>)
1a000350:	5c8a      	ldrb	r2, [r1, r2]
1a000352:	701a      	strb	r2, [r3, #0]
   } while ( value );
1a000354:	68fb      	ldr	r3, [r7, #12]
1a000356:	2b00      	cmp	r3, #0
1a000358:	d1e7      	bne.n	1a00032a <itoa+0x2a>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a00035a:	697b      	ldr	r3, [r7, #20]
1a00035c:	2b00      	cmp	r3, #0
1a00035e:	da04      	bge.n	1a00036a <itoa+0x6a>
1a000360:	69fb      	ldr	r3, [r7, #28]
1a000362:	1c5a      	adds	r2, r3, #1
1a000364:	61fa      	str	r2, [r7, #28]
1a000366:	222d      	movs	r2, #45	; 0x2d
1a000368:	701a      	strb	r2, [r3, #0]
   *ptr-- = '\0';
1a00036a:	69fb      	ldr	r3, [r7, #28]
1a00036c:	1e5a      	subs	r2, r3, #1
1a00036e:	61fa      	str	r2, [r7, #28]
1a000370:	2200      	movs	r2, #0
1a000372:	701a      	strb	r2, [r3, #0]
   while(ptr1 < ptr) {
1a000374:	e00d      	b.n	1a000392 <itoa+0x92>
      tmp_char = *ptr;
1a000376:	69fb      	ldr	r3, [r7, #28]
1a000378:	781b      	ldrb	r3, [r3, #0]
1a00037a:	74fb      	strb	r3, [r7, #19]
      *ptr--= *ptr1;
1a00037c:	69fb      	ldr	r3, [r7, #28]
1a00037e:	1e5a      	subs	r2, r3, #1
1a000380:	61fa      	str	r2, [r7, #28]
1a000382:	69ba      	ldr	r2, [r7, #24]
1a000384:	7812      	ldrb	r2, [r2, #0]
1a000386:	701a      	strb	r2, [r3, #0]
      *ptr1++ = tmp_char;
1a000388:	69bb      	ldr	r3, [r7, #24]
1a00038a:	1c5a      	adds	r2, r3, #1
1a00038c:	61ba      	str	r2, [r7, #24]
1a00038e:	7cfa      	ldrb	r2, [r7, #19]
1a000390:	701a      	strb	r2, [r3, #0]
   while(ptr1 < ptr) {
1a000392:	69ba      	ldr	r2, [r7, #24]
1a000394:	69fb      	ldr	r3, [r7, #28]
1a000396:	429a      	cmp	r2, r3
1a000398:	d3ed      	bcc.n	1a000376 <itoa+0x76>
   }
   return result;
1a00039a:	68bb      	ldr	r3, [r7, #8]
}
1a00039c:	4618      	mov	r0, r3
1a00039e:	3724      	adds	r7, #36	; 0x24
1a0003a0:	46bd      	mov	sp, r7
1a0003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0003a6:	4770      	bx	lr
1a0003a8:	1a002e20 	.word	0x1a002e20

1a0003ac <inicialize>:


void inicialize(){
1a0003ac:	b580      	push	{r7, lr}
1a0003ae:	af00      	add	r7, sp, #0
	updateTare();
1a0003b0:	f000 f828 	bl	1a000404 <updateTare>

	sgnFilter = 50;
1a0003b4:	4b04      	ldr	r3, [pc, #16]	; (1a0003c8 <inicialize+0x1c>)
1a0003b6:	2232      	movs	r2, #50	; 0x32
1a0003b8:	601a      	str	r2, [r3, #0]
	//prevValue=0;

	uartWriteString( UART_USB, "Inicilización correcta..\r\n" );
1a0003ba:	4904      	ldr	r1, [pc, #16]	; (1a0003cc <inicialize+0x20>)
1a0003bc:	2003      	movs	r0, #3
1a0003be:	f001 ffb9 	bl	1a002334 <uartWriteString>
}
1a0003c2:	bf00      	nop
1a0003c4:	bd80      	pop	{r7, pc}
1a0003c6:	bf00      	nop
1a0003c8:	10000054 	.word	0x10000054
1a0003cc:	1a002e68 	.word	0x1a002e68

1a0003d0 <msgOffset>:


void msgOffset(uint32_t Offset){
1a0003d0:	b580      	push	{r7, lr}
1a0003d2:	b082      	sub	sp, #8
1a0003d4:	af00      	add	r7, sp, #0
1a0003d6:	6078      	str	r0, [r7, #4]

	itoa( Offset, uartBuff, 10 ); /* número en base 10 */
1a0003d8:	687b      	ldr	r3, [r7, #4]
1a0003da:	220a      	movs	r2, #10
1a0003dc:	4907      	ldr	r1, [pc, #28]	; (1a0003fc <msgOffset+0x2c>)
1a0003de:	4618      	mov	r0, r3
1a0003e0:	f7ff ff8e 	bl	1a000300 <itoa>
	uartWriteString( UART_USB, uartBuff );
1a0003e4:	4905      	ldr	r1, [pc, #20]	; (1a0003fc <msgOffset+0x2c>)
1a0003e6:	2003      	movs	r0, #3
1a0003e8:	f001 ffa4 	bl	1a002334 <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a0003ec:	4904      	ldr	r1, [pc, #16]	; (1a000400 <msgOffset+0x30>)
1a0003ee:	2003      	movs	r0, #3
1a0003f0:	f001 ffa0 	bl	1a002334 <uartWriteString>

}
1a0003f4:	bf00      	nop
1a0003f6:	3708      	adds	r7, #8
1a0003f8:	46bd      	mov	sp, r7
1a0003fa:	bd80      	pop	{r7, pc}
1a0003fc:	10000048 	.word	0x10000048
1a000400:	1a002e84 	.word	0x1a002e84

1a000404 <updateTare>:
		sgnFilter = 5;}

}


void updateTare (){
1a000404:	b580      	push	{r7, lr}
1a000406:	af00      	add	r7, sp, #0

	dataTare = readRawValue();
1a000408:	f000 f878 	bl	1a0004fc <readRawValue>
1a00040c:	4602      	mov	r2, r0
1a00040e:	4b02      	ldr	r3, [pc, #8]	; (1a000418 <updateTare+0x14>)
1a000410:	601a      	str	r2, [r3, #0]
//	for(int i=0; i<4; i++){
//		suma += readRawValue()/4;
//		delay(10);
//	}
//	dataTare = (uint32_t) suma;
}
1a000412:	bf00      	nop
1a000414:	bd80      	pop	{r7, pc}
1a000416:	bf00      	nop
1a000418:	10000058 	.word	0x10000058

1a00041c <actualizarDato>:


int32_t actualizarDato (void){
1a00041c:	b580      	push	{r7, lr}
1a00041e:	b082      	sub	sp, #8
1a000420:	af00      	add	r7, sp, #0

	static int32_t prevValue=0;

	int32_t datoaux = readRawValue() - dataTare;
1a000422:	f000 f86b 	bl	1a0004fc <readRawValue>
1a000426:	4602      	mov	r2, r0
1a000428:	4b0f      	ldr	r3, [pc, #60]	; (1a000468 <actualizarDato+0x4c>)
1a00042a:	681b      	ldr	r3, [r3, #0]
1a00042c:	1ad3      	subs	r3, r2, r3
1a00042e:	607b      	str	r3, [r7, #4]

	prevValue = prevValue/2 + datoaux/2;
1a000430:	4b0e      	ldr	r3, [pc, #56]	; (1a00046c <actualizarDato+0x50>)
1a000432:	681b      	ldr	r3, [r3, #0]
1a000434:	0fda      	lsrs	r2, r3, #31
1a000436:	4413      	add	r3, r2
1a000438:	105b      	asrs	r3, r3, #1
1a00043a:	4619      	mov	r1, r3
1a00043c:	687b      	ldr	r3, [r7, #4]
1a00043e:	0fda      	lsrs	r2, r3, #31
1a000440:	4413      	add	r3, r2
1a000442:	105b      	asrs	r3, r3, #1
1a000444:	440b      	add	r3, r1
1a000446:	4a09      	ldr	r2, [pc, #36]	; (1a00046c <actualizarDato+0x50>)
1a000448:	6013      	str	r3, [r2, #0]

	datoaux = prevValue/719;
1a00044a:	4b08      	ldr	r3, [pc, #32]	; (1a00046c <actualizarDato+0x50>)
1a00044c:	681b      	ldr	r3, [r3, #0]
1a00044e:	4a08      	ldr	r2, [pc, #32]	; (1a000470 <actualizarDato+0x54>)
1a000450:	fb82 1203 	smull	r1, r2, r2, r3
1a000454:	1212      	asrs	r2, r2, #8
1a000456:	17db      	asrs	r3, r3, #31
1a000458:	1ad3      	subs	r3, r2, r3
1a00045a:	607b      	str	r3, [r7, #4]

	return datoaux;
1a00045c:	687b      	ldr	r3, [r7, #4]
}
1a00045e:	4618      	mov	r0, r3
1a000460:	3708      	adds	r7, #8
1a000462:	46bd      	mov	sp, r7
1a000464:	bd80      	pop	{r7, pc}
1a000466:	bf00      	nop
1a000468:	10000058 	.word	0x10000058
1a00046c:	1000005c 	.word	0x1000005c
1a000470:	5b2618ed 	.word	0x5b2618ed

1a000474 <initHx711>:
// Count=Count^0x800000;
// ADSK=0;
// return(Count);
//}

bool_t initHx711 (gpioMap_t ADDO, gpioMap_t ADSK, uint8_t channelGain){
1a000474:	b580      	push	{r7, lr}
1a000476:	b082      	sub	sp, #8
1a000478:	af00      	add	r7, sp, #0
1a00047a:	4603      	mov	r3, r0
1a00047c:	71fb      	strb	r3, [r7, #7]
1a00047e:	460b      	mov	r3, r1
1a000480:	71bb      	strb	r3, [r7, #6]
1a000482:	4613      	mov	r3, r2
1a000484:	717b      	strb	r3, [r7, #5]

	switch (channelGain){
1a000486:	797b      	ldrb	r3, [r7, #5]
1a000488:	2b40      	cmp	r3, #64	; 0x40
1a00048a:	d008      	beq.n	1a00049e <initHx711+0x2a>
1a00048c:	2b80      	cmp	r3, #128	; 0x80
1a00048e:	d002      	beq.n	1a000496 <initHx711+0x22>
1a000490:	2b20      	cmp	r3, #32
1a000492:	d008      	beq.n	1a0004a6 <initHx711+0x32>
1a000494:	e00b      	b.n	1a0004ae <initHx711+0x3a>
		case 128:
			sckCycles = 1;
1a000496:	4b15      	ldr	r3, [pc, #84]	; (1a0004ec <initHx711+0x78>)
1a000498:	2201      	movs	r2, #1
1a00049a:	701a      	strb	r2, [r3, #0]
			break;
1a00049c:	e009      	b.n	1a0004b2 <initHx711+0x3e>

		case 64:
			sckCycles = 2;
1a00049e:	4b13      	ldr	r3, [pc, #76]	; (1a0004ec <initHx711+0x78>)
1a0004a0:	2202      	movs	r2, #2
1a0004a2:	701a      	strb	r2, [r3, #0]
			break;
1a0004a4:	e005      	b.n	1a0004b2 <initHx711+0x3e>

		case 32:
			sckCycles = 3;
1a0004a6:	4b11      	ldr	r3, [pc, #68]	; (1a0004ec <initHx711+0x78>)
1a0004a8:	2203      	movs	r2, #3
1a0004aa:	701a      	strb	r2, [r3, #0]
			break;
1a0004ac:	e001      	b.n	1a0004b2 <initHx711+0x3e>

		default: return 1;
1a0004ae:	2301      	movs	r3, #1
1a0004b0:	e018      	b.n	1a0004e4 <initHx711+0x70>
	}
	//chequeo si ADDO y ADSK son variables válidas
	clkSignal = ADSK;
1a0004b2:	4a0f      	ldr	r2, [pc, #60]	; (1a0004f0 <initHx711+0x7c>)
1a0004b4:	79bb      	ldrb	r3, [r7, #6]
1a0004b6:	7013      	strb	r3, [r2, #0]
	outSignal = ADDO;
1a0004b8:	4a0e      	ldr	r2, [pc, #56]	; (1a0004f4 <initHx711+0x80>)
1a0004ba:	79fb      	ldrb	r3, [r7, #7]
1a0004bc:	7013      	strb	r3, [r2, #0]

	uartWriteString( UART_USB, "inicializa \r\n" );
1a0004be:	490e      	ldr	r1, [pc, #56]	; (1a0004f8 <initHx711+0x84>)
1a0004c0:	2003      	movs	r0, #3
1a0004c2:	f001 ff37 	bl	1a002334 <uartWriteString>

	gpioInit( clkSignal, GPIO_OUTPUT );
1a0004c6:	4b0a      	ldr	r3, [pc, #40]	; (1a0004f0 <initHx711+0x7c>)
1a0004c8:	f993 3000 	ldrsb.w	r3, [r3]
1a0004cc:	2101      	movs	r1, #1
1a0004ce:	4618      	mov	r0, r3
1a0004d0:	f002 f912 	bl	1a0026f8 <gpioInit>
	gpioInit( outSignal, GPIO_INPUT );
1a0004d4:	4b07      	ldr	r3, [pc, #28]	; (1a0004f4 <initHx711+0x80>)
1a0004d6:	f993 3000 	ldrsb.w	r3, [r3]
1a0004da:	2100      	movs	r1, #0
1a0004dc:	4618      	mov	r0, r3
1a0004de:	f002 f90b 	bl	1a0026f8 <gpioInit>


	return 0;
1a0004e2:	2300      	movs	r3, #0
}
1a0004e4:	4618      	mov	r0, r3
1a0004e6:	3708      	adds	r7, #8
1a0004e8:	46bd      	mov	sp, r7
1a0004ea:	bd80      	pop	{r7, pc}
1a0004ec:	10000000 	.word	0x10000000
1a0004f0:	10000060 	.word	0x10000060
1a0004f4:	10000061 	.word	0x10000061
1a0004f8:	1a002e88 	.word	0x1a002e88

1a0004fc <readRawValue>:


uint32_t readRawValue (void){
1a0004fc:	b580      	push	{r7, lr}
1a0004fe:	b082      	sub	sp, #8
1a000500:	af00      	add	r7, sp, #0

	uint32_t rawdata;

	while(gpioRead(outSignal));
1a000502:	bf00      	nop
1a000504:	4b28      	ldr	r3, [pc, #160]	; (1a0005a8 <readRawValue+0xac>)
1a000506:	f993 3000 	ldrsb.w	r3, [r3]
1a00050a:	4618      	mov	r0, r3
1a00050c:	f002 fa1e 	bl	1a00294c <gpioRead>
1a000510:	4603      	mov	r3, r0
1a000512:	2b00      	cmp	r3, #0
1a000514:	d1f6      	bne.n	1a000504 <readRawValue+0x8>

	for (uint8_t i=0; i<24; i++){
1a000516:	2300      	movs	r3, #0
1a000518:	70fb      	strb	r3, [r7, #3]
1a00051a:	e01f      	b.n	1a00055c <readRawValue+0x60>

		gpioWrite(clkSignal, 1);
1a00051c:	4b23      	ldr	r3, [pc, #140]	; (1a0005ac <readRawValue+0xb0>)
1a00051e:	f993 3000 	ldrsb.w	r3, [r3]
1a000522:	2101      	movs	r1, #1
1a000524:	4618      	mov	r0, r3
1a000526:	f002 f9c7 	bl	1a0028b8 <gpioWrite>

		rawdata = rawdata << 1;
1a00052a:	687b      	ldr	r3, [r7, #4]
1a00052c:	005b      	lsls	r3, r3, #1
1a00052e:	607b      	str	r3, [r7, #4]

		//delayInaccurateUs(1);
		gpioWrite(clkSignal, 0);
1a000530:	4b1e      	ldr	r3, [pc, #120]	; (1a0005ac <readRawValue+0xb0>)
1a000532:	f993 3000 	ldrsb.w	r3, [r3]
1a000536:	2100      	movs	r1, #0
1a000538:	4618      	mov	r0, r3
1a00053a:	f002 f9bd 	bl	1a0028b8 <gpioWrite>
		//delayInaccurateUs(1);

		if(gpioRead(outSignal)) {rawdata++;}
1a00053e:	4b1a      	ldr	r3, [pc, #104]	; (1a0005a8 <readRawValue+0xac>)
1a000540:	f993 3000 	ldrsb.w	r3, [r3]
1a000544:	4618      	mov	r0, r3
1a000546:	f002 fa01 	bl	1a00294c <gpioRead>
1a00054a:	4603      	mov	r3, r0
1a00054c:	2b00      	cmp	r3, #0
1a00054e:	d002      	beq.n	1a000556 <readRawValue+0x5a>
1a000550:	687b      	ldr	r3, [r7, #4]
1a000552:	3301      	adds	r3, #1
1a000554:	607b      	str	r3, [r7, #4]
	for (uint8_t i=0; i<24; i++){
1a000556:	78fb      	ldrb	r3, [r7, #3]
1a000558:	3301      	adds	r3, #1
1a00055a:	70fb      	strb	r3, [r7, #3]
1a00055c:	78fb      	ldrb	r3, [r7, #3]
1a00055e:	2b17      	cmp	r3, #23
1a000560:	d9dc      	bls.n	1a00051c <readRawValue+0x20>
	}


	for (uint8_t i=0; i<sckCycles; i++){
1a000562:	2300      	movs	r3, #0
1a000564:	70bb      	strb	r3, [r7, #2]
1a000566:	e010      	b.n	1a00058a <readRawValue+0x8e>
		gpioWrite(clkSignal, 1);
1a000568:	4b10      	ldr	r3, [pc, #64]	; (1a0005ac <readRawValue+0xb0>)
1a00056a:	f993 3000 	ldrsb.w	r3, [r3]
1a00056e:	2101      	movs	r1, #1
1a000570:	4618      	mov	r0, r3
1a000572:	f002 f9a1 	bl	1a0028b8 <gpioWrite>

		//delayInaccurateUs(1);

		gpioWrite(clkSignal, 0);
1a000576:	4b0d      	ldr	r3, [pc, #52]	; (1a0005ac <readRawValue+0xb0>)
1a000578:	f993 3000 	ldrsb.w	r3, [r3]
1a00057c:	2100      	movs	r1, #0
1a00057e:	4618      	mov	r0, r3
1a000580:	f002 f99a 	bl	1a0028b8 <gpioWrite>
	for (uint8_t i=0; i<sckCycles; i++){
1a000584:	78bb      	ldrb	r3, [r7, #2]
1a000586:	3301      	adds	r3, #1
1a000588:	70bb      	strb	r3, [r7, #2]
1a00058a:	4b09      	ldr	r3, [pc, #36]	; (1a0005b0 <readRawValue+0xb4>)
1a00058c:	781b      	ldrb	r3, [r3, #0]
1a00058e:	78ba      	ldrb	r2, [r7, #2]
1a000590:	429a      	cmp	r2, r3
1a000592:	d3e9      	bcc.n	1a000568 <readRawValue+0x6c>

		//delayInaccurateUs(1);

	}

	rawdata=rawdata^0x800000;
1a000594:	687b      	ldr	r3, [r7, #4]
1a000596:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
1a00059a:	607b      	str	r3, [r7, #4]

	return (rawdata);
1a00059c:	687b      	ldr	r3, [r7, #4]
}
1a00059e:	4618      	mov	r0, r3
1a0005a0:	3708      	adds	r7, #8
1a0005a2:	46bd      	mov	sp, r7
1a0005a4:	bd80      	pop	{r7, pc}
1a0005a6:	bf00      	nop
1a0005a8:	10000061 	.word	0x10000061
1a0005ac:	10000060 	.word	0x10000060
1a0005b0:	10000000 	.word	0x10000000

1a0005b4 <main>:
#include "HX711_driver.h"




int main (void)  {
1a0005b4:	b580      	push	{r7, lr}
1a0005b6:	af00      	add	r7, sp, #0

	// Inicializar y configurar la plataforma
	boardConfig();
1a0005b8:	f002 fa1c 	bl	1a0029f4 <boardInit>



	 // Inicializar UART_USB a 115200 baudios. Esto es de SAPI!
	uartConfig( UART_USB, 115200 );
1a0005bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005c0:	2003      	movs	r0, #3
1a0005c2:	f001 fe0b 	bl	1a0021dc <uartInit>
	/**
	 * Se inicializa el hardware especifico para este proyecto
	 */


	initHx711 (GPIO0, GPIO1, 128);
1a0005c6:	2280      	movs	r2, #128	; 0x80
1a0005c8:	210f      	movs	r1, #15
1a0005ca:	2020      	movs	r0, #32
1a0005cc:	f7ff ff52 	bl	1a000474 <initHx711>

	inicialize(); //inicialización de balanza
1a0005d0:	f7ff feec 	bl	1a0003ac <inicialize>

	uartWriteString( UART_USB, "inicializa \r\n" );
1a0005d4:	4908      	ldr	r1, [pc, #32]	; (1a0005f8 <main+0x44>)
1a0005d6:	2003      	movs	r0, #3
1a0005d8:	f001 feac 	bl	1a002334 <uartWriteString>


	while(1)  {


		msgOffset(actualizarDato());
1a0005dc:	f7ff ff1e 	bl	1a00041c <actualizarDato>
1a0005e0:	4603      	mov	r3, r0
1a0005e2:	4618      	mov	r0, r3
1a0005e4:	f7ff fef4 	bl	1a0003d0 <msgOffset>

		delay(100);
1a0005e8:	f04f 0064 	mov.w	r0, #100	; 0x64
1a0005ec:	f04f 0100 	mov.w	r1, #0
1a0005f0:	f002 fa40 	bl	1a002a74 <delay>
		msgOffset(actualizarDato());
1a0005f4:	e7f2      	b.n	1a0005dc <main+0x28>
1a0005f6:	bf00      	nop
1a0005f8:	1a002e98 	.word	0x1a002e98

1a0005fc <initialise_monitor_handles>:
{
1a0005fc:	b480      	push	{r7}
1a0005fe:	af00      	add	r7, sp, #0
}
1a000600:	bf00      	nop
1a000602:	46bd      	mov	sp, r7
1a000604:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000608:	4770      	bx	lr

1a00060a <_fini>:
void _fini(void) {}
1a00060a:	b480      	push	{r7}
1a00060c:	af00      	add	r7, sp, #0
1a00060e:	bf00      	nop
1a000610:	46bd      	mov	sp, r7
1a000612:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000616:	4770      	bx	lr

1a000618 <_init>:
void _init(void) {}
1a000618:	b480      	push	{r7}
1a00061a:	af00      	add	r7, sp, #0
1a00061c:	bf00      	nop
1a00061e:	46bd      	mov	sp, r7
1a000620:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000624:	4770      	bx	lr
1a000626:	Address 0x000000001a000626 is out of bounds.


1a000628 <Reset_Handler>:
void Reset_Handler(void) {
1a000628:	b580      	push	{r7, lr}
1a00062a:	b088      	sub	sp, #32
1a00062c:	af00      	add	r7, sp, #0
    __asm__ volatile("cpsid i");
1a00062e:	b672      	cpsid	i
    volatile unsigned int *RESET_CONTROL = (unsigned int *) 0x40053100;
1a000630:	4b29      	ldr	r3, [pc, #164]	; (1a0006d8 <Reset_Handler+0xb0>)
1a000632:	617b      	str	r3, [r7, #20]
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000634:	697b      	ldr	r3, [r7, #20]
1a000636:	4a29      	ldr	r2, [pc, #164]	; (1a0006dc <Reset_Handler+0xb4>)
1a000638:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00063a:	697b      	ldr	r3, [r7, #20]
1a00063c:	3304      	adds	r3, #4
1a00063e:	4a28      	ldr	r2, [pc, #160]	; (1a0006e0 <Reset_Handler+0xb8>)
1a000640:	601a      	str	r2, [r3, #0]
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
1a000642:	4b28      	ldr	r3, [pc, #160]	; (1a0006e4 <Reset_Handler+0xbc>)
1a000644:	613b      	str	r3, [r7, #16]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000646:	2300      	movs	r3, #0
1a000648:	61fb      	str	r3, [r7, #28]
1a00064a:	e009      	b.n	1a000660 <Reset_Handler+0x38>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00064c:	69fb      	ldr	r3, [r7, #28]
1a00064e:	009b      	lsls	r3, r3, #2
1a000650:	693a      	ldr	r2, [r7, #16]
1a000652:	4413      	add	r3, r2
1a000654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000658:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00065a:	69fb      	ldr	r3, [r7, #28]
1a00065c:	3301      	adds	r3, #1
1a00065e:	61fb      	str	r3, [r7, #28]
1a000660:	69fb      	ldr	r3, [r7, #28]
1a000662:	2b07      	cmp	r3, #7
1a000664:	d9f2      	bls.n	1a00064c <Reset_Handler+0x24>
    __asm__ volatile("cpsie i");
1a000666:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000668:	4b1f      	ldr	r3, [pc, #124]	; (1a0006e8 <Reset_Handler+0xc0>)
1a00066a:	61bb      	str	r3, [r7, #24]
    while (SectionTableAddr < &__data_section_table_end) {
1a00066c:	e013      	b.n	1a000696 <Reset_Handler+0x6e>
        LoadAddr = *SectionTableAddr++;
1a00066e:	69bb      	ldr	r3, [r7, #24]
1a000670:	1d1a      	adds	r2, r3, #4
1a000672:	61ba      	str	r2, [r7, #24]
1a000674:	681b      	ldr	r3, [r3, #0]
1a000676:	60fb      	str	r3, [r7, #12]
        ExeAddr = *SectionTableAddr++;
1a000678:	69bb      	ldr	r3, [r7, #24]
1a00067a:	1d1a      	adds	r2, r3, #4
1a00067c:	61ba      	str	r2, [r7, #24]
1a00067e:	681b      	ldr	r3, [r3, #0]
1a000680:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
1a000682:	69bb      	ldr	r3, [r7, #24]
1a000684:	1d1a      	adds	r2, r3, #4
1a000686:	61ba      	str	r2, [r7, #24]
1a000688:	681b      	ldr	r3, [r3, #0]
1a00068a:	607b      	str	r3, [r7, #4]
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00068c:	687a      	ldr	r2, [r7, #4]
1a00068e:	68b9      	ldr	r1, [r7, #8]
1a000690:	68f8      	ldr	r0, [r7, #12]
1a000692:	f7ff fd47 	bl	1a000124 <data_init>
    while (SectionTableAddr < &__data_section_table_end) {
1a000696:	69bb      	ldr	r3, [r7, #24]
1a000698:	4a14      	ldr	r2, [pc, #80]	; (1a0006ec <Reset_Handler+0xc4>)
1a00069a:	4293      	cmp	r3, r2
1a00069c:	d3e7      	bcc.n	1a00066e <Reset_Handler+0x46>
    while (SectionTableAddr < &__bss_section_table_end) {
1a00069e:	e00d      	b.n	1a0006bc <Reset_Handler+0x94>
        ExeAddr = *SectionTableAddr++;
1a0006a0:	69bb      	ldr	r3, [r7, #24]
1a0006a2:	1d1a      	adds	r2, r3, #4
1a0006a4:	61ba      	str	r2, [r7, #24]
1a0006a6:	681b      	ldr	r3, [r3, #0]
1a0006a8:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
1a0006aa:	69bb      	ldr	r3, [r7, #24]
1a0006ac:	1d1a      	adds	r2, r3, #4
1a0006ae:	61ba      	str	r2, [r7, #24]
1a0006b0:	681b      	ldr	r3, [r3, #0]
1a0006b2:	607b      	str	r3, [r7, #4]
        bss_init(ExeAddr, SectionLen);
1a0006b4:	6879      	ldr	r1, [r7, #4]
1a0006b6:	68b8      	ldr	r0, [r7, #8]
1a0006b8:	f7ff fd56 	bl	1a000168 <bss_init>
    while (SectionTableAddr < &__bss_section_table_end) {
1a0006bc:	69bb      	ldr	r3, [r7, #24]
1a0006be:	4a0c      	ldr	r2, [pc, #48]	; (1a0006f0 <Reset_Handler+0xc8>)
1a0006c0:	4293      	cmp	r3, r2
1a0006c2:	d3ed      	bcc.n	1a0006a0 <Reset_Handler+0x78>
    SystemInit();
1a0006c4:	f001 fc92 	bl	1a001fec <SystemInit>
    __libc_init_array();
1a0006c8:	f002 fb7e 	bl	1a002dc8 <__libc_init_array>
    initialise_monitor_handles();
1a0006cc:	f7ff ff96 	bl	1a0005fc <initialise_monitor_handles>
    main();
1a0006d0:	f7ff ff70 	bl	1a0005b4 <main>
        __asm__ volatile("wfi");
1a0006d4:	bf30      	wfi
1a0006d6:	e7fd      	b.n	1a0006d4 <Reset_Handler+0xac>
1a0006d8:	40053100 	.word	0x40053100
1a0006dc:	10df1000 	.word	0x10df1000
1a0006e0:	01dff7ff 	.word	0x01dff7ff
1a0006e4:	e000e280 	.word	0xe000e280
1a0006e8:	1a0000c0 	.word	0x1a0000c0
1a0006ec:	1a0000fc 	.word	0x1a0000fc
1a0006f0:	1a000124 	.word	0x1a000124

1a0006f4 <Chip_SCU_I2C0PinConfig>:
 *                  - I2C0_STANDARD_FAST_MODE: Standard/Fast mode transmit
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
1a0006f4:	b480      	push	{r7}
1a0006f6:	b083      	sub	sp, #12
1a0006f8:	af00      	add	r7, sp, #0
1a0006fa:	6078      	str	r0, [r7, #4]
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0006fc:	4a04      	ldr	r2, [pc, #16]	; (1a000710 <Chip_SCU_I2C0PinConfig+0x1c>)
1a0006fe:	687b      	ldr	r3, [r7, #4]
1a000700:	f8c2 3c84 	str.w	r3, [r2, #3204]	; 0xc84
}
1a000704:	bf00      	nop
1a000706:	370c      	adds	r7, #12
1a000708:	46bd      	mov	sp, r7
1a00070a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00070e:	4770      	bx	lr
1a000710:	40086000 	.word	0x40086000

1a000714 <Chip_GPIO_SetPinState>:
 * @param	setting	: true for high, false for low
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
1a000714:	b480      	push	{r7}
1a000716:	b083      	sub	sp, #12
1a000718:	af00      	add	r7, sp, #0
1a00071a:	6078      	str	r0, [r7, #4]
1a00071c:	4608      	mov	r0, r1
1a00071e:	4611      	mov	r1, r2
1a000720:	461a      	mov	r2, r3
1a000722:	4603      	mov	r3, r0
1a000724:	70fb      	strb	r3, [r7, #3]
1a000726:	460b      	mov	r3, r1
1a000728:	70bb      	strb	r3, [r7, #2]
1a00072a:	4613      	mov	r3, r2
1a00072c:	707b      	strb	r3, [r7, #1]
	pGPIO->B[port][pin] = setting;
1a00072e:	78fa      	ldrb	r2, [r7, #3]
1a000730:	78bb      	ldrb	r3, [r7, #2]
1a000732:	7878      	ldrb	r0, [r7, #1]
1a000734:	6879      	ldr	r1, [r7, #4]
1a000736:	0152      	lsls	r2, r2, #5
1a000738:	440a      	add	r2, r1
1a00073a:	4413      	add	r3, r2
1a00073c:	4602      	mov	r2, r0
1a00073e:	701a      	strb	r2, [r3, #0]
}
1a000740:	bf00      	nop
1a000742:	370c      	adds	r7, #12
1a000744:	46bd      	mov	sp, r7
1a000746:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00074a:	4770      	bx	lr

1a00074c <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a00074c:	b480      	push	{r7}
1a00074e:	b083      	sub	sp, #12
1a000750:	af00      	add	r7, sp, #0
1a000752:	6078      	str	r0, [r7, #4]
1a000754:	460b      	mov	r3, r1
1a000756:	70fb      	strb	r3, [r7, #3]
1a000758:	4613      	mov	r3, r2
1a00075a:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a00075c:	78fa      	ldrb	r2, [r7, #3]
1a00075e:	687b      	ldr	r3, [r7, #4]
1a000760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a000768:	78bb      	ldrb	r3, [r7, #2]
1a00076a:	2201      	movs	r2, #1
1a00076c:	fa02 f303 	lsl.w	r3, r2, r3
1a000770:	78fa      	ldrb	r2, [r7, #3]
1a000772:	4319      	orrs	r1, r3
1a000774:	687b      	ldr	r3, [r7, #4]
1a000776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00077a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00077e:	bf00      	nop
1a000780:	370c      	adds	r7, #12
1a000782:	46bd      	mov	sp, r7
1a000784:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000788:	4770      	bx	lr

1a00078a <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a00078a:	b480      	push	{r7}
1a00078c:	b083      	sub	sp, #12
1a00078e:	af00      	add	r7, sp, #0
1a000790:	6078      	str	r0, [r7, #4]
1a000792:	460b      	mov	r3, r1
1a000794:	70fb      	strb	r3, [r7, #3]
1a000796:	4613      	mov	r3, r2
1a000798:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00079a:	78fa      	ldrb	r2, [r7, #3]
1a00079c:	687b      	ldr	r3, [r7, #4]
1a00079e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0007a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a0007a6:	78bb      	ldrb	r3, [r7, #2]
1a0007a8:	2201      	movs	r2, #1
1a0007aa:	fa02 f303 	lsl.w	r3, r2, r3
1a0007ae:	43db      	mvns	r3, r3
1a0007b0:	78fa      	ldrb	r2, [r7, #3]
1a0007b2:	4019      	ands	r1, r3
1a0007b4:	687b      	ldr	r3, [r7, #4]
1a0007b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0007ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0007be:	bf00      	nop
1a0007c0:	370c      	adds	r7, #12
1a0007c2:	46bd      	mov	sp, r7
1a0007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0007c8:	4770      	bx	lr

1a0007ca <Chip_SSP_Enable>:
 * @brief	Enable SSP operation
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
1a0007ca:	b480      	push	{r7}
1a0007cc:	b083      	sub	sp, #12
1a0007ce:	af00      	add	r7, sp, #0
1a0007d0:	6078      	str	r0, [r7, #4]
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0007d2:	687b      	ldr	r3, [r7, #4]
1a0007d4:	685b      	ldr	r3, [r3, #4]
1a0007d6:	f043 0202 	orr.w	r2, r3, #2
1a0007da:	687b      	ldr	r3, [r7, #4]
1a0007dc:	605a      	str	r2, [r3, #4]
}
1a0007de:	bf00      	nop
1a0007e0:	370c      	adds	r7, #12
1a0007e2:	46bd      	mov	sp, r7
1a0007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0007e8:	4770      	bx	lr

1a0007ea <Chip_SSP_SetFormat>:
 *							- SSP_CLOCK_CPHA1_CPOL1
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
1a0007ea:	b480      	push	{r7}
1a0007ec:	b085      	sub	sp, #20
1a0007ee:	af00      	add	r7, sp, #0
1a0007f0:	60f8      	str	r0, [r7, #12]
1a0007f2:	60b9      	str	r1, [r7, #8]
1a0007f4:	607a      	str	r2, [r7, #4]
1a0007f6:	603b      	str	r3, [r7, #0]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0007f8:	68fb      	ldr	r3, [r7, #12]
1a0007fa:	681b      	ldr	r3, [r3, #0]
1a0007fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
1a000800:	68bb      	ldr	r3, [r7, #8]
1a000802:	431a      	orrs	r2, r3
1a000804:	687b      	ldr	r3, [r7, #4]
1a000806:	431a      	orrs	r2, r3
1a000808:	683b      	ldr	r3, [r7, #0]
1a00080a:	431a      	orrs	r2, r3
1a00080c:	68fb      	ldr	r3, [r7, #12]
1a00080e:	601a      	str	r2, [r3, #0]
}
1a000810:	bf00      	nop
1a000812:	3714      	adds	r7, #20
1a000814:	46bd      	mov	sp, r7
1a000816:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00081a:	4770      	bx	lr

1a00081c <Chip_SSP_Set_Mode>:
 *						- SSP_MODE_MASTER
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
1a00081c:	b480      	push	{r7}
1a00081e:	b083      	sub	sp, #12
1a000820:	af00      	add	r7, sp, #0
1a000822:	6078      	str	r0, [r7, #4]
1a000824:	6039      	str	r1, [r7, #0]
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000826:	687b      	ldr	r3, [r7, #4]
1a000828:	685b      	ldr	r3, [r3, #4]
1a00082a:	f023 0204 	bic.w	r2, r3, #4
1a00082e:	683b      	ldr	r3, [r7, #0]
1a000830:	431a      	orrs	r2, r3
1a000832:	687b      	ldr	r3, [r7, #4]
1a000834:	605a      	str	r2, [r3, #4]
}
1a000836:	bf00      	nop
1a000838:	370c      	adds	r7, #12
1a00083a:	46bd      	mov	sp, r7
1a00083c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000840:	4770      	bx	lr

1a000842 <Chip_UART_TXEnable>:
 * @brief	Enable transmission on UART TxD pin
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
1a000842:	b480      	push	{r7}
1a000844:	b083      	sub	sp, #12
1a000846:	af00      	add	r7, sp, #0
1a000848:	6078      	str	r0, [r7, #4]
    pUART->TER2 = UART_TER2_TXEN;
1a00084a:	687b      	ldr	r3, [r7, #4]
1a00084c:	2201      	movs	r2, #1
1a00084e:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a000850:	bf00      	nop
1a000852:	370c      	adds	r7, #12
1a000854:	46bd      	mov	sp, r7
1a000856:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00085a:	4770      	bx	lr

1a00085c <Chip_UART_ConfigData>:
 *			definitions. For example, a configuration of 8 data bits, 1
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
1a00085c:	b480      	push	{r7}
1a00085e:	b083      	sub	sp, #12
1a000860:	af00      	add	r7, sp, #0
1a000862:	6078      	str	r0, [r7, #4]
1a000864:	6039      	str	r1, [r7, #0]
	pUART->LCR = config;
1a000866:	687b      	ldr	r3, [r7, #4]
1a000868:	683a      	ldr	r2, [r7, #0]
1a00086a:	60da      	str	r2, [r3, #12]
}
1a00086c:	bf00      	nop
1a00086e:	370c      	adds	r7, #12
1a000870:	46bd      	mov	sp, r7
1a000872:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000876:	4770      	bx	lr

1a000878 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a000878:	b580      	push	{r7, lr}
1a00087a:	b082      	sub	sp, #8
1a00087c:	af00      	add	r7, sp, #0
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00087e:	2300      	movs	r3, #0
1a000880:	607b      	str	r3, [r7, #4]
1a000882:	e017      	b.n	1a0008b4 <Board_LED_Init+0x3c>
      const struct gpio_t *io = &GpioLeds[i];
1a000884:	687b      	ldr	r3, [r7, #4]
1a000886:	005b      	lsls	r3, r3, #1
1a000888:	4a0e      	ldr	r2, [pc, #56]	; (1a0008c4 <Board_LED_Init+0x4c>)
1a00088a:	4413      	add	r3, r2
1a00088c:	603b      	str	r3, [r7, #0]
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00088e:	683b      	ldr	r3, [r7, #0]
1a000890:	7819      	ldrb	r1, [r3, #0]
1a000892:	683b      	ldr	r3, [r7, #0]
1a000894:	785b      	ldrb	r3, [r3, #1]
1a000896:	461a      	mov	r2, r3
1a000898:	480b      	ldr	r0, [pc, #44]	; (1a0008c8 <Board_LED_Init+0x50>)
1a00089a:	f7ff ff57 	bl	1a00074c <Chip_GPIO_SetPinDIROutput>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
1a00089e:	683b      	ldr	r3, [r7, #0]
1a0008a0:	7819      	ldrb	r1, [r3, #0]
1a0008a2:	683b      	ldr	r3, [r7, #0]
1a0008a4:	785a      	ldrb	r2, [r3, #1]
1a0008a6:	2300      	movs	r3, #0
1a0008a8:	4807      	ldr	r0, [pc, #28]	; (1a0008c8 <Board_LED_Init+0x50>)
1a0008aa:	f7ff ff33 	bl	1a000714 <Chip_GPIO_SetPinState>
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0008ae:	687b      	ldr	r3, [r7, #4]
1a0008b0:	3301      	adds	r3, #1
1a0008b2:	607b      	str	r3, [r7, #4]
1a0008b4:	687b      	ldr	r3, [r7, #4]
1a0008b6:	2b05      	cmp	r3, #5
1a0008b8:	d9e4      	bls.n	1a000884 <Board_LED_Init+0xc>
   }
}
1a0008ba:	bf00      	nop
1a0008bc:	3708      	adds	r7, #8
1a0008be:	46bd      	mov	sp, r7
1a0008c0:	bd80      	pop	{r7, pc}
1a0008c2:	bf00      	nop
1a0008c4:	1a002eb0 	.word	0x1a002eb0
1a0008c8:	400f4000 	.word	0x400f4000

1a0008cc <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a0008cc:	b580      	push	{r7, lr}
1a0008ce:	b082      	sub	sp, #8
1a0008d0:	af00      	add	r7, sp, #0
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0008d2:	2300      	movs	r3, #0
1a0008d4:	607b      	str	r3, [r7, #4]
1a0008d6:	e00f      	b.n	1a0008f8 <Board_TEC_Init+0x2c>
      const struct gpio_t *io = &GpioButtons[i];
1a0008d8:	687b      	ldr	r3, [r7, #4]
1a0008da:	005b      	lsls	r3, r3, #1
1a0008dc:	4a0a      	ldr	r2, [pc, #40]	; (1a000908 <Board_TEC_Init+0x3c>)
1a0008de:	4413      	add	r3, r2
1a0008e0:	603b      	str	r3, [r7, #0]
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0008e2:	683b      	ldr	r3, [r7, #0]
1a0008e4:	7819      	ldrb	r1, [r3, #0]
1a0008e6:	683b      	ldr	r3, [r7, #0]
1a0008e8:	785b      	ldrb	r3, [r3, #1]
1a0008ea:	461a      	mov	r2, r3
1a0008ec:	4807      	ldr	r0, [pc, #28]	; (1a00090c <Board_TEC_Init+0x40>)
1a0008ee:	f7ff ff4c 	bl	1a00078a <Chip_GPIO_SetPinDIRInput>
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0008f2:	687b      	ldr	r3, [r7, #4]
1a0008f4:	3301      	adds	r3, #1
1a0008f6:	607b      	str	r3, [r7, #4]
1a0008f8:	687b      	ldr	r3, [r7, #4]
1a0008fa:	2b03      	cmp	r3, #3
1a0008fc:	d9ec      	bls.n	1a0008d8 <Board_TEC_Init+0xc>
   }
}
1a0008fe:	bf00      	nop
1a000900:	3708      	adds	r7, #8
1a000902:	46bd      	mov	sp, r7
1a000904:	bd80      	pop	{r7, pc}
1a000906:	bf00      	nop
1a000908:	1a002ebc 	.word	0x1a002ebc
1a00090c:	400f4000 	.word	0x400f4000

1a000910 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a000910:	b580      	push	{r7, lr}
1a000912:	b082      	sub	sp, #8
1a000914:	af00      	add	r7, sp, #0
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000916:	2300      	movs	r3, #0
1a000918:	607b      	str	r3, [r7, #4]
1a00091a:	e00f      	b.n	1a00093c <Board_GPIO_Init+0x2c>
      const struct gpio_t *io = &GpioPorts[i];
1a00091c:	687b      	ldr	r3, [r7, #4]
1a00091e:	005b      	lsls	r3, r3, #1
1a000920:	4a0a      	ldr	r2, [pc, #40]	; (1a00094c <Board_GPIO_Init+0x3c>)
1a000922:	4413      	add	r3, r2
1a000924:	603b      	str	r3, [r7, #0]
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000926:	683b      	ldr	r3, [r7, #0]
1a000928:	7819      	ldrb	r1, [r3, #0]
1a00092a:	683b      	ldr	r3, [r7, #0]
1a00092c:	785b      	ldrb	r3, [r3, #1]
1a00092e:	461a      	mov	r2, r3
1a000930:	4807      	ldr	r0, [pc, #28]	; (1a000950 <Board_GPIO_Init+0x40>)
1a000932:	f7ff ff2a 	bl	1a00078a <Chip_GPIO_SetPinDIRInput>
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000936:	687b      	ldr	r3, [r7, #4]
1a000938:	3301      	adds	r3, #1
1a00093a:	607b      	str	r3, [r7, #4]
1a00093c:	687b      	ldr	r3, [r7, #4]
1a00093e:	2b08      	cmp	r3, #8
1a000940:	d9ec      	bls.n	1a00091c <Board_GPIO_Init+0xc>
   }
}
1a000942:	bf00      	nop
1a000944:	3708      	adds	r7, #8
1a000946:	46bd      	mov	sp, r7
1a000948:	bd80      	pop	{r7, pc}
1a00094a:	bf00      	nop
1a00094c:	1a002ec4 	.word	0x1a002ec4
1a000950:	400f4000 	.word	0x400f4000

1a000954 <Board_I2C_Init>:


static void Board_I2C_Init()
{
1a000954:	b580      	push	{r7, lr}
1a000956:	af00      	add	r7, sp, #0
   Chip_I2C_Init(I2C0);
1a000958:	2000      	movs	r0, #0
1a00095a:	f000 f987 	bl	1a000c6c <Chip_I2C_Init>
   Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
1a00095e:	f640 0008 	movw	r0, #2056	; 0x808
1a000962:	f7ff fec7 	bl	1a0006f4 <Chip_SCU_I2C0PinConfig>
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000966:	4903      	ldr	r1, [pc, #12]	; (1a000974 <Board_I2C_Init+0x20>)
1a000968:	2000      	movs	r0, #0
1a00096a:	f000 f999 	bl	1a000ca0 <Chip_I2C_SetClockRate>
}
1a00096e:	bf00      	nop
1a000970:	bd80      	pop	{r7, pc}
1a000972:	bf00      	nop
1a000974:	000f4240 	.word	0x000f4240

1a000978 <Board_SPI_Init>:


static void Board_SPI_Init()
{
1a000978:	b580      	push	{r7, lr}
1a00097a:	af00      	add	r7, sp, #0
   Chip_SSP_Init(LPC_SSP1);
1a00097c:	480a      	ldr	r0, [pc, #40]	; (1a0009a8 <Board_SPI_Init+0x30>)
1a00097e:	f001 faf9 	bl	1a001f74 <Chip_SSP_Init>
   Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
1a000982:	2100      	movs	r1, #0
1a000984:	4808      	ldr	r0, [pc, #32]	; (1a0009a8 <Board_SPI_Init+0x30>)
1a000986:	f7ff ff49 	bl	1a00081c <Chip_SSP_Set_Mode>
   Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
1a00098a:	2300      	movs	r3, #0
1a00098c:	2200      	movs	r2, #0
1a00098e:	2107      	movs	r1, #7
1a000990:	4805      	ldr	r0, [pc, #20]	; (1a0009a8 <Board_SPI_Init+0x30>)
1a000992:	f7ff ff2a 	bl	1a0007ea <Chip_SSP_SetFormat>
                      BOARD_SPI_POLARITY);
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000996:	4905      	ldr	r1, [pc, #20]	; (1a0009ac <Board_SPI_Init+0x34>)
1a000998:	4803      	ldr	r0, [pc, #12]	; (1a0009a8 <Board_SPI_Init+0x30>)
1a00099a:	f001 fab0 	bl	1a001efe <Chip_SSP_SetBitRate>
   Chip_SSP_Enable(LPC_SSP1);
1a00099e:	4802      	ldr	r0, [pc, #8]	; (1a0009a8 <Board_SPI_Init+0x30>)
1a0009a0:	f7ff ff13 	bl	1a0007ca <Chip_SSP_Enable>
}
1a0009a4:	bf00      	nop
1a0009a6:	bd80      	pop	{r7, pc}
1a0009a8:	400c5000 	.word	0x400c5000
1a0009ac:	000186a0 	.word	0x000186a0

1a0009b0 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a0009b0:	b580      	push	{r7, lr}
1a0009b2:	b082      	sub	sp, #8
1a0009b4:	af00      	add	r7, sp, #0
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0009b6:	463b      	mov	r3, r7
1a0009b8:	4619      	mov	r1, r3
1a0009ba:	4809      	ldr	r0, [pc, #36]	; (1a0009e0 <Board_ADC_Init+0x30>)
1a0009bc:	f000 fbba 	bl	1a001134 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0009c0:	463b      	mov	r3, r7
1a0009c2:	4a08      	ldr	r2, [pc, #32]	; (1a0009e4 <Board_ADC_Init+0x34>)
1a0009c4:	4619      	mov	r1, r3
1a0009c6:	4806      	ldr	r0, [pc, #24]	; (1a0009e0 <Board_ADC_Init+0x30>)
1a0009c8:	f000 fbf8 	bl	1a0011bc <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0009cc:	463b      	mov	r3, r7
1a0009ce:	2200      	movs	r2, #0
1a0009d0:	4619      	mov	r1, r3
1a0009d2:	4803      	ldr	r0, [pc, #12]	; (1a0009e0 <Board_ADC_Init+0x30>)
1a0009d4:	f000 fc24 	bl	1a001220 <Chip_ADC_SetResolution>
}
1a0009d8:	bf00      	nop
1a0009da:	3708      	adds	r7, #8
1a0009dc:	46bd      	mov	sp, r7
1a0009de:	bd80      	pop	{r7, pc}
1a0009e0:	400e3000 	.word	0x400e3000
1a0009e4:	00061a80 	.word	0x00061a80

1a0009e8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0009e8:	b580      	push	{r7, lr}
1a0009ea:	af00      	add	r7, sp, #0
   Chip_UART_Init(DEBUG_UART);
1a0009ec:	4808      	ldr	r0, [pc, #32]	; (1a000a10 <Board_Debug_Init+0x28>)
1a0009ee:	f000 fa1d 	bl	1a000e2c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0009f2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0009f6:	4806      	ldr	r0, [pc, #24]	; (1a000a10 <Board_Debug_Init+0x28>)
1a0009f8:	f000 fa94 	bl	1a000f24 <Chip_UART_SetBaudFDR>
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
1a0009fc:	2103      	movs	r1, #3
1a0009fe:	4804      	ldr	r0, [pc, #16]	; (1a000a10 <Board_Debug_Init+0x28>)
1a000a00:	f7ff ff2c 	bl	1a00085c <Chip_UART_ConfigData>
   Chip_UART_TXEnable(DEBUG_UART);
1a000a04:	4802      	ldr	r0, [pc, #8]	; (1a000a10 <Board_Debug_Init+0x28>)
1a000a06:	f7ff ff1c 	bl	1a000842 <Chip_UART_TXEnable>
}
1a000a0a:	bf00      	nop
1a000a0c:	bd80      	pop	{r7, pc}
1a000a0e:	bf00      	nop
1a000a10:	400c1000 	.word	0x400c1000

1a000a14 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000a14:	b580      	push	{r7, lr}
1a000a16:	af00      	add	r7, sp, #0
   DEBUGINIT();
1a000a18:	f7ff ffe6 	bl	1a0009e8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000a1c:	4809      	ldr	r0, [pc, #36]	; (1a000a44 <Board_Init+0x30>)
1a000a1e:	f001 f905 	bl	1a001c2c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000a22:	f7ff ff75 	bl	1a000910 <Board_GPIO_Init>
   Board_ADC_Init();
1a000a26:	f7ff ffc3 	bl	1a0009b0 <Board_ADC_Init>
   Board_SPI_Init();
1a000a2a:	f7ff ffa5 	bl	1a000978 <Board_SPI_Init>
   Board_I2C_Init();
1a000a2e:	f7ff ff91 	bl	1a000954 <Board_I2C_Init>

   Board_LED_Init();
1a000a32:	f7ff ff21 	bl	1a000878 <Board_LED_Init>
   Board_TEC_Init();
1a000a36:	f7ff ff49 	bl	1a0008cc <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000a3a:	f000 fc07 	bl	1a00124c <SystemCoreClockUpdate>
}
1a000a3e:	bf00      	nop
1a000a40:	bd80      	pop	{r7, pc}
1a000a42:	bf00      	nop
1a000a44:	400f4000 	.word	0x400f4000

1a000a48 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000a48:	b580      	push	{r7, lr}
1a000a4a:	af00      	add	r7, sp, #0
   Board_Debug_Init();
1a000a4c:	f7ff ffcc 	bl	1a0009e8 <Board_Debug_Init>
1a000a50:	bf00      	nop
1a000a52:	bd80      	pop	{r7, pc}

1a000a54 <Chip_SCU_PinMuxSet>:
{
1a000a54:	b480      	push	{r7}
1a000a56:	b083      	sub	sp, #12
1a000a58:	af00      	add	r7, sp, #0
1a000a5a:	4603      	mov	r3, r0
1a000a5c:	71fb      	strb	r3, [r7, #7]
1a000a5e:	460b      	mov	r3, r1
1a000a60:	71bb      	strb	r3, [r7, #6]
1a000a62:	4613      	mov	r3, r2
1a000a64:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000a66:	4807      	ldr	r0, [pc, #28]	; (1a000a84 <Chip_SCU_PinMuxSet+0x30>)
1a000a68:	79f9      	ldrb	r1, [r7, #7]
1a000a6a:	79bb      	ldrb	r3, [r7, #6]
1a000a6c:	88ba      	ldrh	r2, [r7, #4]
1a000a6e:	0149      	lsls	r1, r1, #5
1a000a70:	440b      	add	r3, r1
1a000a72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a000a76:	bf00      	nop
1a000a78:	370c      	adds	r7, #12
1a000a7a:	46bd      	mov	sp, r7
1a000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000a80:	4770      	bx	lr
1a000a82:	bf00      	nop
1a000a84:	40086000 	.word	0x40086000

1a000a88 <Chip_SCU_SetPinMuxing>:
 * @param	pinArray    : Pointer to array of pin mux selections
 * @param	arrayLength : Number of entries in pinArray
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
1a000a88:	b580      	push	{r7, lr}
1a000a8a:	b084      	sub	sp, #16
1a000a8c:	af00      	add	r7, sp, #0
1a000a8e:	6078      	str	r0, [r7, #4]
1a000a90:	6039      	str	r1, [r7, #0]
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000a92:	2300      	movs	r3, #0
1a000a94:	60fb      	str	r3, [r7, #12]
1a000a96:	e014      	b.n	1a000ac2 <Chip_SCU_SetPinMuxing+0x3a>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000a98:	68fb      	ldr	r3, [r7, #12]
1a000a9a:	009b      	lsls	r3, r3, #2
1a000a9c:	687a      	ldr	r2, [r7, #4]
1a000a9e:	4413      	add	r3, r2
1a000aa0:	7818      	ldrb	r0, [r3, #0]
1a000aa2:	68fb      	ldr	r3, [r7, #12]
1a000aa4:	009b      	lsls	r3, r3, #2
1a000aa6:	687a      	ldr	r2, [r7, #4]
1a000aa8:	4413      	add	r3, r2
1a000aaa:	7859      	ldrb	r1, [r3, #1]
1a000aac:	68fb      	ldr	r3, [r7, #12]
1a000aae:	009b      	lsls	r3, r3, #2
1a000ab0:	687a      	ldr	r2, [r7, #4]
1a000ab2:	4413      	add	r3, r2
1a000ab4:	885b      	ldrh	r3, [r3, #2]
1a000ab6:	461a      	mov	r2, r3
1a000ab8:	f7ff ffcc 	bl	1a000a54 <Chip_SCU_PinMuxSet>
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000abc:	68fb      	ldr	r3, [r7, #12]
1a000abe:	3301      	adds	r3, #1
1a000ac0:	60fb      	str	r3, [r7, #12]
1a000ac2:	68fa      	ldr	r2, [r7, #12]
1a000ac4:	683b      	ldr	r3, [r7, #0]
1a000ac6:	429a      	cmp	r2, r3
1a000ac8:	d3e6      	bcc.n	1a000a98 <Chip_SCU_SetPinMuxing+0x10>
	}
}
1a000aca:	bf00      	nop
1a000acc:	3710      	adds	r7, #16
1a000ace:	46bd      	mov	sp, r7
1a000ad0:	bd80      	pop	{r7, pc}
1a000ad2:	Address 0x000000001a000ad2 is out of bounds.


1a000ad4 <Chip_CREG_SetFlashAcceleration>:
 * This function should be called with the higher frequency before the clock frequency is
 * increased and it should be called with the new lower value after the clock frequency is
 * decreased.
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
1a000ad4:	b480      	push	{r7}
1a000ad6:	b085      	sub	sp, #20
1a000ad8:	af00      	add	r7, sp, #0
1a000ada:	6078      	str	r0, [r7, #4]
	uint32_t FAValue = Hz / 21510000;
1a000adc:	687b      	ldr	r3, [r7, #4]
1a000ade:	4a10      	ldr	r2, [pc, #64]	; (1a000b20 <Chip_CREG_SetFlashAcceleration+0x4c>)
1a000ae0:	fba2 2303 	umull	r2, r3, r2, r3
1a000ae4:	0ddb      	lsrs	r3, r3, #23
1a000ae6:	60fb      	str	r3, [r7, #12]

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000ae8:	4b0e      	ldr	r3, [pc, #56]	; (1a000b24 <Chip_CREG_SetFlashAcceleration+0x50>)
1a000aea:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a000aee:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
1a000af2:	68fb      	ldr	r3, [r7, #12]
1a000af4:	031b      	lsls	r3, r3, #12
1a000af6:	490b      	ldr	r1, [pc, #44]	; (1a000b24 <Chip_CREG_SetFlashAcceleration+0x50>)
1a000af8:	4313      	orrs	r3, r2
1a000afa:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000afe:	4b09      	ldr	r3, [pc, #36]	; (1a000b24 <Chip_CREG_SetFlashAcceleration+0x50>)
1a000b00:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
1a000b04:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
1a000b08:	68fb      	ldr	r3, [r7, #12]
1a000b0a:	031b      	lsls	r3, r3, #12
1a000b0c:	4905      	ldr	r1, [pc, #20]	; (1a000b24 <Chip_CREG_SetFlashAcceleration+0x50>)
1a000b0e:	4313      	orrs	r3, r2
1a000b10:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
}
1a000b14:	bf00      	nop
1a000b16:	3714      	adds	r7, #20
1a000b18:	46bd      	mov	sp, r7
1a000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000b1e:	4770      	bx	lr
1a000b20:	63d6267d 	.word	0x63d6267d
1a000b24:	40043000 	.word	0x40043000

1a000b28 <Board_SetupMuxing>:
    #endif
};


void Board_SetupMuxing(void)
{
1a000b28:	b580      	push	{r7, lr}
1a000b2a:	af00      	add	r7, sp, #0
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
1a000b2c:	211d      	movs	r1, #29
1a000b2e:	4802      	ldr	r0, [pc, #8]	; (1a000b38 <Board_SetupMuxing+0x10>)
1a000b30:	f7ff ffaa 	bl	1a000a88 <Chip_SCU_SetPinMuxing>
}
1a000b34:	bf00      	nop
1a000b36:	bd80      	pop	{r7, pc}
1a000b38:	1a002edc 	.word	0x1a002edc

1a000b3c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000b3c:	b580      	push	{r7, lr}
1a000b3e:	b082      	sub	sp, #8
1a000b40:	af00      	add	r7, sp, #0
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
1a000b42:	4818      	ldr	r0, [pc, #96]	; (1a000ba4 <Board_SetupClocking+0x68>)
1a000b44:	f7ff ffc6 	bl	1a000ad4 <Chip_CREG_SetFlashAcceleration>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b48:	2201      	movs	r2, #1
1a000b4a:	4916      	ldr	r1, [pc, #88]	; (1a000ba4 <Board_SetupClocking+0x68>)
1a000b4c:	2006      	movs	r0, #6
1a000b4e:	f001 f8bd 	bl	1a001ccc <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b52:	2300      	movs	r3, #0
1a000b54:	607b      	str	r3, [r7, #4]
1a000b56:	e011      	b.n	1a000b7c <Board_SetupClocking+0x40>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
1a000b58:	687b      	ldr	r3, [r7, #4]
1a000b5a:	009b      	lsls	r3, r3, #2
1a000b5c:	4a12      	ldr	r2, [pc, #72]	; (1a000ba8 <Board_SetupClocking+0x6c>)
1a000b5e:	4413      	add	r3, r2
1a000b60:	603b      	str	r3, [r7, #0]
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000b62:	683b      	ldr	r3, [r7, #0]
1a000b64:	7818      	ldrb	r0, [r3, #0]
1a000b66:	683b      	ldr	r3, [r7, #0]
1a000b68:	7859      	ldrb	r1, [r3, #1]
1a000b6a:	683b      	ldr	r3, [r7, #0]
1a000b6c:	789a      	ldrb	r2, [r3, #2]
1a000b6e:	683b      	ldr	r3, [r7, #0]
1a000b70:	78db      	ldrb	r3, [r3, #3]
1a000b72:	f000 ff35 	bl	1a0019e0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b76:	687b      	ldr	r3, [r7, #4]
1a000b78:	3301      	adds	r3, #1
1a000b7a:	607b      	str	r3, [r7, #4]
1a000b7c:	687b      	ldr	r3, [r7, #4]
1a000b7e:	2b00      	cmp	r3, #0
1a000b80:	d0ea      	beq.n	1a000b58 <Board_SetupClocking+0x1c>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b82:	4b0a      	ldr	r3, [pc, #40]	; (1a000bac <Board_SetupClocking+0x70>)
1a000b84:	685b      	ldr	r3, [r3, #4]
1a000b86:	4a09      	ldr	r2, [pc, #36]	; (1a000bac <Board_SetupClocking+0x70>)
1a000b88:	f023 030c 	bic.w	r3, r3, #12
1a000b8c:	6053      	str	r3, [r2, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000b8e:	4b07      	ldr	r3, [pc, #28]	; (1a000bac <Board_SetupClocking+0x70>)
1a000b90:	685b      	ldr	r3, [r3, #4]
1a000b92:	4a06      	ldr	r2, [pc, #24]	; (1a000bac <Board_SetupClocking+0x70>)
1a000b94:	f043 0303 	orr.w	r3, r3, #3
1a000b98:	6053      	str	r3, [r2, #4]
}
1a000b9a:	bf00      	nop
1a000b9c:	3708      	adds	r7, #8
1a000b9e:	46bd      	mov	sp, r7
1a000ba0:	bd80      	pop	{r7, pc}
1a000ba2:	bf00      	nop
1a000ba4:	0c28cb00 	.word	0x0c28cb00
1a000ba8:	1a002ed8 	.word	0x1a002ed8
1a000bac:	40043000 	.word	0x40043000

1a000bb0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000bb0:	b580      	push	{r7, lr}
1a000bb2:	af00      	add	r7, sp, #0
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000bb4:	f7ff ffb8 	bl	1a000b28 <Board_SetupMuxing>
    Board_SetupClocking();
1a000bb8:	f7ff ffc0 	bl	1a000b3c <Board_SetupClocking>
}
1a000bbc:	bf00      	nop
1a000bbe:	bd80      	pop	{r7, pc}

1a000bc0 <enableClk>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
1a000bc0:	b580      	push	{r7, lr}
1a000bc2:	b082      	sub	sp, #8
1a000bc4:	af00      	add	r7, sp, #0
1a000bc6:	4603      	mov	r3, r0
1a000bc8:	71fb      	strb	r3, [r7, #7]
	Chip_Clock_Enable(i2c[id].clk);
1a000bca:	79fa      	ldrb	r2, [r7, #7]
1a000bcc:	4907      	ldr	r1, [pc, #28]	; (1a000bec <enableClk+0x2c>)
1a000bce:	4613      	mov	r3, r2
1a000bd0:	00db      	lsls	r3, r3, #3
1a000bd2:	1a9b      	subs	r3, r3, r2
1a000bd4:	009b      	lsls	r3, r3, #2
1a000bd6:	440b      	add	r3, r1
1a000bd8:	3304      	adds	r3, #4
1a000bda:	881b      	ldrh	r3, [r3, #0]
1a000bdc:	4618      	mov	r0, r3
1a000bde:	f000 ffb1 	bl	1a001b44 <Chip_Clock_Enable>
}
1a000be2:	bf00      	nop
1a000be4:	3708      	adds	r7, #8
1a000be6:	46bd      	mov	sp, r7
1a000be8:	bd80      	pop	{r7, pc}
1a000bea:	bf00      	nop
1a000bec:	10000004 	.word	0x10000004

1a000bf0 <getClkRate>:
	Chip_Clock_Disable(i2c[id].clk);
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
1a000bf0:	b580      	push	{r7, lr}
1a000bf2:	b082      	sub	sp, #8
1a000bf4:	af00      	add	r7, sp, #0
1a000bf6:	4603      	mov	r3, r0
1a000bf8:	71fb      	strb	r3, [r7, #7]
	return Chip_Clock_GetRate(i2c[id].clk);
1a000bfa:	79fa      	ldrb	r2, [r7, #7]
1a000bfc:	4907      	ldr	r1, [pc, #28]	; (1a000c1c <getClkRate+0x2c>)
1a000bfe:	4613      	mov	r3, r2
1a000c00:	00db      	lsls	r3, r3, #3
1a000c02:	1a9b      	subs	r3, r3, r2
1a000c04:	009b      	lsls	r3, r3, #2
1a000c06:	440b      	add	r3, r1
1a000c08:	3304      	adds	r3, #4
1a000c0a:	881b      	ldrh	r3, [r3, #0]
1a000c0c:	4618      	mov	r0, r3
1a000c0e:	f000 ffc9 	bl	1a001ba4 <Chip_Clock_GetRate>
1a000c12:	4603      	mov	r3, r0
}
1a000c14:	4618      	mov	r0, r3
1a000c16:	3708      	adds	r7, #8
1a000c18:	46bd      	mov	sp, r7
1a000c1a:	bd80      	pop	{r7, pc}
1a000c1c:	10000004 	.word	0x10000004

1a000c20 <Chip_I2C_EventHandler>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Chip event handler interrupt based */
void Chip_I2C_EventHandler(I2C_ID_T id, I2C_EVENT_T event)
{
1a000c20:	b480      	push	{r7}
1a000c22:	b085      	sub	sp, #20
1a000c24:	af00      	add	r7, sp, #0
1a000c26:	4603      	mov	r3, r0
1a000c28:	460a      	mov	r2, r1
1a000c2a:	71fb      	strb	r3, [r7, #7]
1a000c2c:	4613      	mov	r3, r2
1a000c2e:	71bb      	strb	r3, [r7, #6]
	struct i2c_interface *iic = &i2c[id];
1a000c30:	79fa      	ldrb	r2, [r7, #7]
1a000c32:	4613      	mov	r3, r2
1a000c34:	00db      	lsls	r3, r3, #3
1a000c36:	1a9b      	subs	r3, r3, r2
1a000c38:	009b      	lsls	r3, r3, #2
1a000c3a:	4a0b      	ldr	r2, [pc, #44]	; (1a000c68 <Chip_I2C_EventHandler+0x48>)
1a000c3c:	4413      	add	r3, r2
1a000c3e:	60fb      	str	r3, [r7, #12]
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000c40:	79bb      	ldrb	r3, [r7, #6]
1a000c42:	2b01      	cmp	r3, #1
1a000c44:	d10a      	bne.n	1a000c5c <Chip_I2C_EventHandler+0x3c>
		return;
	}

	stat = &iic->mXfer->status;
1a000c46:	68fb      	ldr	r3, [r7, #12]
1a000c48:	691b      	ldr	r3, [r3, #16]
1a000c4a:	3314      	adds	r3, #20
1a000c4c:	60bb      	str	r3, [r7, #8]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000c4e:	bf00      	nop
1a000c50:	68bb      	ldr	r3, [r7, #8]
1a000c52:	781b      	ldrb	r3, [r3, #0]
1a000c54:	b2db      	uxtb	r3, r3
1a000c56:	2b04      	cmp	r3, #4
1a000c58:	d0fa      	beq.n	1a000c50 <Chip_I2C_EventHandler+0x30>
1a000c5a:	e000      	b.n	1a000c5e <Chip_I2C_EventHandler+0x3e>
		return;
1a000c5c:	bf00      	nop
}
1a000c5e:	3714      	adds	r7, #20
1a000c60:	46bd      	mov	sp, r7
1a000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000c66:	4770      	bx	lr
1a000c68:	10000004 	.word	0x10000004

1a000c6c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000c6c:	b580      	push	{r7, lr}
1a000c6e:	b082      	sub	sp, #8
1a000c70:	af00      	add	r7, sp, #0
1a000c72:	4603      	mov	r3, r0
1a000c74:	71fb      	strb	r3, [r7, #7]
	enableClk(id);
1a000c76:	79fb      	ldrb	r3, [r7, #7]
1a000c78:	4618      	mov	r0, r3
1a000c7a:	f7ff ffa1 	bl	1a000bc0 <enableClk>

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000c7e:	79fa      	ldrb	r2, [r7, #7]
1a000c80:	4906      	ldr	r1, [pc, #24]	; (1a000c9c <Chip_I2C_Init+0x30>)
1a000c82:	4613      	mov	r3, r2
1a000c84:	00db      	lsls	r3, r3, #3
1a000c86:	1a9b      	subs	r3, r3, r2
1a000c88:	009b      	lsls	r3, r3, #2
1a000c8a:	440b      	add	r3, r1
1a000c8c:	681b      	ldr	r3, [r3, #0]
1a000c8e:	226c      	movs	r2, #108	; 0x6c
1a000c90:	619a      	str	r2, [r3, #24]
}
1a000c92:	bf00      	nop
1a000c94:	3708      	adds	r7, #8
1a000c96:	46bd      	mov	sp, r7
1a000c98:	bd80      	pop	{r7, pc}
1a000c9a:	bf00      	nop
1a000c9c:	10000004 	.word	0x10000004

1a000ca0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000ca0:	b580      	push	{r7, lr}
1a000ca2:	b084      	sub	sp, #16
1a000ca4:	af00      	add	r7, sp, #0
1a000ca6:	4603      	mov	r3, r0
1a000ca8:	6039      	str	r1, [r7, #0]
1a000caa:	71fb      	strb	r3, [r7, #7]
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000cac:	79fb      	ldrb	r3, [r7, #7]
1a000cae:	4618      	mov	r0, r3
1a000cb0:	f7ff ff9e 	bl	1a000bf0 <getClkRate>
1a000cb4:	4602      	mov	r2, r0
1a000cb6:	683b      	ldr	r3, [r7, #0]
1a000cb8:	fbb2 f3f3 	udiv	r3, r2, r3
1a000cbc:	60fb      	str	r3, [r7, #12]
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000cbe:	79fa      	ldrb	r2, [r7, #7]
1a000cc0:	4910      	ldr	r1, [pc, #64]	; (1a000d04 <Chip_I2C_SetClockRate+0x64>)
1a000cc2:	4613      	mov	r3, r2
1a000cc4:	00db      	lsls	r3, r3, #3
1a000cc6:	1a9b      	subs	r3, r3, r2
1a000cc8:	009b      	lsls	r3, r3, #2
1a000cca:	440b      	add	r3, r1
1a000ccc:	681b      	ldr	r3, [r3, #0]
1a000cce:	68fa      	ldr	r2, [r7, #12]
1a000cd0:	0852      	lsrs	r2, r2, #1
1a000cd2:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000cd4:	79fa      	ldrb	r2, [r7, #7]
1a000cd6:	490b      	ldr	r1, [pc, #44]	; (1a000d04 <Chip_I2C_SetClockRate+0x64>)
1a000cd8:	4613      	mov	r3, r2
1a000cda:	00db      	lsls	r3, r3, #3
1a000cdc:	1a9b      	subs	r3, r3, r2
1a000cde:	009b      	lsls	r3, r3, #2
1a000ce0:	440b      	add	r3, r1
1a000ce2:	681b      	ldr	r3, [r3, #0]
1a000ce4:	6919      	ldr	r1, [r3, #16]
1a000ce6:	79fa      	ldrb	r2, [r7, #7]
1a000ce8:	4806      	ldr	r0, [pc, #24]	; (1a000d04 <Chip_I2C_SetClockRate+0x64>)
1a000cea:	4613      	mov	r3, r2
1a000cec:	00db      	lsls	r3, r3, #3
1a000cee:	1a9b      	subs	r3, r3, r2
1a000cf0:	009b      	lsls	r3, r3, #2
1a000cf2:	4403      	add	r3, r0
1a000cf4:	681b      	ldr	r3, [r3, #0]
1a000cf6:	68fa      	ldr	r2, [r7, #12]
1a000cf8:	1a52      	subs	r2, r2, r1
1a000cfa:	615a      	str	r2, [r3, #20]
}
1a000cfc:	bf00      	nop
1a000cfe:	3710      	adds	r7, #16
1a000d00:	46bd      	mov	sp, r7
1a000d02:	bd80      	pop	{r7, pc}
1a000d04:	10000004 	.word	0x10000004

1a000d08 <Chip_UART_TXDisable>:
{
1a000d08:	b480      	push	{r7}
1a000d0a:	b083      	sub	sp, #12
1a000d0c:	af00      	add	r7, sp, #0
1a000d0e:	6078      	str	r0, [r7, #4]
    pUART->TER2 = 0;
1a000d10:	687b      	ldr	r3, [r7, #4]
1a000d12:	2200      	movs	r2, #0
1a000d14:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a000d16:	bf00      	nop
1a000d18:	370c      	adds	r7, #12
1a000d1a:	46bd      	mov	sp, r7
1a000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000d20:	4770      	bx	lr

1a000d22 <Chip_UART_SetupFIFOS>:
{
1a000d22:	b480      	push	{r7}
1a000d24:	b083      	sub	sp, #12
1a000d26:	af00      	add	r7, sp, #0
1a000d28:	6078      	str	r0, [r7, #4]
1a000d2a:	6039      	str	r1, [r7, #0]
	pUART->FCR = fcr;
1a000d2c:	687b      	ldr	r3, [r7, #4]
1a000d2e:	683a      	ldr	r2, [r7, #0]
1a000d30:	609a      	str	r2, [r3, #8]
}
1a000d32:	bf00      	nop
1a000d34:	370c      	adds	r7, #12
1a000d36:	46bd      	mov	sp, r7
1a000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000d3c:	4770      	bx	lr

1a000d3e <Chip_UART_ConfigData>:
{
1a000d3e:	b480      	push	{r7}
1a000d40:	b083      	sub	sp, #12
1a000d42:	af00      	add	r7, sp, #0
1a000d44:	6078      	str	r0, [r7, #4]
1a000d46:	6039      	str	r1, [r7, #0]
	pUART->LCR = config;
1a000d48:	687b      	ldr	r3, [r7, #4]
1a000d4a:	683a      	ldr	r2, [r7, #0]
1a000d4c:	60da      	str	r2, [r3, #12]
}
1a000d4e:	bf00      	nop
1a000d50:	370c      	adds	r7, #12
1a000d52:	46bd      	mov	sp, r7
1a000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000d58:	4770      	bx	lr

1a000d5a <Chip_UART_EnableDivisorAccess>:
 * @brief	Enable access to Divisor Latches
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
1a000d5a:	b480      	push	{r7}
1a000d5c:	b083      	sub	sp, #12
1a000d5e:	af00      	add	r7, sp, #0
1a000d60:	6078      	str	r0, [r7, #4]
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000d62:	687b      	ldr	r3, [r7, #4]
1a000d64:	68db      	ldr	r3, [r3, #12]
1a000d66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
1a000d6a:	687b      	ldr	r3, [r7, #4]
1a000d6c:	60da      	str	r2, [r3, #12]
}
1a000d6e:	bf00      	nop
1a000d70:	370c      	adds	r7, #12
1a000d72:	46bd      	mov	sp, r7
1a000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000d78:	4770      	bx	lr

1a000d7a <Chip_UART_DisableDivisorAccess>:
 * @brief	Disable access to Divisor Latches
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
1a000d7a:	b480      	push	{r7}
1a000d7c:	b083      	sub	sp, #12
1a000d7e:	af00      	add	r7, sp, #0
1a000d80:	6078      	str	r0, [r7, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000d82:	687b      	ldr	r3, [r7, #4]
1a000d84:	68db      	ldr	r3, [r3, #12]
1a000d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
1a000d8a:	687b      	ldr	r3, [r7, #4]
1a000d8c:	60da      	str	r2, [r3, #12]
}
1a000d8e:	bf00      	nop
1a000d90:	370c      	adds	r7, #12
1a000d92:	46bd      	mov	sp, r7
1a000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000d98:	4770      	bx	lr

1a000d9a <Chip_UART_SetDivisorLatches>:
 * @note	The Divisor Latch Access Bit (DLAB) in LCR must be set in
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
1a000d9a:	b480      	push	{r7}
1a000d9c:	b083      	sub	sp, #12
1a000d9e:	af00      	add	r7, sp, #0
1a000da0:	6078      	str	r0, [r7, #4]
1a000da2:	460b      	mov	r3, r1
1a000da4:	70fb      	strb	r3, [r7, #3]
1a000da6:	4613      	mov	r3, r2
1a000da8:	70bb      	strb	r3, [r7, #2]
	pUART->DLL = (uint32_t) dll;
1a000daa:	78fa      	ldrb	r2, [r7, #3]
1a000dac:	687b      	ldr	r3, [r7, #4]
1a000dae:	601a      	str	r2, [r3, #0]
	pUART->DLM = (uint32_t) dlm;
1a000db0:	78ba      	ldrb	r2, [r7, #2]
1a000db2:	687b      	ldr	r3, [r7, #4]
1a000db4:	605a      	str	r2, [r3, #4]
}
1a000db6:	bf00      	nop
1a000db8:	370c      	adds	r7, #12
1a000dba:	46bd      	mov	sp, r7
1a000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000dc0:	4770      	bx	lr
1a000dc2:	Address 0x000000001a000dc2 is out of bounds.


1a000dc4 <Chip_UART_GetIndex>:
/* UART Bus clocks */
static const CHIP_CCU_CLK_T UART_BClock[] = {CLK_APB0_UART0, CLK_APB0_UART1, CLK_APB2_UART2, CLK_APB2_UART3};

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
1a000dc4:	b480      	push	{r7}
1a000dc6:	b085      	sub	sp, #20
1a000dc8:	af00      	add	r7, sp, #0
1a000dca:	6078      	str	r0, [r7, #4]
	uint32_t base = (uint32_t) pUART;
1a000dcc:	687b      	ldr	r3, [r7, #4]
1a000dce:	60fb      	str	r3, [r7, #12]
	switch(base) {
1a000dd0:	68fb      	ldr	r3, [r7, #12]
1a000dd2:	4a12      	ldr	r2, [pc, #72]	; (1a000e1c <Chip_UART_GetIndex+0x58>)
1a000dd4:	4293      	cmp	r3, r2
1a000dd6:	d013      	beq.n	1a000e00 <Chip_UART_GetIndex+0x3c>
1a000dd8:	68fb      	ldr	r3, [r7, #12]
1a000dda:	4a10      	ldr	r2, [pc, #64]	; (1a000e1c <Chip_UART_GetIndex+0x58>)
1a000ddc:	4293      	cmp	r3, r2
1a000dde:	d804      	bhi.n	1a000dea <Chip_UART_GetIndex+0x26>
1a000de0:	68fb      	ldr	r3, [r7, #12]
1a000de2:	4a0f      	ldr	r2, [pc, #60]	; (1a000e20 <Chip_UART_GetIndex+0x5c>)
1a000de4:	4293      	cmp	r3, r2
1a000de6:	d009      	beq.n	1a000dfc <Chip_UART_GetIndex+0x38>
1a000de8:	e010      	b.n	1a000e0c <Chip_UART_GetIndex+0x48>
1a000dea:	68fb      	ldr	r3, [r7, #12]
1a000dec:	4a0d      	ldr	r2, [pc, #52]	; (1a000e24 <Chip_UART_GetIndex+0x60>)
1a000dee:	4293      	cmp	r3, r2
1a000df0:	d008      	beq.n	1a000e04 <Chip_UART_GetIndex+0x40>
1a000df2:	68fb      	ldr	r3, [r7, #12]
1a000df4:	4a0c      	ldr	r2, [pc, #48]	; (1a000e28 <Chip_UART_GetIndex+0x64>)
1a000df6:	4293      	cmp	r3, r2
1a000df8:	d006      	beq.n	1a000e08 <Chip_UART_GetIndex+0x44>
1a000dfa:	e007      	b.n	1a000e0c <Chip_UART_GetIndex+0x48>
		case LPC_USART0_BASE:
			return 0;
1a000dfc:	2300      	movs	r3, #0
1a000dfe:	e006      	b.n	1a000e0e <Chip_UART_GetIndex+0x4a>
		case LPC_UART1_BASE:
			return 1;
1a000e00:	2301      	movs	r3, #1
1a000e02:	e004      	b.n	1a000e0e <Chip_UART_GetIndex+0x4a>
		case LPC_USART2_BASE:
			return 2;
1a000e04:	2302      	movs	r3, #2
1a000e06:	e002      	b.n	1a000e0e <Chip_UART_GetIndex+0x4a>
		case LPC_USART3_BASE:
			return 3;
1a000e08:	2303      	movs	r3, #3
1a000e0a:	e000      	b.n	1a000e0e <Chip_UART_GetIndex+0x4a>
		default:
			return 0; /* Should never come here */
1a000e0c:	2300      	movs	r3, #0
	}
}
1a000e0e:	4618      	mov	r0, r3
1a000e10:	3714      	adds	r7, #20
1a000e12:	46bd      	mov	sp, r7
1a000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000e18:	4770      	bx	lr
1a000e1a:	bf00      	nop
1a000e1c:	40082000 	.word	0x40082000
1a000e20:	40081000 	.word	0x40081000
1a000e24:	400c1000 	.word	0x400c1000
1a000e28:	400c2000 	.word	0x400c2000

1a000e2c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000e2c:	b580      	push	{r7, lr}
1a000e2e:	b084      	sub	sp, #16
1a000e30:	af00      	add	r7, sp, #0
1a000e32:	6078      	str	r0, [r7, #4]
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000e34:	6878      	ldr	r0, [r7, #4]
1a000e36:	f7ff ffc5 	bl	1a000dc4 <Chip_UART_GetIndex>
1a000e3a:	4602      	mov	r2, r0
1a000e3c:	4b1b      	ldr	r3, [pc, #108]	; (1a000eac <Chip_UART_Init+0x80>)
1a000e3e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
1a000e42:	2301      	movs	r3, #1
1a000e44:	2201      	movs	r2, #1
1a000e46:	2101      	movs	r1, #1
1a000e48:	f000 fe3e 	bl	1a001ac8 <Chip_Clock_EnableOpts>

	/* Enable FIFOs by default, reset them */
	Chip_UART_SetupFIFOS(pUART, (UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS));
1a000e4c:	2107      	movs	r1, #7
1a000e4e:	6878      	ldr	r0, [r7, #4]
1a000e50:	f7ff ff67 	bl	1a000d22 <Chip_UART_SetupFIFOS>

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);
1a000e54:	6878      	ldr	r0, [r7, #4]
1a000e56:	f7ff ff57 	bl	1a000d08 <Chip_UART_TXDisable>

    /* Disable interrupts */
	pUART->IER = 0;
1a000e5a:	687b      	ldr	r3, [r7, #4]
1a000e5c:	2200      	movs	r2, #0
1a000e5e:	605a      	str	r2, [r3, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000e60:	687b      	ldr	r3, [r7, #4]
1a000e62:	2200      	movs	r2, #0
1a000e64:	60da      	str	r2, [r3, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000e66:	687b      	ldr	r3, [r7, #4]
1a000e68:	2200      	movs	r2, #0
1a000e6a:	621a      	str	r2, [r3, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000e6c:	687b      	ldr	r3, [r7, #4]
1a000e6e:	2200      	movs	r2, #0
1a000e70:	64da      	str	r2, [r3, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000e72:	687b      	ldr	r3, [r7, #4]
1a000e74:	2200      	movs	r2, #0
1a000e76:	655a      	str	r2, [r3, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000e78:	687b      	ldr	r3, [r7, #4]
1a000e7a:	2200      	movs	r2, #0
1a000e7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000e7e:	687b      	ldr	r3, [r7, #4]
1a000e80:	4a0b      	ldr	r2, [pc, #44]	; (1a000eb0 <Chip_UART_Init+0x84>)
1a000e82:	4293      	cmp	r3, r2
1a000e84:	d105      	bne.n	1a000e92 <Chip_UART_Init+0x66>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a000e86:	687b      	ldr	r3, [r7, #4]
1a000e88:	2200      	movs	r2, #0
1a000e8a:	611a      	str	r2, [r3, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a000e8c:	687b      	ldr	r3, [r7, #4]
1a000e8e:	699b      	ldr	r3, [r3, #24]
1a000e90:	60fb      	str	r3, [r7, #12]
	}

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
1a000e92:	2103      	movs	r1, #3
1a000e94:	6878      	ldr	r0, [r7, #4]
1a000e96:	f7ff ff52 	bl	1a000d3e <Chip_UART_ConfigData>

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000e9a:	687b      	ldr	r3, [r7, #4]
1a000e9c:	2210      	movs	r2, #16
1a000e9e:	629a      	str	r2, [r3, #40]	; 0x28

    (void) tmp;
1a000ea0:	68fb      	ldr	r3, [r7, #12]
}
1a000ea2:	bf00      	nop
1a000ea4:	3710      	adds	r7, #16
1a000ea6:	46bd      	mov	sp, r7
1a000ea8:	bd80      	pop	{r7, pc}
1a000eaa:	bf00      	nop
1a000eac:	1a002f50 	.word	0x1a002f50
1a000eb0:	40082000 	.word	0x40082000

1a000eb4 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000eb4:	b580      	push	{r7, lr}
1a000eb6:	b086      	sub	sp, #24
1a000eb8:	af00      	add	r7, sp, #0
1a000eba:	6078      	str	r0, [r7, #4]
1a000ebc:	6039      	str	r1, [r7, #0]
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000ebe:	6878      	ldr	r0, [r7, #4]
1a000ec0:	f7ff ff80 	bl	1a000dc4 <Chip_UART_GetIndex>
1a000ec4:	4602      	mov	r2, r0
1a000ec6:	4b16      	ldr	r3, [pc, #88]	; (1a000f20 <Chip_UART_SetBaud+0x6c>)
1a000ec8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
1a000ecc:	4618      	mov	r0, r3
1a000ece:	f000 fe69 	bl	1a001ba4 <Chip_Clock_GetRate>
1a000ed2:	6178      	str	r0, [r7, #20]
	div = clkin / (baudrate * 16);
1a000ed4:	683b      	ldr	r3, [r7, #0]
1a000ed6:	011b      	lsls	r3, r3, #4
1a000ed8:	697a      	ldr	r2, [r7, #20]
1a000eda:	fbb2 f3f3 	udiv	r3, r2, r3
1a000ede:	613b      	str	r3, [r7, #16]

	/* High and low halves of the divider */
	divh = div / 256;
1a000ee0:	693b      	ldr	r3, [r7, #16]
1a000ee2:	0a1b      	lsrs	r3, r3, #8
1a000ee4:	60fb      	str	r3, [r7, #12]
	divl = div - (divh * 256);
1a000ee6:	68fb      	ldr	r3, [r7, #12]
1a000ee8:	021b      	lsls	r3, r3, #8
1a000eea:	693a      	ldr	r2, [r7, #16]
1a000eec:	1ad3      	subs	r3, r2, r3
1a000eee:	60bb      	str	r3, [r7, #8]

	Chip_UART_EnableDivisorAccess(pUART);
1a000ef0:	6878      	ldr	r0, [r7, #4]
1a000ef2:	f7ff ff32 	bl	1a000d5a <Chip_UART_EnableDivisorAccess>
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
1a000ef6:	68bb      	ldr	r3, [r7, #8]
1a000ef8:	b2db      	uxtb	r3, r3
1a000efa:	68fa      	ldr	r2, [r7, #12]
1a000efc:	b2d2      	uxtb	r2, r2
1a000efe:	4619      	mov	r1, r3
1a000f00:	6878      	ldr	r0, [r7, #4]
1a000f02:	f7ff ff4a 	bl	1a000d9a <Chip_UART_SetDivisorLatches>
	Chip_UART_DisableDivisorAccess(pUART);
1a000f06:	6878      	ldr	r0, [r7, #4]
1a000f08:	f7ff ff37 	bl	1a000d7a <Chip_UART_DisableDivisorAccess>

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000f0c:	697a      	ldr	r2, [r7, #20]
1a000f0e:	693b      	ldr	r3, [r7, #16]
1a000f10:	fbb2 f3f3 	udiv	r3, r2, r3
1a000f14:	091b      	lsrs	r3, r3, #4
}
1a000f16:	4618      	mov	r0, r3
1a000f18:	3718      	adds	r7, #24
1a000f1a:	46bd      	mov	sp, r7
1a000f1c:	bd80      	pop	{r7, pc}
1a000f1e:	bf00      	nop
1a000f20:	1a002f58 	.word	0x1a002f58

1a000f24 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f26:	b08f      	sub	sp, #60	; 0x3c
1a000f28:	af00      	add	r7, sp, #0
1a000f2a:	6078      	str	r0, [r7, #4]
1a000f2c:	6039      	str	r1, [r7, #0]
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000f2e:	2300      	movs	r3, #0
1a000f30:	637b      	str	r3, [r7, #52]	; 0x34
1a000f32:	2301      	movs	r3, #1
1a000f34:	633b      	str	r3, [r7, #48]	; 0x30
1a000f36:	2300      	movs	r3, #0
1a000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a000f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000f3e:	623b      	str	r3, [r7, #32]

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000f40:	6878      	ldr	r0, [r7, #4]
1a000f42:	f7ff ff3f 	bl	1a000dc4 <Chip_UART_GetIndex>
1a000f46:	4602      	mov	r2, r0
1a000f48:	4b50      	ldr	r3, [pc, #320]	; (1a00108c <Chip_UART_SetBaudFDR+0x168>)
1a000f4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
1a000f4e:	4618      	mov	r0, r3
1a000f50:	f000 fe28 	bl	1a001ba4 <Chip_Clock_GetRate>
1a000f54:	6178      	str	r0, [r7, #20]

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f56:	2301      	movs	r3, #1
1a000f58:	62bb      	str	r3, [r7, #40]	; 0x28
1a000f5a:	e063      	b.n	1a001024 <Chip_UART_SetBaudFDR+0x100>
		for (d = 0; d < m; d++) {
1a000f5c:	2300      	movs	r3, #0
1a000f5e:	627b      	str	r3, [r7, #36]	; 0x24
1a000f60:	e057      	b.n	1a001012 <Chip_UART_SetBaudFDR+0xee>
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f62:	697b      	ldr	r3, [r7, #20]
1a000f64:	461a      	mov	r2, r3
1a000f66:	f04f 0300 	mov.w	r3, #0
1a000f6a:	0915      	lsrs	r5, r2, #4
1a000f6c:	0714      	lsls	r4, r2, #28
1a000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a000f70:	461a      	mov	r2, r3
1a000f72:	f04f 0300 	mov.w	r3, #0
1a000f76:	fb02 f005 	mul.w	r0, r2, r5
1a000f7a:	fb04 f103 	mul.w	r1, r4, r3
1a000f7e:	1846      	adds	r6, r0, r1
1a000f80:	fba4 0102 	umull	r0, r1, r4, r2
1a000f84:	1873      	adds	r3, r6, r1
1a000f86:	4619      	mov	r1, r3
1a000f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000f8c:	4413      	add	r3, r2
1a000f8e:	683a      	ldr	r2, [r7, #0]
1a000f90:	fb02 f303 	mul.w	r3, r2, r3
1a000f94:	461a      	mov	r2, r3
1a000f96:	f04f 0300 	mov.w	r3, #0
1a000f9a:	f001 fd93 	bl	1a002ac4 <__aeabi_uldivmod>
1a000f9e:	4602      	mov	r2, r0
1a000fa0:	460b      	mov	r3, r1
1a000fa2:	e9c7 2302 	strd	r2, r3, [r7, #8]

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a000fa6:	68bb      	ldr	r3, [r7, #8]
1a000fa8:	61fb      	str	r3, [r7, #28]
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a000faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1a000fae:	f04f 0200 	mov.w	r2, #0
1a000fb2:	f04f 0300 	mov.w	r3, #0
1a000fb6:	000a      	movs	r2, r1
1a000fb8:	2300      	movs	r3, #0
1a000fba:	4613      	mov	r3, r2
1a000fbc:	61bb      	str	r3, [r7, #24]

			/* Closer to next div */
			if ((int)diff < 0) {
1a000fbe:	69fb      	ldr	r3, [r7, #28]
1a000fc0:	2b00      	cmp	r3, #0
1a000fc2:	da05      	bge.n	1a000fd0 <Chip_UART_SetBaudFDR+0xac>
				diff = -diff;
1a000fc4:	69fb      	ldr	r3, [r7, #28]
1a000fc6:	425b      	negs	r3, r3
1a000fc8:	61fb      	str	r3, [r7, #28]
				div ++;
1a000fca:	69bb      	ldr	r3, [r7, #24]
1a000fcc:	3301      	adds	r3, #1
1a000fce:	61bb      	str	r3, [r7, #24]
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000fd0:	6a3a      	ldr	r2, [r7, #32]
1a000fd2:	69fb      	ldr	r3, [r7, #28]
1a000fd4:	429a      	cmp	r2, r3
1a000fd6:	d318      	bcc.n	1a00100a <Chip_UART_SetBaudFDR+0xe6>
1a000fd8:	69bb      	ldr	r3, [r7, #24]
1a000fda:	2b00      	cmp	r3, #0
1a000fdc:	d015      	beq.n	1a00100a <Chip_UART_SetBaudFDR+0xe6>
1a000fde:	69bb      	ldr	r3, [r7, #24]
1a000fe0:	0c1b      	lsrs	r3, r3, #16
1a000fe2:	2b00      	cmp	r3, #0
1a000fe4:	d111      	bne.n	1a00100a <Chip_UART_SetBaudFDR+0xe6>
1a000fe6:	69bb      	ldr	r3, [r7, #24]
1a000fe8:	2b02      	cmp	r3, #2
1a000fea:	d802      	bhi.n	1a000ff2 <Chip_UART_SetBaudFDR+0xce>
1a000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000fee:	2b00      	cmp	r3, #0
1a000ff0:	d10b      	bne.n	1a00100a <Chip_UART_SetBaudFDR+0xe6>
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000ff2:	69bb      	ldr	r3, [r7, #24]
1a000ff4:	637b      	str	r3, [r7, #52]	; 0x34
			sd = d;
1a000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
			sm = m;
1a000ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a000ffc:	633b      	str	r3, [r7, #48]	; 0x30
			odiff = diff;
1a000ffe:	69fb      	ldr	r3, [r7, #28]
1a001000:	623b      	str	r3, [r7, #32]

			/* On perfect match, break loop */
			if(!diff) {
1a001002:	69fb      	ldr	r3, [r7, #28]
1a001004:	2b00      	cmp	r3, #0
1a001006:	d009      	beq.n	1a00101c <Chip_UART_SetBaudFDR+0xf8>
1a001008:	e000      	b.n	1a00100c <Chip_UART_SetBaudFDR+0xe8>
				continue;
1a00100a:	bf00      	nop
		for (d = 0; d < m; d++) {
1a00100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00100e:	3301      	adds	r3, #1
1a001010:	627b      	str	r3, [r7, #36]	; 0x24
1a001012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001016:	429a      	cmp	r2, r3
1a001018:	d3a3      	bcc.n	1a000f62 <Chip_UART_SetBaudFDR+0x3e>
1a00101a:	e000      	b.n	1a00101e <Chip_UART_SetBaudFDR+0xfa>
				break;
1a00101c:	bf00      	nop
	for (m = 1; odiff && m < 16; m++) {
1a00101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001020:	3301      	adds	r3, #1
1a001022:	62bb      	str	r3, [r7, #40]	; 0x28
1a001024:	6a3b      	ldr	r3, [r7, #32]
1a001026:	2b00      	cmp	r3, #0
1a001028:	d002      	beq.n	1a001030 <Chip_UART_SetBaudFDR+0x10c>
1a00102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00102c:	2b0f      	cmp	r3, #15
1a00102e:	d995      	bls.n	1a000f5c <Chip_UART_SetBaudFDR+0x38>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001032:	2b00      	cmp	r3, #0
1a001034:	d101      	bne.n	1a00103a <Chip_UART_SetBaudFDR+0x116>
		return 0;
1a001036:	2300      	movs	r3, #0
1a001038:	e024      	b.n	1a001084 <Chip_UART_SetBaudFDR+0x160>
	}

	/* Update UART registers */
	Chip_UART_EnableDivisorAccess(pUART);
1a00103a:	6878      	ldr	r0, [r7, #4]
1a00103c:	f7ff fe8d 	bl	1a000d5a <Chip_UART_EnableDivisorAccess>
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
1a001040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001042:	b2d9      	uxtb	r1, r3
1a001044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001046:	0a1b      	lsrs	r3, r3, #8
1a001048:	b2db      	uxtb	r3, r3
1a00104a:	461a      	mov	r2, r3
1a00104c:	6878      	ldr	r0, [r7, #4]
1a00104e:	f7ff fea4 	bl	1a000d9a <Chip_UART_SetDivisorLatches>
	Chip_UART_DisableDivisorAccess(pUART);
1a001052:	6878      	ldr	r0, [r7, #4]
1a001054:	f7ff fe91 	bl	1a000d7a <Chip_UART_DisableDivisorAccess>

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a00105a:	011b      	lsls	r3, r3, #4
1a00105c:	b2da      	uxtb	r2, r3
1a00105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001060:	f003 030f 	and.w	r3, r3, #15
1a001064:	431a      	orrs	r2, r3
1a001066:	687b      	ldr	r3, [r7, #4]
1a001068:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00106a:	697b      	ldr	r3, [r7, #20]
1a00106c:	091b      	lsrs	r3, r3, #4
1a00106e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a001070:	fb02 f203 	mul.w	r2, r2, r3
1a001074:	6b39      	ldr	r1, [r7, #48]	; 0x30
1a001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001078:	440b      	add	r3, r1
1a00107a:	6b79      	ldr	r1, [r7, #52]	; 0x34
1a00107c:	fb01 f303 	mul.w	r3, r1, r3
1a001080:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a001084:	4618      	mov	r0, r3
1a001086:	373c      	adds	r7, #60	; 0x3c
1a001088:	46bd      	mov	sp, r7
1a00108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00108c:	1a002f58 	.word	0x1a002f58

1a001090 <getFullConvClk>:
 * Private functions
 ****************************************************************************/

/* Get the number of clock for a full conversion */
STATIC INLINE uint8_t getFullConvClk(void)
{
1a001090:	b480      	push	{r7}
1a001092:	af00      	add	r7, sp, #0
	return 11;
1a001094:	230b      	movs	r3, #11
}
1a001096:	4618      	mov	r0, r3
1a001098:	46bd      	mov	sp, r7
1a00109a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00109e:	4770      	bx	lr

1a0010a0 <Chip_ADC_GetClockIndex>:

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
1a0010a0:	b480      	push	{r7}
1a0010a2:	b085      	sub	sp, #20
1a0010a4:	af00      	add	r7, sp, #0
1a0010a6:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0010a8:	687b      	ldr	r3, [r7, #4]
1a0010aa:	4a07      	ldr	r2, [pc, #28]	; (1a0010c8 <Chip_ADC_GetClockIndex+0x28>)
1a0010ac:	4293      	cmp	r3, r2
1a0010ae:	d102      	bne.n	1a0010b6 <Chip_ADC_GetClockIndex+0x16>
		clkADC = CLK_APB3_ADC1;
1a0010b0:	2304      	movs	r3, #4
1a0010b2:	81fb      	strh	r3, [r7, #14]
1a0010b4:	e001      	b.n	1a0010ba <Chip_ADC_GetClockIndex+0x1a>
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0010b6:	2303      	movs	r3, #3
1a0010b8:	81fb      	strh	r3, [r7, #14]
	}

	return clkADC;
1a0010ba:	89fb      	ldrh	r3, [r7, #14]
}
1a0010bc:	4618      	mov	r0, r3
1a0010be:	3714      	adds	r7, #20
1a0010c0:	46bd      	mov	sp, r7
1a0010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0010c6:	4770      	bx	lr
1a0010c8:	400e4000 	.word	0x400e4000

1a0010cc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0010cc:	b580      	push	{r7, lr}
1a0010ce:	b088      	sub	sp, #32
1a0010d0:	af00      	add	r7, sp, #0
1a0010d2:	60f8      	str	r0, [r7, #12]
1a0010d4:	607a      	str	r2, [r7, #4]
1a0010d6:	461a      	mov	r2, r3
1a0010d8:	460b      	mov	r3, r1
1a0010da:	72fb      	strb	r3, [r7, #11]
1a0010dc:	4613      	mov	r3, r2
1a0010de:	72bb      	strb	r3, [r7, #10]
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0010e0:	68f8      	ldr	r0, [r7, #12]
1a0010e2:	f7ff ffdd 	bl	1a0010a0 <Chip_ADC_GetClockIndex>
1a0010e6:	4603      	mov	r3, r0
1a0010e8:	4618      	mov	r0, r3
1a0010ea:	f000 fd5b 	bl	1a001ba4 <Chip_Clock_GetRate>
1a0010ee:	61b8      	str	r0, [r7, #24]
	if (burstMode) {
1a0010f0:	7afb      	ldrb	r3, [r7, #11]
1a0010f2:	2b00      	cmp	r3, #0
1a0010f4:	d005      	beq.n	1a001102 <getClkDiv+0x36>
		fullAdcRate = adcRate * clks;
1a0010f6:	7aba      	ldrb	r2, [r7, #10]
1a0010f8:	687b      	ldr	r3, [r7, #4]
1a0010fa:	fb02 f303 	mul.w	r3, r2, r3
1a0010fe:	61fb      	str	r3, [r7, #28]
1a001100:	e007      	b.n	1a001112 <getClkDiv+0x46>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a001102:	f7ff ffc5 	bl	1a001090 <getFullConvClk>
1a001106:	4603      	mov	r3, r0
1a001108:	461a      	mov	r2, r3
1a00110a:	687b      	ldr	r3, [r7, #4]
1a00110c:	fb02 f303 	mul.w	r3, r2, r3
1a001110:	61fb      	str	r3, [r7, #28]
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001112:	69bb      	ldr	r3, [r7, #24]
1a001114:	005a      	lsls	r2, r3, #1
1a001116:	69fb      	ldr	r3, [r7, #28]
1a001118:	441a      	add	r2, r3
1a00111a:	69fb      	ldr	r3, [r7, #28]
1a00111c:	005b      	lsls	r3, r3, #1
1a00111e:	fbb2 f3f3 	udiv	r3, r2, r3
1a001122:	b2db      	uxtb	r3, r3
1a001124:	3b01      	subs	r3, #1
1a001126:	75fb      	strb	r3, [r7, #23]
	return div;
1a001128:	7dfb      	ldrb	r3, [r7, #23]
}
1a00112a:	4618      	mov	r0, r3
1a00112c:	3720      	adds	r7, #32
1a00112e:	46bd      	mov	sp, r7
1a001130:	bd80      	pop	{r7, pc}
1a001132:	Address 0x000000001a001132 is out of bounds.


1a001134 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001134:	b580      	push	{r7, lr}
1a001136:	b086      	sub	sp, #24
1a001138:	af00      	add	r7, sp, #0
1a00113a:	6078      	str	r0, [r7, #4]
1a00113c:	6039      	str	r1, [r7, #0]
	uint8_t div;
	uint32_t cr = 0;
1a00113e:	2300      	movs	r3, #0
1a001140:	617b      	str	r3, [r7, #20]
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001142:	6878      	ldr	r0, [r7, #4]
1a001144:	f7ff ffac 	bl	1a0010a0 <Chip_ADC_GetClockIndex>
1a001148:	4603      	mov	r3, r0
1a00114a:	4618      	mov	r0, r3
1a00114c:	2301      	movs	r3, #1
1a00114e:	2201      	movs	r2, #1
1a001150:	2101      	movs	r1, #1
1a001152:	f000 fcb9 	bl	1a001ac8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001156:	687b      	ldr	r3, [r7, #4]
1a001158:	2200      	movs	r2, #0
1a00115a:	60da      	str	r2, [r3, #12]

	cr |= ADC_CR_PDN;
1a00115c:	697b      	ldr	r3, [r7, #20]
1a00115e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a001162:	617b      	str	r3, [r7, #20]
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001164:	683b      	ldr	r3, [r7, #0]
1a001166:	4a14      	ldr	r2, [pc, #80]	; (1a0011b8 <Chip_ADC_Init+0x84>)
1a001168:	601a      	str	r2, [r3, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00116a:	683b      	ldr	r3, [r7, #0]
1a00116c:	2200      	movs	r2, #0
1a00116e:	711a      	strb	r2, [r3, #4]
	clk = 11;
1a001170:	230b      	movs	r3, #11
1a001172:	613b      	str	r3, [r7, #16]
	ADCSetup->burstMode = false;
1a001174:	683b      	ldr	r3, [r7, #0]
1a001176:	2200      	movs	r2, #0
1a001178:	715a      	strb	r2, [r3, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00117a:	683b      	ldr	r3, [r7, #0]
1a00117c:	681a      	ldr	r2, [r3, #0]
1a00117e:	693b      	ldr	r3, [r7, #16]
1a001180:	b2db      	uxtb	r3, r3
1a001182:	2100      	movs	r1, #0
1a001184:	6878      	ldr	r0, [r7, #4]
1a001186:	f7ff ffa1 	bl	1a0010cc <getClkDiv>
1a00118a:	4603      	mov	r3, r0
1a00118c:	73fb      	strb	r3, [r7, #15]
	cr |= ADC_CR_CLKDIV(div);
1a00118e:	7bfb      	ldrb	r3, [r7, #15]
1a001190:	021b      	lsls	r3, r3, #8
1a001192:	461a      	mov	r2, r3
1a001194:	697b      	ldr	r3, [r7, #20]
1a001196:	4313      	orrs	r3, r2
1a001198:	617b      	str	r3, [r7, #20]
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00119a:	683b      	ldr	r3, [r7, #0]
1a00119c:	791b      	ldrb	r3, [r3, #4]
1a00119e:	045b      	lsls	r3, r3, #17
1a0011a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0011a4:	697a      	ldr	r2, [r7, #20]
1a0011a6:	4313      	orrs	r3, r2
1a0011a8:	617b      	str	r3, [r7, #20]
	pADC->CR = cr;
1a0011aa:	687b      	ldr	r3, [r7, #4]
1a0011ac:	697a      	ldr	r2, [r7, #20]
1a0011ae:	601a      	str	r2, [r3, #0]
}
1a0011b0:	bf00      	nop
1a0011b2:	3718      	adds	r7, #24
1a0011b4:	46bd      	mov	sp, r7
1a0011b6:	bd80      	pop	{r7, pc}
1a0011b8:	00061a80 	.word	0x00061a80

1a0011bc <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0011bc:	b580      	push	{r7, lr}
1a0011be:	b086      	sub	sp, #24
1a0011c0:	af00      	add	r7, sp, #0
1a0011c2:	60f8      	str	r0, [r7, #12]
1a0011c4:	60b9      	str	r1, [r7, #8]
1a0011c6:	607a      	str	r2, [r7, #4]
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0011c8:	68fb      	ldr	r3, [r7, #12]
1a0011ca:	681b      	ldr	r3, [r3, #0]
1a0011cc:	f423 236f 	bic.w	r3, r3, #978944	; 0xef000
1a0011d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
1a0011d4:	617b      	str	r3, [r7, #20]
	ADCSetup->adcRate = rate;
1a0011d6:	68bb      	ldr	r3, [r7, #8]
1a0011d8:	687a      	ldr	r2, [r7, #4]
1a0011da:	601a      	str	r2, [r3, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0011dc:	68bb      	ldr	r3, [r7, #8]
1a0011de:	7959      	ldrb	r1, [r3, #5]
1a0011e0:	68bb      	ldr	r3, [r7, #8]
1a0011e2:	791b      	ldrb	r3, [r3, #4]
1a0011e4:	f1c3 030b 	rsb	r3, r3, #11
1a0011e8:	b2db      	uxtb	r3, r3
1a0011ea:	687a      	ldr	r2, [r7, #4]
1a0011ec:	68f8      	ldr	r0, [r7, #12]
1a0011ee:	f7ff ff6d 	bl	1a0010cc <getClkDiv>
1a0011f2:	4603      	mov	r3, r0
1a0011f4:	74fb      	strb	r3, [r7, #19]
	cr |= ADC_CR_CLKDIV(div);
1a0011f6:	7cfb      	ldrb	r3, [r7, #19]
1a0011f8:	021b      	lsls	r3, r3, #8
1a0011fa:	461a      	mov	r2, r3
1a0011fc:	697b      	ldr	r3, [r7, #20]
1a0011fe:	4313      	orrs	r3, r2
1a001200:	617b      	str	r3, [r7, #20]
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001202:	68bb      	ldr	r3, [r7, #8]
1a001204:	791b      	ldrb	r3, [r3, #4]
1a001206:	045b      	lsls	r3, r3, #17
1a001208:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a00120c:	697a      	ldr	r2, [r7, #20]
1a00120e:	4313      	orrs	r3, r2
1a001210:	617b      	str	r3, [r7, #20]
	pADC->CR = cr;
1a001212:	68fb      	ldr	r3, [r7, #12]
1a001214:	697a      	ldr	r2, [r7, #20]
1a001216:	601a      	str	r2, [r3, #0]
}
1a001218:	bf00      	nop
1a00121a:	3718      	adds	r7, #24
1a00121c:	46bd      	mov	sp, r7
1a00121e:	bd80      	pop	{r7, pc}

1a001220 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001220:	b580      	push	{r7, lr}
1a001222:	b084      	sub	sp, #16
1a001224:	af00      	add	r7, sp, #0
1a001226:	60f8      	str	r0, [r7, #12]
1a001228:	60b9      	str	r1, [r7, #8]
1a00122a:	4613      	mov	r3, r2
1a00122c:	71fb      	strb	r3, [r7, #7]
	ADCSetup->bitsAccuracy = resolution;
1a00122e:	68bb      	ldr	r3, [r7, #8]
1a001230:	79fa      	ldrb	r2, [r7, #7]
1a001232:	711a      	strb	r2, [r3, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001234:	68bb      	ldr	r3, [r7, #8]
1a001236:	681b      	ldr	r3, [r3, #0]
1a001238:	461a      	mov	r2, r3
1a00123a:	68b9      	ldr	r1, [r7, #8]
1a00123c:	68f8      	ldr	r0, [r7, #12]
1a00123e:	f7ff ffbd 	bl	1a0011bc <Chip_ADC_SetSampleRate>
}
1a001242:	bf00      	nop
1a001244:	3710      	adds	r7, #16
1a001246:	46bd      	mov	sp, r7
1a001248:	bd80      	pop	{r7, pc}
1a00124a:	Address 0x000000001a00124a is out of bounds.


1a00124c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00124c:	b580      	push	{r7, lr}
1a00124e:	af00      	add	r7, sp, #0
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001250:	2069      	movs	r0, #105	; 0x69
1a001252:	f000 fca7 	bl	1a001ba4 <Chip_Clock_GetRate>
1a001256:	4602      	mov	r2, r0
1a001258:	4b01      	ldr	r3, [pc, #4]	; (1a001260 <SystemCoreClockUpdate+0x14>)
1a00125a:	601a      	str	r2, [r3, #0]
}
1a00125c:	bf00      	nop
1a00125e:	bd80      	pop	{r7, pc}
1a001260:	10000084 	.word	0x10000084

1a001264 <ABS>:

/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
1a001264:	b480      	push	{r7}
1a001266:	b083      	sub	sp, #12
1a001268:	af00      	add	r7, sp, #0
1a00126a:	6078      	str	r0, [r7, #4]
	if (val < 0)
1a00126c:	687b      	ldr	r3, [r7, #4]
1a00126e:	2b00      	cmp	r3, #0
1a001270:	da02      	bge.n	1a001278 <ABS+0x14>
		return -val;
1a001272:	687b      	ldr	r3, [r7, #4]
1a001274:	425b      	negs	r3, r3
1a001276:	e000      	b.n	1a00127a <ABS+0x16>
	return val;
1a001278:	687b      	ldr	r3, [r7, #4]
}
1a00127a:	4618      	mov	r0, r3
1a00127c:	370c      	adds	r7, #12
1a00127e:	46bd      	mov	sp, r7
1a001280:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001284:	4770      	bx	lr
1a001286:	Address 0x000000001a001286 is out of bounds.


1a001288 <pll_calc_divs>:

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001288:	b580      	push	{r7, lr}
1a00128a:	b088      	sub	sp, #32
1a00128c:	af00      	add	r7, sp, #0
1a00128e:	6078      	str	r0, [r7, #4]
1a001290:	6039      	str	r1, [r7, #0]

	uint32_t prev = freq;
1a001292:	687b      	ldr	r3, [r7, #4]
1a001294:	61fb      	str	r3, [r7, #28]
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001296:	683b      	ldr	r3, [r7, #0]
1a001298:	681b      	ldr	r3, [r3, #0]
1a00129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a00129e:	2b00      	cmp	r3, #0
1a0012a0:	d005      	beq.n	1a0012ae <pll_calc_divs+0x26>
		ppll->ctrl &= ~(1 << 6);
1a0012a2:	683b      	ldr	r3, [r7, #0]
1a0012a4:	681b      	ldr	r3, [r3, #0]
1a0012a6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
1a0012aa:	683b      	ldr	r3, [r7, #0]
1a0012ac:	601a      	str	r2, [r3, #0]
	}
	for (n = 1; n <= 4; n++) {
1a0012ae:	2301      	movs	r3, #1
1a0012b0:	61bb      	str	r3, [r7, #24]
1a0012b2:	e06f      	b.n	1a001394 <pll_calc_divs+0x10c>
		for (p = 0; p < 4; p ++) {
1a0012b4:	2300      	movs	r3, #0
1a0012b6:	613b      	str	r3, [r7, #16]
1a0012b8:	e066      	b.n	1a001388 <pll_calc_divs+0x100>
			for (m = 1; m <= 256; m++) {
1a0012ba:	2301      	movs	r3, #1
1a0012bc:	617b      	str	r3, [r7, #20]
1a0012be:	e05a      	b.n	1a001376 <pll_calc_divs+0xee>
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a0012c0:	683b      	ldr	r3, [r7, #0]
1a0012c2:	681b      	ldr	r3, [r3, #0]
1a0012c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0012c8:	2b00      	cmp	r3, #0
1a0012ca:	d00e      	beq.n	1a0012ea <pll_calc_divs+0x62>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0012cc:	693b      	ldr	r3, [r7, #16]
1a0012ce:	3301      	adds	r3, #1
1a0012d0:	697a      	ldr	r2, [r7, #20]
1a0012d2:	fa02 f303 	lsl.w	r3, r2, r3
1a0012d6:	461a      	mov	r2, r3
1a0012d8:	683b      	ldr	r3, [r7, #0]
1a0012da:	695b      	ldr	r3, [r3, #20]
1a0012dc:	fb03 f202 	mul.w	r2, r3, r2
1a0012e0:	69bb      	ldr	r3, [r7, #24]
1a0012e2:	fbb2 f3f3 	udiv	r3, r2, r3
1a0012e6:	60fb      	str	r3, [r7, #12]
1a0012e8:	e008      	b.n	1a0012fc <pll_calc_divs+0x74>
				} else {
					fcco = (m * ppll->fin) / n;
1a0012ea:	683b      	ldr	r3, [r7, #0]
1a0012ec:	695b      	ldr	r3, [r3, #20]
1a0012ee:	697a      	ldr	r2, [r7, #20]
1a0012f0:	fb02 f203 	mul.w	r2, r2, r3
1a0012f4:	69bb      	ldr	r3, [r7, #24]
1a0012f6:	fbb2 f3f3 	udiv	r3, r2, r3
1a0012fa:	60fb      	str	r3, [r7, #12]
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0012fc:	68fb      	ldr	r3, [r7, #12]
1a0012fe:	4a29      	ldr	r2, [pc, #164]	; (1a0013a4 <pll_calc_divs+0x11c>)
1a001300:	4293      	cmp	r3, r2
1a001302:	d934      	bls.n	1a00136e <pll_calc_divs+0xe6>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001304:	68fb      	ldr	r3, [r7, #12]
1a001306:	4a28      	ldr	r2, [pc, #160]	; (1a0013a8 <pll_calc_divs+0x120>)
1a001308:	4293      	cmp	r3, r2
1a00130a:	d839      	bhi.n	1a001380 <pll_calc_divs+0xf8>
				if (ppll->ctrl & (1 << 7)) {
1a00130c:	683b      	ldr	r3, [r7, #0]
1a00130e:	681b      	ldr	r3, [r3, #0]
1a001310:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a001314:	2b00      	cmp	r3, #0
1a001316:	d002      	beq.n	1a00131e <pll_calc_divs+0x96>
					fout = fcco;
1a001318:	68fb      	ldr	r3, [r7, #12]
1a00131a:	60bb      	str	r3, [r7, #8]
1a00131c:	e005      	b.n	1a00132a <pll_calc_divs+0xa2>
				} else {
					fout = fcco >> (p + 1);
1a00131e:	693b      	ldr	r3, [r7, #16]
1a001320:	3301      	adds	r3, #1
1a001322:	68fa      	ldr	r2, [r7, #12]
1a001324:	fa22 f303 	lsr.w	r3, r2, r3
1a001328:	60bb      	str	r3, [r7, #8]
				}

				if (ABS(freq - fout) < prev) {
1a00132a:	687a      	ldr	r2, [r7, #4]
1a00132c:	68bb      	ldr	r3, [r7, #8]
1a00132e:	1ad3      	subs	r3, r2, r3
1a001330:	4618      	mov	r0, r3
1a001332:	f7ff ff97 	bl	1a001264 <ABS>
1a001336:	4602      	mov	r2, r0
1a001338:	69fb      	ldr	r3, [r7, #28]
1a00133a:	4293      	cmp	r3, r2
1a00133c:	d918      	bls.n	1a001370 <pll_calc_divs+0xe8>
					ppll->nsel = n;
1a00133e:	683b      	ldr	r3, [r7, #0]
1a001340:	69ba      	ldr	r2, [r7, #24]
1a001342:	609a      	str	r2, [r3, #8]
					ppll->psel = p + 1;
1a001344:	693b      	ldr	r3, [r7, #16]
1a001346:	1c5a      	adds	r2, r3, #1
1a001348:	683b      	ldr	r3, [r7, #0]
1a00134a:	60da      	str	r2, [r3, #12]
					ppll->msel = m;
1a00134c:	683b      	ldr	r3, [r7, #0]
1a00134e:	697a      	ldr	r2, [r7, #20]
1a001350:	611a      	str	r2, [r3, #16]
					ppll->fout = fout;
1a001352:	683b      	ldr	r3, [r7, #0]
1a001354:	68ba      	ldr	r2, [r7, #8]
1a001356:	619a      	str	r2, [r3, #24]
					ppll->fcco = fcco;
1a001358:	683b      	ldr	r3, [r7, #0]
1a00135a:	68fa      	ldr	r2, [r7, #12]
1a00135c:	61da      	str	r2, [r3, #28]
					prev = ABS(freq - fout);
1a00135e:	687a      	ldr	r2, [r7, #4]
1a001360:	68bb      	ldr	r3, [r7, #8]
1a001362:	1ad3      	subs	r3, r2, r3
1a001364:	4618      	mov	r0, r3
1a001366:	f7ff ff7d 	bl	1a001264 <ABS>
1a00136a:	61f8      	str	r0, [r7, #28]
1a00136c:	e000      	b.n	1a001370 <pll_calc_divs+0xe8>
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00136e:	bf00      	nop
			for (m = 1; m <= 256; m++) {
1a001370:	697b      	ldr	r3, [r7, #20]
1a001372:	3301      	adds	r3, #1
1a001374:	617b      	str	r3, [r7, #20]
1a001376:	697b      	ldr	r3, [r7, #20]
1a001378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1a00137c:	dda0      	ble.n	1a0012c0 <pll_calc_divs+0x38>
1a00137e:	e000      	b.n	1a001382 <pll_calc_divs+0xfa>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001380:	bf00      	nop
		for (p = 0; p < 4; p ++) {
1a001382:	693b      	ldr	r3, [r7, #16]
1a001384:	3301      	adds	r3, #1
1a001386:	613b      	str	r3, [r7, #16]
1a001388:	693b      	ldr	r3, [r7, #16]
1a00138a:	2b03      	cmp	r3, #3
1a00138c:	dd95      	ble.n	1a0012ba <pll_calc_divs+0x32>
	for (n = 1; n <= 4; n++) {
1a00138e:	69bb      	ldr	r3, [r7, #24]
1a001390:	3301      	adds	r3, #1
1a001392:	61bb      	str	r3, [r7, #24]
1a001394:	69bb      	ldr	r3, [r7, #24]
1a001396:	2b04      	cmp	r3, #4
1a001398:	dd8c      	ble.n	1a0012b4 <pll_calc_divs+0x2c>
				}
			}
		}
	}
}
1a00139a:	bf00      	nop
1a00139c:	3720      	adds	r7, #32
1a00139e:	46bd      	mov	sp, r7
1a0013a0:	bd80      	pop	{r7, pc}
1a0013a2:	bf00      	nop
1a0013a4:	094c5eff 	.word	0x094c5eff
1a0013a8:	1312d000 	.word	0x1312d000

1a0013ac <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0013ac:	b5b0      	push	{r4, r5, r7, lr}
1a0013ae:	b09e      	sub	sp, #120	; 0x78
1a0013b0:	af00      	add	r7, sp, #0
1a0013b2:	6078      	str	r0, [r7, #4]
1a0013b4:	6039      	str	r1, [r7, #0]
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0013b6:	f107 030c 	add.w	r3, r7, #12
1a0013ba:	2260      	movs	r2, #96	; 0x60
1a0013bc:	2100      	movs	r1, #0
1a0013be:	4618      	mov	r0, r3
1a0013c0:	f001 fd26 	bl	1a002e10 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0013c4:	68fb      	ldr	r3, [r7, #12]
1a0013c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0013ca:	60fb      	str	r3, [r7, #12]
	pll[0].fin = ppll->fin;
1a0013cc:	683b      	ldr	r3, [r7, #0]
1a0013ce:	695b      	ldr	r3, [r3, #20]
1a0013d0:	623b      	str	r3, [r7, #32]
	pll[0].srcin = ppll->srcin;
1a0013d2:	683b      	ldr	r3, [r7, #0]
1a0013d4:	791b      	ldrb	r3, [r3, #4]
1a0013d6:	743b      	strb	r3, [r7, #16]
	pll_calc_divs(freq, &pll[0]);
1a0013d8:	f107 030c 	add.w	r3, r7, #12
1a0013dc:	4619      	mov	r1, r3
1a0013de:	6878      	ldr	r0, [r7, #4]
1a0013e0:	f7ff ff52 	bl	1a001288 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0013e6:	687a      	ldr	r2, [r7, #4]
1a0013e8:	429a      	cmp	r2, r3
1a0013ea:	d10a      	bne.n	1a001402 <pll_get_frac+0x56>
		*ppll = pll[0];
1a0013ec:	683b      	ldr	r3, [r7, #0]
1a0013ee:	461d      	mov	r5, r3
1a0013f0:	f107 040c 	add.w	r4, r7, #12
1a0013f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0013f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a0013f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a0013fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		return ;
1a001400:	e08e      	b.n	1a001520 <pll_get_frac+0x174>
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a001404:	687a      	ldr	r2, [r7, #4]
1a001406:	1ad3      	subs	r3, r2, r3
1a001408:	4618      	mov	r0, r3
1a00140a:	f7ff ff2b 	bl	1a001264 <ABS>
1a00140e:	4603      	mov	r3, r0
1a001410:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a001414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001418:	64fb      	str	r3, [r7, #76]	; 0x4c
	pll[2].fin = ppll->fin;
1a00141a:	683b      	ldr	r3, [r7, #0]
1a00141c:	695b      	ldr	r3, [r3, #20]
1a00141e:	663b      	str	r3, [r7, #96]	; 0x60
	pll[2].srcin = ppll->srcin;
1a001420:	683b      	ldr	r3, [r7, #0]
1a001422:	791b      	ldrb	r3, [r3, #4]
1a001424:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	pll_calc_divs(freq, &pll[2]);
1a001428:	f107 030c 	add.w	r3, r7, #12
1a00142c:	3340      	adds	r3, #64	; 0x40
1a00142e:	4619      	mov	r1, r3
1a001430:	6878      	ldr	r0, [r7, #4]
1a001432:	f7ff ff29 	bl	1a001288 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1a001438:	687a      	ldr	r2, [r7, #4]
1a00143a:	429a      	cmp	r2, r3
1a00143c:	d10a      	bne.n	1a001454 <pll_get_frac+0xa8>
		*ppll = pll[2];
1a00143e:	683b      	ldr	r3, [r7, #0]
1a001440:	461d      	mov	r5, r3
1a001442:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a001446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a001448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a00144a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a00144e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		return ;
1a001452:	e065      	b.n	1a001520 <pll_get_frac+0x174>
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1a001456:	687a      	ldr	r2, [r7, #4]
1a001458:	1ad3      	subs	r3, r2, r3
1a00145a:	4618      	mov	r0, r3
1a00145c:	f7ff ff02 	bl	1a001264 <ABS>
1a001460:	4603      	mov	r3, r0
1a001462:	677b      	str	r3, [r7, #116]	; 0x74
	
	if (freq <= 110000000) {
1a001464:	687b      	ldr	r3, [r7, #4]
1a001466:	4a30      	ldr	r2, [pc, #192]	; (1a001528 <pll_get_frac+0x17c>)
1a001468:	4293      	cmp	r3, r2
1a00146a:	d81a      	bhi.n	1a0014a2 <pll_get_frac+0xf6>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a00146c:	2340      	movs	r3, #64	; 0x40
1a00146e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pll[1].fin = ppll->fin;
1a001470:	683b      	ldr	r3, [r7, #0]
1a001472:	695b      	ldr	r3, [r3, #20]
1a001474:	643b      	str	r3, [r7, #64]	; 0x40
		pll_calc_divs(freq, &pll[1]);
1a001476:	f107 030c 	add.w	r3, r7, #12
1a00147a:	3320      	adds	r3, #32
1a00147c:	4619      	mov	r1, r3
1a00147e:	6878      	ldr	r0, [r7, #4]
1a001480:	f7ff ff02 	bl	1a001288 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a001486:	687a      	ldr	r2, [r7, #4]
1a001488:	429a      	cmp	r2, r3
1a00148a:	d10a      	bne.n	1a0014a2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00148c:	683b      	ldr	r3, [r7, #0]
1a00148e:	461d      	mov	r5, r3
1a001490:	f107 042c 	add.w	r4, r7, #44	; 0x2c
1a001494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a001496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a001498:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a00149c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			return ;
1a0014a0:	e03e      	b.n	1a001520 <pll_get_frac+0x174>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0014a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a0014a4:	687a      	ldr	r2, [r7, #4]
1a0014a6:	1ad3      	subs	r3, r2, r3
1a0014a8:	4618      	mov	r0, r3
1a0014aa:	f7ff fedb 	bl	1a001264 <ABS>
1a0014ae:	4603      	mov	r3, r0
1a0014b0:	673b      	str	r3, [r7, #112]	; 0x70

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0014b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1a0014b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1a0014b6:	429a      	cmp	r2, r3
1a0014b8:	dc19      	bgt.n	1a0014ee <pll_get_frac+0x142>
		if (diff[0] <= diff[2]) {
1a0014ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1a0014bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1a0014be:	429a      	cmp	r2, r3
1a0014c0:	dc0a      	bgt.n	1a0014d8 <pll_get_frac+0x12c>
			*ppll = pll[0];
1a0014c2:	683b      	ldr	r3, [r7, #0]
1a0014c4:	461d      	mov	r5, r3
1a0014c6:	f107 040c 	add.w	r4, r7, #12
1a0014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a0014ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a0014d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a0014d6:	e023      	b.n	1a001520 <pll_get_frac+0x174>
		} else {
			*ppll = pll[2];
1a0014d8:	683b      	ldr	r3, [r7, #0]
1a0014da:	461d      	mov	r5, r3
1a0014dc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a0014e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0014e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a0014e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a0014e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a0014ec:	e018      	b.n	1a001520 <pll_get_frac+0x174>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a0014ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1a0014f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1a0014f2:	429a      	cmp	r2, r3
1a0014f4:	dc0a      	bgt.n	1a00150c <pll_get_frac+0x160>
			*ppll = pll[1];
1a0014f6:	683b      	ldr	r3, [r7, #0]
1a0014f8:	461d      	mov	r5, r3
1a0014fa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
1a0014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a001502:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a001506:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a00150a:	e009      	b.n	1a001520 <pll_get_frac+0x174>
		} else {
			*ppll = pll[2];
1a00150c:	683b      	ldr	r3, [r7, #0]
1a00150e:	461d      	mov	r5, r3
1a001510:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a001514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a001516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a001518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a00151c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		}
	}
}
1a001520:	3778      	adds	r7, #120	; 0x78
1a001522:	46bd      	mov	sp, r7
1a001524:	bdb0      	pop	{r4, r5, r7, pc}
1a001526:	bf00      	nop
1a001528:	068e7780 	.word	0x068e7780

1a00152c <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a00152c:	b580      	push	{r7, lr}
1a00152e:	b084      	sub	sp, #16
1a001530:	af00      	add	r7, sp, #0
1a001532:	4603      	mov	r3, r0
1a001534:	460a      	mov	r2, r1
1a001536:	71fb      	strb	r3, [r7, #7]
1a001538:	4613      	mov	r3, r2
1a00153a:	71bb      	strb	r3, [r7, #6]
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a00153c:	79bb      	ldrb	r3, [r7, #6]
1a00153e:	4618      	mov	r0, r3
1a001540:	f000 f960 	bl	1a001804 <Chip_Clock_GetDividerSource>
1a001544:	4603      	mov	r3, r0
1a001546:	73fb      	strb	r3, [r7, #15]
	div = Chip_Clock_GetDividerDivisor(divider);
1a001548:	79bb      	ldrb	r3, [r7, #6]
1a00154a:	4618      	mov	r0, r3
1a00154c:	f000 f97a 	bl	1a001844 <Chip_Clock_GetDividerDivisor>
1a001550:	60b8      	str	r0, [r7, #8]
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001552:	7bfb      	ldrb	r3, [r7, #15]
1a001554:	4618      	mov	r0, r3
1a001556:	f000 f991 	bl	1a00187c <Chip_Clock_GetClockInputHz>
1a00155a:	4602      	mov	r2, r0
1a00155c:	68bb      	ldr	r3, [r7, #8]
1a00155e:	3301      	adds	r3, #1
1a001560:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a001564:	4618      	mov	r0, r3
1a001566:	3710      	adds	r7, #16
1a001568:	46bd      	mov	sp, r7
1a00156a:	bd80      	pop	{r7, pc}

1a00156c <Chip_Clock_FindBaseClock>:

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00156c:	b480      	push	{r7}
1a00156e:	b085      	sub	sp, #20
1a001570:	af00      	add	r7, sp, #0
1a001572:	4603      	mov	r3, r0
1a001574:	80fb      	strh	r3, [r7, #6]
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001576:	231c      	movs	r3, #28
1a001578:	73fb      	strb	r3, [r7, #15]
	int i = 0;
1a00157a:	2300      	movs	r3, #0
1a00157c:	60bb      	str	r3, [r7, #8]

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00157e:	e024      	b.n	1a0015ca <Chip_Clock_FindBaseClock+0x5e>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001580:	491d      	ldr	r1, [pc, #116]	; (1a0015f8 <Chip_Clock_FindBaseClock+0x8c>)
1a001582:	68ba      	ldr	r2, [r7, #8]
1a001584:	4613      	mov	r3, r2
1a001586:	005b      	lsls	r3, r3, #1
1a001588:	4413      	add	r3, r2
1a00158a:	005b      	lsls	r3, r3, #1
1a00158c:	440b      	add	r3, r1
1a00158e:	881b      	ldrh	r3, [r3, #0]
1a001590:	88fa      	ldrh	r2, [r7, #6]
1a001592:	429a      	cmp	r2, r3
1a001594:	d316      	bcc.n	1a0015c4 <Chip_Clock_FindBaseClock+0x58>
1a001596:	4918      	ldr	r1, [pc, #96]	; (1a0015f8 <Chip_Clock_FindBaseClock+0x8c>)
1a001598:	68ba      	ldr	r2, [r7, #8]
1a00159a:	4613      	mov	r3, r2
1a00159c:	005b      	lsls	r3, r3, #1
1a00159e:	4413      	add	r3, r2
1a0015a0:	005b      	lsls	r3, r3, #1
1a0015a2:	440b      	add	r3, r1
1a0015a4:	3302      	adds	r3, #2
1a0015a6:	881b      	ldrh	r3, [r3, #0]
1a0015a8:	88fa      	ldrh	r2, [r7, #6]
1a0015aa:	429a      	cmp	r2, r3
1a0015ac:	d80a      	bhi.n	1a0015c4 <Chip_Clock_FindBaseClock+0x58>
			baseclk = periph_to_base[i].clkbase;
1a0015ae:	4912      	ldr	r1, [pc, #72]	; (1a0015f8 <Chip_Clock_FindBaseClock+0x8c>)
1a0015b0:	68ba      	ldr	r2, [r7, #8]
1a0015b2:	4613      	mov	r3, r2
1a0015b4:	005b      	lsls	r3, r3, #1
1a0015b6:	4413      	add	r3, r2
1a0015b8:	005b      	lsls	r3, r3, #1
1a0015ba:	440b      	add	r3, r1
1a0015bc:	3304      	adds	r3, #4
1a0015be:	781b      	ldrb	r3, [r3, #0]
1a0015c0:	73fb      	strb	r3, [r7, #15]
1a0015c2:	e002      	b.n	1a0015ca <Chip_Clock_FindBaseClock+0x5e>
		}
		else {
			i++;
1a0015c4:	68bb      	ldr	r3, [r7, #8]
1a0015c6:	3301      	adds	r3, #1
1a0015c8:	60bb      	str	r3, [r7, #8]
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0015ca:	7bfb      	ldrb	r3, [r7, #15]
1a0015cc:	2b1c      	cmp	r3, #28
1a0015ce:	d10b      	bne.n	1a0015e8 <Chip_Clock_FindBaseClock+0x7c>
1a0015d0:	4909      	ldr	r1, [pc, #36]	; (1a0015f8 <Chip_Clock_FindBaseClock+0x8c>)
1a0015d2:	68ba      	ldr	r2, [r7, #8]
1a0015d4:	4613      	mov	r3, r2
1a0015d6:	005b      	lsls	r3, r3, #1
1a0015d8:	4413      	add	r3, r2
1a0015da:	005b      	lsls	r3, r3, #1
1a0015dc:	440b      	add	r3, r1
1a0015de:	3304      	adds	r3, #4
1a0015e0:	781b      	ldrb	r3, [r3, #0]
1a0015e2:	7bfa      	ldrb	r2, [r7, #15]
1a0015e4:	429a      	cmp	r2, r3
1a0015e6:	d1cb      	bne.n	1a001580 <Chip_Clock_FindBaseClock+0x14>
		}
	}

	return baseclk;
1a0015e8:	7bfb      	ldrb	r3, [r7, #15]
}
1a0015ea:	4618      	mov	r0, r3
1a0015ec:	3714      	adds	r7, #20
1a0015ee:	46bd      	mov	sp, r7
1a0015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0015f4:	4770      	bx	lr
1a0015f6:	bf00      	nop
1a0015f8:	1a002f60 	.word	0x1a002f60

1a0015fc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0015fc:	b480      	push	{r7}
1a0015fe:	b083      	sub	sp, #12
1a001600:	af00      	add	r7, sp, #0
	volatile uint32_t delay = 1000;
1a001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001606:	603b      	str	r3, [r7, #0]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001608:	4b15      	ldr	r3, [pc, #84]	; (1a001660 <Chip_Clock_EnableCrystal+0x64>)
1a00160a:	699b      	ldr	r3, [r3, #24]
1a00160c:	607b      	str	r3, [r7, #4]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00160e:	687b      	ldr	r3, [r7, #4]
1a001610:	f023 0302 	bic.w	r3, r3, #2
1a001614:	607b      	str	r3, [r7, #4]
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001616:	4b12      	ldr	r3, [pc, #72]	; (1a001660 <Chip_Clock_EnableCrystal+0x64>)
1a001618:	699b      	ldr	r3, [r3, #24]
1a00161a:	687a      	ldr	r2, [r7, #4]
1a00161c:	429a      	cmp	r2, r3
1a00161e:	d002      	beq.n	1a001626 <Chip_Clock_EnableCrystal+0x2a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001620:	4a0f      	ldr	r2, [pc, #60]	; (1a001660 <Chip_Clock_EnableCrystal+0x64>)
1a001622:	687b      	ldr	r3, [r7, #4]
1a001624:	6193      	str	r3, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001626:	687b      	ldr	r3, [r7, #4]
1a001628:	f023 0301 	bic.w	r3, r3, #1
1a00162c:	607b      	str	r3, [r7, #4]
	if (OscRateIn >= 20000000) {
1a00162e:	4b0d      	ldr	r3, [pc, #52]	; (1a001664 <Chip_Clock_EnableCrystal+0x68>)
1a001630:	681b      	ldr	r3, [r3, #0]
1a001632:	4a0d      	ldr	r2, [pc, #52]	; (1a001668 <Chip_Clock_EnableCrystal+0x6c>)
1a001634:	4293      	cmp	r3, r2
1a001636:	d903      	bls.n	1a001640 <Chip_Clock_EnableCrystal+0x44>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001638:	687b      	ldr	r3, [r7, #4]
1a00163a:	f043 0304 	orr.w	r3, r3, #4
1a00163e:	607b      	str	r3, [r7, #4]

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001640:	4a07      	ldr	r2, [pc, #28]	; (1a001660 <Chip_Clock_EnableCrystal+0x64>)
1a001642:	687b      	ldr	r3, [r7, #4]
1a001644:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001646:	bf00      	nop
1a001648:	683b      	ldr	r3, [r7, #0]
1a00164a:	1e5a      	subs	r2, r3, #1
1a00164c:	603a      	str	r2, [r7, #0]
1a00164e:	2b00      	cmp	r3, #0
1a001650:	d1fa      	bne.n	1a001648 <Chip_Clock_EnableCrystal+0x4c>
}
1a001652:	bf00      	nop
1a001654:	370c      	adds	r7, #12
1a001656:	46bd      	mov	sp, r7
1a001658:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00165c:	4770      	bx	lr
1a00165e:	bf00      	nop
1a001660:	40050000 	.word	0x40050000
1a001664:	1a002eac 	.word	0x1a002eac
1a001668:	01312cff 	.word	0x01312cff

1a00166c <Chip_Clock_CalcMainPLLValue>:

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00166c:	b580      	push	{r7, lr}
1a00166e:	b082      	sub	sp, #8
1a001670:	af00      	add	r7, sp, #0
1a001672:	6078      	str	r0, [r7, #4]
1a001674:	6039      	str	r1, [r7, #0]
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001676:	683b      	ldr	r3, [r7, #0]
1a001678:	791b      	ldrb	r3, [r3, #4]
1a00167a:	4618      	mov	r0, r3
1a00167c:	f000 f8fe 	bl	1a00187c <Chip_Clock_GetClockInputHz>
1a001680:	4602      	mov	r2, r0
1a001682:	683b      	ldr	r3, [r7, #0]
1a001684:	615a      	str	r2, [r3, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001686:	687b      	ldr	r3, [r7, #4]
1a001688:	4a2b      	ldr	r2, [pc, #172]	; (1a001738 <Chip_Clock_CalcMainPLLValue+0xcc>)
1a00168a:	4293      	cmp	r3, r2
1a00168c:	d807      	bhi.n	1a00169e <Chip_Clock_CalcMainPLLValue+0x32>
1a00168e:	687b      	ldr	r3, [r7, #4]
1a001690:	4a2a      	ldr	r2, [pc, #168]	; (1a00173c <Chip_Clock_CalcMainPLLValue+0xd0>)
1a001692:	4293      	cmp	r3, r2
1a001694:	d903      	bls.n	1a00169e <Chip_Clock_CalcMainPLLValue+0x32>
1a001696:	683b      	ldr	r3, [r7, #0]
1a001698:	695b      	ldr	r3, [r3, #20]
1a00169a:	2b00      	cmp	r3, #0
1a00169c:	d102      	bne.n	1a0016a4 <Chip_Clock_CalcMainPLLValue+0x38>
		return -1;
1a00169e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0016a2:	e044      	b.n	1a00172e <Chip_Clock_CalcMainPLLValue+0xc2>
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0016a4:	683b      	ldr	r3, [r7, #0]
1a0016a6:	2280      	movs	r2, #128	; 0x80
1a0016a8:	601a      	str	r2, [r3, #0]
	ppll->nsel = 0;
1a0016aa:	683b      	ldr	r3, [r7, #0]
1a0016ac:	2200      	movs	r2, #0
1a0016ae:	609a      	str	r2, [r3, #8]
	ppll->psel = 0;
1a0016b0:	683b      	ldr	r3, [r7, #0]
1a0016b2:	2200      	movs	r2, #0
1a0016b4:	60da      	str	r2, [r3, #12]
	ppll->msel = freq / ppll->fin;
1a0016b6:	683b      	ldr	r3, [r7, #0]
1a0016b8:	695b      	ldr	r3, [r3, #20]
1a0016ba:	687a      	ldr	r2, [r7, #4]
1a0016bc:	fbb2 f3f3 	udiv	r3, r2, r3
1a0016c0:	461a      	mov	r2, r3
1a0016c2:	683b      	ldr	r3, [r7, #0]
1a0016c4:	611a      	str	r2, [r3, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0016c6:	687b      	ldr	r3, [r7, #4]
1a0016c8:	4a1d      	ldr	r2, [pc, #116]	; (1a001740 <Chip_Clock_CalcMainPLLValue+0xd4>)
1a0016ca:	4293      	cmp	r3, r2
1a0016cc:	d909      	bls.n	1a0016e2 <Chip_Clock_CalcMainPLLValue+0x76>
1a0016ce:	683b      	ldr	r3, [r7, #0]
1a0016d0:	691b      	ldr	r3, [r3, #16]
1a0016d2:	461a      	mov	r2, r3
1a0016d4:	683b      	ldr	r3, [r7, #0]
1a0016d6:	695b      	ldr	r3, [r3, #20]
1a0016d8:	fb03 f302 	mul.w	r3, r3, r2
1a0016dc:	687a      	ldr	r2, [r7, #4]
1a0016de:	429a      	cmp	r2, r3
1a0016e0:	d00f      	beq.n	1a001702 <Chip_Clock_CalcMainPLLValue+0x96>
		pll_get_frac(freq, ppll);
1a0016e2:	6839      	ldr	r1, [r7, #0]
1a0016e4:	6878      	ldr	r0, [r7, #4]
1a0016e6:	f7ff fe61 	bl	1a0013ac <pll_get_frac>
		if (!ppll->nsel) {
1a0016ea:	683b      	ldr	r3, [r7, #0]
1a0016ec:	689b      	ldr	r3, [r3, #8]
1a0016ee:	2b00      	cmp	r3, #0
1a0016f0:	d102      	bne.n	1a0016f8 <Chip_Clock_CalcMainPLLValue+0x8c>
			return -1;
1a0016f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0016f6:	e01a      	b.n	1a00172e <Chip_Clock_CalcMainPLLValue+0xc2>
		}
		ppll->nsel --;
1a0016f8:	683b      	ldr	r3, [r7, #0]
1a0016fa:	689b      	ldr	r3, [r3, #8]
1a0016fc:	1e5a      	subs	r2, r3, #1
1a0016fe:	683b      	ldr	r3, [r7, #0]
1a001700:	609a      	str	r2, [r3, #8]
	}

	if (ppll->msel == 0) {
1a001702:	683b      	ldr	r3, [r7, #0]
1a001704:	691b      	ldr	r3, [r3, #16]
1a001706:	2b00      	cmp	r3, #0
1a001708:	d102      	bne.n	1a001710 <Chip_Clock_CalcMainPLLValue+0xa4>
		return - 1;
1a00170a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00170e:	e00e      	b.n	1a00172e <Chip_Clock_CalcMainPLLValue+0xc2>
	}

	if (ppll->psel) {
1a001710:	683b      	ldr	r3, [r7, #0]
1a001712:	68db      	ldr	r3, [r3, #12]
1a001714:	2b00      	cmp	r3, #0
1a001716:	d004      	beq.n	1a001722 <Chip_Clock_CalcMainPLLValue+0xb6>
		ppll->psel --;
1a001718:	683b      	ldr	r3, [r7, #0]
1a00171a:	68db      	ldr	r3, [r3, #12]
1a00171c:	1e5a      	subs	r2, r3, #1
1a00171e:	683b      	ldr	r3, [r7, #0]
1a001720:	60da      	str	r2, [r3, #12]
	}

	ppll->msel --;
1a001722:	683b      	ldr	r3, [r7, #0]
1a001724:	691b      	ldr	r3, [r3, #16]
1a001726:	1e5a      	subs	r2, r3, #1
1a001728:	683b      	ldr	r3, [r7, #0]
1a00172a:	611a      	str	r2, [r3, #16]

	return 0;
1a00172c:	2300      	movs	r3, #0
}
1a00172e:	4618      	mov	r0, r3
1a001730:	3708      	adds	r7, #8
1a001732:	46bd      	mov	sp, r7
1a001734:	bd80      	pop	{r7, pc}
1a001736:	bf00      	nop
1a001738:	0c28cb00 	.word	0x0c28cb00
1a00173c:	0094c5ef 	.word	0x0094c5ef
1a001740:	094c5eff 	.word	0x094c5eff

1a001744 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a001744:	b580      	push	{r7, lr}
1a001746:	b08c      	sub	sp, #48	; 0x30
1a001748:	af00      	add	r7, sp, #0
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00174a:	4b2c      	ldr	r3, [pc, #176]	; (1a0017fc <Chip_Clock_GetMainPLLHz+0xb8>)
1a00174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a00174e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001752:	0e1b      	lsrs	r3, r3, #24
1a001754:	b2db      	uxtb	r3, r3
1a001756:	f003 030f 	and.w	r3, r3, #15
1a00175a:	b2db      	uxtb	r3, r3
1a00175c:	4618      	mov	r0, r3
1a00175e:	f000 f88d 	bl	1a00187c <Chip_Clock_GetClockInputHz>
1a001762:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001764:	4b26      	ldr	r3, [pc, #152]	; (1a001800 <Chip_Clock_GetMainPLLHz+0xbc>)
1a001766:	681b      	ldr	r3, [r3, #0]
1a001768:	607b      	str	r3, [r7, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00176a:	4b24      	ldr	r3, [pc, #144]	; (1a0017fc <Chip_Clock_GetMainPLLHz+0xb8>)
1a00176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a00176e:	f003 0301 	and.w	r3, r3, #1
1a001772:	2b00      	cmp	r3, #0
1a001774:	d101      	bne.n	1a00177a <Chip_Clock_GetMainPLLHz+0x36>
		return 0;
1a001776:	2300      	movs	r3, #0
1a001778:	e03b      	b.n	1a0017f2 <Chip_Clock_GetMainPLLHz+0xae>
	}

	msel = (PLLReg >> 16) & 0xFF;
1a00177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00177c:	0c1b      	lsrs	r3, r3, #16
1a00177e:	b2db      	uxtb	r3, r3
1a001780:	627b      	str	r3, [r7, #36]	; 0x24
	nsel = (PLLReg >> 12) & 0x3;
1a001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001784:	0b1b      	lsrs	r3, r3, #12
1a001786:	f003 0303 	and.w	r3, r3, #3
1a00178a:	623b      	str	r3, [r7, #32]
	psel = (PLLReg >> 8) & 0x3;
1a00178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00178e:	0a1b      	lsrs	r3, r3, #8
1a001790:	f003 0303 	and.w	r3, r3, #3
1a001794:	61fb      	str	r3, [r7, #28]
	direct = (PLLReg >> 7) & 0x1;
1a001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001798:	09db      	lsrs	r3, r3, #7
1a00179a:	f003 0301 	and.w	r3, r3, #1
1a00179e:	61bb      	str	r3, [r7, #24]
	fbsel = (PLLReg >> 6) & 0x1;
1a0017a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0017a2:	099b      	lsrs	r3, r3, #6
1a0017a4:	f003 0301 	and.w	r3, r3, #1
1a0017a8:	617b      	str	r3, [r7, #20]

	m = msel + 1;
1a0017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0017ac:	3301      	adds	r3, #1
1a0017ae:	613b      	str	r3, [r7, #16]
	n = nsel + 1;
1a0017b0:	6a3b      	ldr	r3, [r7, #32]
1a0017b2:	3301      	adds	r3, #1
1a0017b4:	60fb      	str	r3, [r7, #12]
	p = ptab[psel];
1a0017b6:	1d3a      	adds	r2, r7, #4
1a0017b8:	69fb      	ldr	r3, [r7, #28]
1a0017ba:	4413      	add	r3, r2
1a0017bc:	781b      	ldrb	r3, [r3, #0]
1a0017be:	60bb      	str	r3, [r7, #8]

	if (direct || fbsel) {
1a0017c0:	69bb      	ldr	r3, [r7, #24]
1a0017c2:	2b00      	cmp	r3, #0
1a0017c4:	d102      	bne.n	1a0017cc <Chip_Clock_GetMainPLLHz+0x88>
1a0017c6:	697b      	ldr	r3, [r7, #20]
1a0017c8:	2b00      	cmp	r3, #0
1a0017ca:	d007      	beq.n	1a0017dc <Chip_Clock_GetMainPLLHz+0x98>
		return m * (freq / n);
1a0017cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a0017ce:	68fb      	ldr	r3, [r7, #12]
1a0017d0:	fbb2 f3f3 	udiv	r3, r2, r3
1a0017d4:	693a      	ldr	r2, [r7, #16]
1a0017d6:	fb02 f303 	mul.w	r3, r2, r3
1a0017da:	e00a      	b.n	1a0017f2 <Chip_Clock_GetMainPLLHz+0xae>
	}

	return (m / (2 * p)) * (freq / n);
1a0017dc:	68bb      	ldr	r3, [r7, #8]
1a0017de:	005b      	lsls	r3, r3, #1
1a0017e0:	693a      	ldr	r2, [r7, #16]
1a0017e2:	fbb2 f3f3 	udiv	r3, r2, r3
1a0017e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1a0017e8:	68fa      	ldr	r2, [r7, #12]
1a0017ea:	fbb1 f2f2 	udiv	r2, r1, r2
1a0017ee:	fb02 f303 	mul.w	r3, r2, r3
}
1a0017f2:	4618      	mov	r0, r3
1a0017f4:	3730      	adds	r7, #48	; 0x30
1a0017f6:	46bd      	mov	sp, r7
1a0017f8:	bd80      	pop	{r7, pc}
1a0017fa:	bf00      	nop
1a0017fc:	40050000 	.word	0x40050000
1a001800:	1a002fcc 	.word	0x1a002fcc

1a001804 <Chip_Clock_GetDividerSource>:
	}
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
1a001804:	b480      	push	{r7}
1a001806:	b085      	sub	sp, #20
1a001808:	af00      	add	r7, sp, #0
1a00180a:	4603      	mov	r3, r0
1a00180c:	71fb      	strb	r3, [r7, #7]
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00180e:	4a0c      	ldr	r2, [pc, #48]	; (1a001840 <Chip_Clock_GetDividerSource+0x3c>)
1a001810:	79fb      	ldrb	r3, [r7, #7]
1a001812:	3312      	adds	r3, #18
1a001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001818:	60fb      	str	r3, [r7, #12]

	if (reg & 1) {	/* divider is powered down */
1a00181a:	68fb      	ldr	r3, [r7, #12]
1a00181c:	f003 0301 	and.w	r3, r3, #1
1a001820:	2b00      	cmp	r3, #0
1a001822:	d001      	beq.n	1a001828 <Chip_Clock_GetDividerSource+0x24>
		return CLKINPUT_PD;
1a001824:	2311      	movs	r3, #17
1a001826:	e005      	b.n	1a001834 <Chip_Clock_GetDividerSource+0x30>
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001828:	68fb      	ldr	r3, [r7, #12]
1a00182a:	0e1b      	lsrs	r3, r3, #24
1a00182c:	b2db      	uxtb	r3, r3
1a00182e:	f003 031f 	and.w	r3, r3, #31
1a001832:	b2db      	uxtb	r3, r3
}
1a001834:	4618      	mov	r0, r3
1a001836:	3714      	adds	r7, #20
1a001838:	46bd      	mov	sp, r7
1a00183a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00183e:	4770      	bx	lr
1a001840:	40050000 	.word	0x40050000

1a001844 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
1a001844:	b480      	push	{r7}
1a001846:	b083      	sub	sp, #12
1a001848:	af00      	add	r7, sp, #0
1a00184a:	4603      	mov	r3, r0
1a00184c:	71fb      	strb	r3, [r7, #7]
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00184e:	4a09      	ldr	r2, [pc, #36]	; (1a001874 <Chip_Clock_GetDividerDivisor+0x30>)
1a001850:	79fb      	ldrb	r3, [r7, #7]
1a001852:	3312      	adds	r3, #18
1a001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001858:	089b      	lsrs	r3, r3, #2
1a00185a:	b2da      	uxtb	r2, r3
1a00185c:	79fb      	ldrb	r3, [r7, #7]
1a00185e:	4906      	ldr	r1, [pc, #24]	; (1a001878 <Chip_Clock_GetDividerDivisor+0x34>)
1a001860:	5ccb      	ldrb	r3, [r1, r3]
1a001862:	4013      	ands	r3, r2
1a001864:	b2db      	uxtb	r3, r3
}
1a001866:	4618      	mov	r0, r3
1a001868:	370c      	adds	r7, #12
1a00186a:	46bd      	mov	sp, r7
1a00186c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001870:	4770      	bx	lr
1a001872:	bf00      	nop
1a001874:	40050000 	.word	0x40050000
1a001878:	1a002fd0 	.word	0x1a002fd0

1a00187c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00187c:	b580      	push	{r7, lr}
1a00187e:	b084      	sub	sp, #16
1a001880:	af00      	add	r7, sp, #0
1a001882:	4603      	mov	r3, r0
1a001884:	71fb      	strb	r3, [r7, #7]
	uint32_t rate = 0;
1a001886:	2300      	movs	r3, #0
1a001888:	60fb      	str	r3, [r7, #12]

	switch (input) {
1a00188a:	79fb      	ldrb	r3, [r7, #7]
1a00188c:	2b11      	cmp	r3, #17
1a00188e:	d87f      	bhi.n	1a001990 <Chip_Clock_GetClockInputHz+0x114>
1a001890:	a201      	add	r2, pc, #4	; (adr r2, 1a001898 <Chip_Clock_GetClockInputHz+0x1c>)
1a001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001896:	bf00      	nop
1a001898:	1a0018e1 	.word	0x1a0018e1
1a00189c:	1a0018e9 	.word	0x1a0018e9
1a0018a0:	1a0018ef 	.word	0x1a0018ef
1a0018a4:	1a001903 	.word	0x1a001903
1a0018a8:	1a00191d 	.word	0x1a00191d
1a0018ac:	1a001991 	.word	0x1a001991
1a0018b0:	1a001925 	.word	0x1a001925
1a0018b4:	1a00192d 	.word	0x1a00192d
1a0018b8:	1a001935 	.word	0x1a001935
1a0018bc:	1a00193d 	.word	0x1a00193d
1a0018c0:	1a001991 	.word	0x1a001991
1a0018c4:	1a001991 	.word	0x1a001991
1a0018c8:	1a001945 	.word	0x1a001945
1a0018cc:	1a001953 	.word	0x1a001953
1a0018d0:	1a001961 	.word	0x1a001961
1a0018d4:	1a00196f 	.word	0x1a00196f
1a0018d8:	1a00197d 	.word	0x1a00197d
1a0018dc:	1a00198b 	.word	0x1a00198b
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a0018e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1a0018e4:	60fb      	str	r3, [r7, #12]
		break;
1a0018e6:	e056      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0018e8:	4b2d      	ldr	r3, [pc, #180]	; (1a0019a0 <Chip_Clock_GetClockInputHz+0x124>)
1a0018ea:	60fb      	str	r3, [r7, #12]
		break;
1a0018ec:	e053      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0018ee:	4b2d      	ldr	r3, [pc, #180]	; (1a0019a4 <Chip_Clock_GetClockInputHz+0x128>)
1a0018f0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0018f4:	f003 0307 	and.w	r3, r3, #7
1a0018f8:	2b04      	cmp	r3, #4
1a0018fa:	d04b      	beq.n	1a001994 <Chip_Clock_GetClockInputHz+0x118>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0018fc:	4b2a      	ldr	r3, [pc, #168]	; (1a0019a8 <Chip_Clock_GetClockInputHz+0x12c>)
1a0018fe:	60fb      	str	r3, [r7, #12]
		}
		break;
1a001900:	e048      	b.n	1a001994 <Chip_Clock_GetClockInputHz+0x118>

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001902:	4b28      	ldr	r3, [pc, #160]	; (1a0019a4 <Chip_Clock_GetClockInputHz+0x128>)
1a001904:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001908:	f003 0307 	and.w	r3, r3, #7
1a00190c:	2b04      	cmp	r3, #4
1a00190e:	d002      	beq.n	1a001916 <Chip_Clock_GetClockInputHz+0x9a>
			rate = 25000000; /* MII uses 25 MHz */
1a001910:	4b25      	ldr	r3, [pc, #148]	; (1a0019a8 <Chip_Clock_GetClockInputHz+0x12c>)
1a001912:	60fb      	str	r3, [r7, #12]
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;
1a001914:	e03f      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>
			rate = 50000000; /* RMII uses 50 MHz */
1a001916:	4b25      	ldr	r3, [pc, #148]	; (1a0019ac <Chip_Clock_GetClockInputHz+0x130>)
1a001918:	60fb      	str	r3, [r7, #12]
		break;
1a00191a:	e03c      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00191c:	4b24      	ldr	r3, [pc, #144]	; (1a0019b0 <Chip_Clock_GetClockInputHz+0x134>)
1a00191e:	681b      	ldr	r3, [r3, #0]
1a001920:	60fb      	str	r3, [r7, #12]
		break;
1a001922:	e038      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001924:	4b23      	ldr	r3, [pc, #140]	; (1a0019b4 <Chip_Clock_GetClockInputHz+0x138>)
1a001926:	681b      	ldr	r3, [r3, #0]
1a001928:	60fb      	str	r3, [r7, #12]
		break;
1a00192a:	e034      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00192c:	4b22      	ldr	r3, [pc, #136]	; (1a0019b8 <Chip_Clock_GetClockInputHz+0x13c>)
1a00192e:	681b      	ldr	r3, [r3, #0]
1a001930:	60fb      	str	r3, [r7, #12]
		break;
1a001932:	e030      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001934:	4b20      	ldr	r3, [pc, #128]	; (1a0019b8 <Chip_Clock_GetClockInputHz+0x13c>)
1a001936:	685b      	ldr	r3, [r3, #4]
1a001938:	60fb      	str	r3, [r7, #12]
		break;
1a00193a:	e02c      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00193c:	f7ff ff02 	bl	1a001744 <Chip_Clock_GetMainPLLHz>
1a001940:	60f8      	str	r0, [r7, #12]
		break;
1a001942:	e028      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001944:	79fb      	ldrb	r3, [r7, #7]
1a001946:	2100      	movs	r1, #0
1a001948:	4618      	mov	r0, r3
1a00194a:	f7ff fdef 	bl	1a00152c <Chip_Clock_GetDivRate>
1a00194e:	60f8      	str	r0, [r7, #12]
		break;
1a001950:	e021      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001952:	79fb      	ldrb	r3, [r7, #7]
1a001954:	2101      	movs	r1, #1
1a001956:	4618      	mov	r0, r3
1a001958:	f7ff fde8 	bl	1a00152c <Chip_Clock_GetDivRate>
1a00195c:	60f8      	str	r0, [r7, #12]
		break;
1a00195e:	e01a      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001960:	79fb      	ldrb	r3, [r7, #7]
1a001962:	2102      	movs	r1, #2
1a001964:	4618      	mov	r0, r3
1a001966:	f7ff fde1 	bl	1a00152c <Chip_Clock_GetDivRate>
1a00196a:	60f8      	str	r0, [r7, #12]
		break;
1a00196c:	e013      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00196e:	79fb      	ldrb	r3, [r7, #7]
1a001970:	2103      	movs	r1, #3
1a001972:	4618      	mov	r0, r3
1a001974:	f7ff fdda 	bl	1a00152c <Chip_Clock_GetDivRate>
1a001978:	60f8      	str	r0, [r7, #12]
		break;
1a00197a:	e00c      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00197c:	79fb      	ldrb	r3, [r7, #7]
1a00197e:	2104      	movs	r1, #4
1a001980:	4618      	mov	r0, r3
1a001982:	f7ff fdd3 	bl	1a00152c <Chip_Clock_GetDivRate>
1a001986:	60f8      	str	r0, [r7, #12]
		break;
1a001988:	e005      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKINPUT_PD:
		rate = 0;
1a00198a:	2300      	movs	r3, #0
1a00198c:	60fb      	str	r3, [r7, #12]
		break;
1a00198e:	e002      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>

	default:
		break;
1a001990:	bf00      	nop
1a001992:	e000      	b.n	1a001996 <Chip_Clock_GetClockInputHz+0x11a>
		break;
1a001994:	bf00      	nop
	}

	return rate;
1a001996:	68fb      	ldr	r3, [r7, #12]
}
1a001998:	4618      	mov	r0, r3
1a00199a:	3710      	adds	r7, #16
1a00199c:	46bd      	mov	sp, r7
1a00199e:	bd80      	pop	{r7, pc}
1a0019a0:	00b71b00 	.word	0x00b71b00
1a0019a4:	40043000 	.word	0x40043000
1a0019a8:	017d7840 	.word	0x017d7840
1a0019ac:	02faf080 	.word	0x02faf080
1a0019b0:	1a002ea8 	.word	0x1a002ea8
1a0019b4:	1a002eac 	.word	0x1a002eac
1a0019b8:	10000064 	.word	0x10000064

1a0019bc <Chip_Clock_GetBaseClocktHz>:

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a0019bc:	b580      	push	{r7, lr}
1a0019be:	b082      	sub	sp, #8
1a0019c0:	af00      	add	r7, sp, #0
1a0019c2:	4603      	mov	r3, r0
1a0019c4:	71fb      	strb	r3, [r7, #7]
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0019c6:	79fb      	ldrb	r3, [r7, #7]
1a0019c8:	4618      	mov	r0, r3
1a0019ca:	f000 f857 	bl	1a001a7c <Chip_Clock_GetBaseClock>
1a0019ce:	4603      	mov	r3, r0
1a0019d0:	4618      	mov	r0, r3
1a0019d2:	f7ff ff53 	bl	1a00187c <Chip_Clock_GetClockInputHz>
1a0019d6:	4603      	mov	r3, r0
}
1a0019d8:	4618      	mov	r0, r3
1a0019da:	3708      	adds	r7, #8
1a0019dc:	46bd      	mov	sp, r7
1a0019de:	bd80      	pop	{r7, pc}

1a0019e0 <Chip_Clock_SetBaseClock>:

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0019e0:	b490      	push	{r4, r7}
1a0019e2:	b084      	sub	sp, #16
1a0019e4:	af00      	add	r7, sp, #0
1a0019e6:	4604      	mov	r4, r0
1a0019e8:	4608      	mov	r0, r1
1a0019ea:	4611      	mov	r1, r2
1a0019ec:	461a      	mov	r2, r3
1a0019ee:	4623      	mov	r3, r4
1a0019f0:	71fb      	strb	r3, [r7, #7]
1a0019f2:	4603      	mov	r3, r0
1a0019f4:	71bb      	strb	r3, [r7, #6]
1a0019f6:	460b      	mov	r3, r1
1a0019f8:	717b      	strb	r3, [r7, #5]
1a0019fa:	4613      	mov	r3, r2
1a0019fc:	713b      	strb	r3, [r7, #4]
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0019fe:	4a1d      	ldr	r2, [pc, #116]	; (1a001a74 <Chip_Clock_SetBaseClock+0x94>)
1a001a00:	79fb      	ldrb	r3, [r7, #7]
1a001a02:	3316      	adds	r3, #22
1a001a04:	009b      	lsls	r3, r3, #2
1a001a06:	4413      	add	r3, r2
1a001a08:	685b      	ldr	r3, [r3, #4]
1a001a0a:	60fb      	str	r3, [r7, #12]

	if (BaseClock < CLK_BASE_NONE) {
1a001a0c:	79fb      	ldrb	r3, [r7, #7]
1a001a0e:	2b1b      	cmp	r3, #27
1a001a10:	d822      	bhi.n	1a001a58 <Chip_Clock_SetBaseClock+0x78>
		if (Input != CLKINPUT_PD) {
1a001a12:	79bb      	ldrb	r3, [r7, #6]
1a001a14:	2b11      	cmp	r3, #17
1a001a16:	d028      	beq.n	1a001a6a <Chip_Clock_SetBaseClock+0x8a>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001a18:	68fa      	ldr	r2, [r7, #12]
1a001a1a:	4b17      	ldr	r3, [pc, #92]	; (1a001a78 <Chip_Clock_SetBaseClock+0x98>)
1a001a1c:	4013      	ands	r3, r2
1a001a1e:	60fb      	str	r3, [r7, #12]

			if (autoblocken) {
1a001a20:	797b      	ldrb	r3, [r7, #5]
1a001a22:	2b00      	cmp	r3, #0
1a001a24:	d003      	beq.n	1a001a2e <Chip_Clock_SetBaseClock+0x4e>
				reg |= (1 << 11);
1a001a26:	68fb      	ldr	r3, [r7, #12]
1a001a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001a2c:	60fb      	str	r3, [r7, #12]
			}
			if (powerdn) {
1a001a2e:	793b      	ldrb	r3, [r7, #4]
1a001a30:	2b00      	cmp	r3, #0
1a001a32:	d003      	beq.n	1a001a3c <Chip_Clock_SetBaseClock+0x5c>
				reg |= (1 << 0);
1a001a34:	68fb      	ldr	r3, [r7, #12]
1a001a36:	f043 0301 	orr.w	r3, r3, #1
1a001a3a:	60fb      	str	r3, [r7, #12]
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001a3c:	79bb      	ldrb	r3, [r7, #6]
1a001a3e:	061b      	lsls	r3, r3, #24
1a001a40:	461a      	mov	r2, r3
1a001a42:	68fb      	ldr	r3, [r7, #12]
1a001a44:	4313      	orrs	r3, r2
1a001a46:	60fb      	str	r3, [r7, #12]

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001a48:	4a0a      	ldr	r2, [pc, #40]	; (1a001a74 <Chip_Clock_SetBaseClock+0x94>)
1a001a4a:	79fb      	ldrb	r3, [r7, #7]
1a001a4c:	3316      	adds	r3, #22
1a001a4e:	009b      	lsls	r3, r3, #2
1a001a50:	4413      	add	r3, r2
1a001a52:	68fa      	ldr	r2, [r7, #12]
1a001a54:	605a      	str	r2, [r3, #4]
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
	}
}
1a001a56:	e008      	b.n	1a001a6a <Chip_Clock_SetBaseClock+0x8a>
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001a58:	4906      	ldr	r1, [pc, #24]	; (1a001a74 <Chip_Clock_SetBaseClock+0x94>)
1a001a5a:	79fb      	ldrb	r3, [r7, #7]
1a001a5c:	68fa      	ldr	r2, [r7, #12]
1a001a5e:	f042 0201 	orr.w	r2, r2, #1
1a001a62:	3316      	adds	r3, #22
1a001a64:	009b      	lsls	r3, r3, #2
1a001a66:	440b      	add	r3, r1
1a001a68:	605a      	str	r2, [r3, #4]
}
1a001a6a:	bf00      	nop
1a001a6c:	3710      	adds	r7, #16
1a001a6e:	46bd      	mov	sp, r7
1a001a70:	bc90      	pop	{r4, r7}
1a001a72:	4770      	bx	lr
1a001a74:	40050000 	.word	0x40050000
1a001a78:	e0fff7fe 	.word	0xe0fff7fe

1a001a7c <Chip_Clock_GetBaseClock>:
	return enabled;
}

/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
1a001a7c:	b480      	push	{r7}
1a001a7e:	b085      	sub	sp, #20
1a001a80:	af00      	add	r7, sp, #0
1a001a82:	4603      	mov	r3, r0
1a001a84:	71fb      	strb	r3, [r7, #7]
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001a86:	79fb      	ldrb	r3, [r7, #7]
1a001a88:	2b1b      	cmp	r3, #27
1a001a8a:	d901      	bls.n	1a001a90 <Chip_Clock_GetBaseClock+0x14>
		return CLKINPUT_PD;
1a001a8c:	2311      	movs	r3, #17
1a001a8e:	e013      	b.n	1a001ab8 <Chip_Clock_GetBaseClock+0x3c>
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001a90:	4a0c      	ldr	r2, [pc, #48]	; (1a001ac4 <Chip_Clock_GetBaseClock+0x48>)
1a001a92:	79fb      	ldrb	r3, [r7, #7]
1a001a94:	3316      	adds	r3, #22
1a001a96:	009b      	lsls	r3, r3, #2
1a001a98:	4413      	add	r3, r2
1a001a9a:	685b      	ldr	r3, [r3, #4]
1a001a9c:	60fb      	str	r3, [r7, #12]

	/* base clock is powered down? */
	if (reg & 1) {
1a001a9e:	68fb      	ldr	r3, [r7, #12]
1a001aa0:	f003 0301 	and.w	r3, r3, #1
1a001aa4:	2b00      	cmp	r3, #0
1a001aa6:	d001      	beq.n	1a001aac <Chip_Clock_GetBaseClock+0x30>
		return CLKINPUT_PD;
1a001aa8:	2311      	movs	r3, #17
1a001aaa:	e005      	b.n	1a001ab8 <Chip_Clock_GetBaseClock+0x3c>
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001aac:	68fb      	ldr	r3, [r7, #12]
1a001aae:	0e1b      	lsrs	r3, r3, #24
1a001ab0:	b2db      	uxtb	r3, r3
1a001ab2:	f003 031f 	and.w	r3, r3, #31
1a001ab6:	b2db      	uxtb	r3, r3
}
1a001ab8:	4618      	mov	r0, r3
1a001aba:	3714      	adds	r7, #20
1a001abc:	46bd      	mov	sp, r7
1a001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001ac2:	4770      	bx	lr
1a001ac4:	40050000 	.word	0x40050000

1a001ac8 <Chip_Clock_EnableOpts>:

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
1a001ac8:	b480      	push	{r7}
1a001aca:	b085      	sub	sp, #20
1a001acc:	af00      	add	r7, sp, #0
1a001ace:	603b      	str	r3, [r7, #0]
1a001ad0:	4603      	mov	r3, r0
1a001ad2:	80fb      	strh	r3, [r7, #6]
1a001ad4:	460b      	mov	r3, r1
1a001ad6:	717b      	strb	r3, [r7, #5]
1a001ad8:	4613      	mov	r3, r2
1a001ada:	713b      	strb	r3, [r7, #4]
	uint32_t reg = 1;
1a001adc:	2301      	movs	r3, #1
1a001ade:	60fb      	str	r3, [r7, #12]

	if (autoen) {
1a001ae0:	797b      	ldrb	r3, [r7, #5]
1a001ae2:	2b00      	cmp	r3, #0
1a001ae4:	d003      	beq.n	1a001aee <Chip_Clock_EnableOpts+0x26>
		reg |= (1 << 1);
1a001ae6:	68fb      	ldr	r3, [r7, #12]
1a001ae8:	f043 0302 	orr.w	r3, r3, #2
1a001aec:	60fb      	str	r3, [r7, #12]
	}
	if (wakeupen) {
1a001aee:	793b      	ldrb	r3, [r7, #4]
1a001af0:	2b00      	cmp	r3, #0
1a001af2:	d003      	beq.n	1a001afc <Chip_Clock_EnableOpts+0x34>
		reg |= (1 << 2);
1a001af4:	68fb      	ldr	r3, [r7, #12]
1a001af6:	f043 0304 	orr.w	r3, r3, #4
1a001afa:	60fb      	str	r3, [r7, #12]
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001afc:	683b      	ldr	r3, [r7, #0]
1a001afe:	2b02      	cmp	r3, #2
1a001b00:	d103      	bne.n	1a001b0a <Chip_Clock_EnableOpts+0x42>
		reg |= (1 << 5);
1a001b02:	68fb      	ldr	r3, [r7, #12]
1a001b04:	f043 0320 	orr.w	r3, r3, #32
1a001b08:	60fb      	str	r3, [r7, #12]
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001b0a:	88fb      	ldrh	r3, [r7, #6]
1a001b0c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a001b10:	d308      	bcc.n	1a001b24 <Chip_Clock_EnableOpts+0x5c>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001b12:	490a      	ldr	r1, [pc, #40]	; (1a001b3c <Chip_Clock_EnableOpts+0x74>)
1a001b14:	88fb      	ldrh	r3, [r7, #6]
1a001b16:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a001b1a:	3320      	adds	r3, #32
1a001b1c:	68fa      	ldr	r2, [r7, #12]
1a001b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
	}
}
1a001b22:	e005      	b.n	1a001b30 <Chip_Clock_EnableOpts+0x68>
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001b24:	4906      	ldr	r1, [pc, #24]	; (1a001b40 <Chip_Clock_EnableOpts+0x78>)
1a001b26:	88fb      	ldrh	r3, [r7, #6]
1a001b28:	3320      	adds	r3, #32
1a001b2a:	68fa      	ldr	r2, [r7, #12]
1a001b2c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
1a001b30:	bf00      	nop
1a001b32:	3714      	adds	r7, #20
1a001b34:	46bd      	mov	sp, r7
1a001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001b3a:	4770      	bx	lr
1a001b3c:	40052000 	.word	0x40052000
1a001b40:	40051000 	.word	0x40051000

1a001b44 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
1a001b44:	b480      	push	{r7}
1a001b46:	b083      	sub	sp, #12
1a001b48:	af00      	add	r7, sp, #0
1a001b4a:	4603      	mov	r3, r0
1a001b4c:	80fb      	strh	r3, [r7, #6]
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001b4e:	88fb      	ldrh	r3, [r7, #6]
1a001b50:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a001b54:	d310      	bcc.n	1a001b78 <Chip_Clock_Enable+0x34>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001b56:	4a11      	ldr	r2, [pc, #68]	; (1a001b9c <Chip_Clock_Enable+0x58>)
1a001b58:	88fb      	ldrh	r3, [r7, #6]
1a001b5a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a001b5e:	3320      	adds	r3, #32
1a001b60:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001b64:	490d      	ldr	r1, [pc, #52]	; (1a001b9c <Chip_Clock_Enable+0x58>)
1a001b66:	88fb      	ldrh	r3, [r7, #6]
1a001b68:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a001b6c:	f042 0201 	orr.w	r2, r2, #1
1a001b70:	3320      	adds	r3, #32
1a001b72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
	}
}
1a001b76:	e00b      	b.n	1a001b90 <Chip_Clock_Enable+0x4c>
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001b78:	4a09      	ldr	r2, [pc, #36]	; (1a001ba0 <Chip_Clock_Enable+0x5c>)
1a001b7a:	88fb      	ldrh	r3, [r7, #6]
1a001b7c:	3320      	adds	r3, #32
1a001b7e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001b82:	4907      	ldr	r1, [pc, #28]	; (1a001ba0 <Chip_Clock_Enable+0x5c>)
1a001b84:	88fb      	ldrh	r3, [r7, #6]
1a001b86:	f042 0201 	orr.w	r2, r2, #1
1a001b8a:	3320      	adds	r3, #32
1a001b8c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
1a001b90:	bf00      	nop
1a001b92:	370c      	adds	r7, #12
1a001b94:	46bd      	mov	sp, r7
1a001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001b9a:	4770      	bx	lr
1a001b9c:	40052000 	.word	0x40052000
1a001ba0:	40051000 	.word	0x40051000

1a001ba4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001ba4:	b580      	push	{r7, lr}
1a001ba6:	b086      	sub	sp, #24
1a001ba8:	af00      	add	r7, sp, #0
1a001baa:	4603      	mov	r3, r0
1a001bac:	80fb      	strh	r3, [r7, #6]
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001bae:	88fb      	ldrh	r3, [r7, #6]
1a001bb0:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a001bb4:	d308      	bcc.n	1a001bc8 <Chip_Clock_GetRate+0x24>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001bb6:	4a1b      	ldr	r2, [pc, #108]	; (1a001c24 <Chip_Clock_GetRate+0x80>)
1a001bb8:	88fb      	ldrh	r3, [r7, #6]
1a001bba:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a001bbe:	3320      	adds	r3, #32
1a001bc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a001bc4:	617b      	str	r3, [r7, #20]
1a001bc6:	e005      	b.n	1a001bd4 <Chip_Clock_GetRate+0x30>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001bc8:	4a17      	ldr	r2, [pc, #92]	; (1a001c28 <Chip_Clock_GetRate+0x84>)
1a001bca:	88fb      	ldrh	r3, [r7, #6]
1a001bcc:	3320      	adds	r3, #32
1a001bce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a001bd2:	617b      	str	r3, [r7, #20]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001bd4:	697b      	ldr	r3, [r7, #20]
1a001bd6:	f003 0301 	and.w	r3, r3, #1
1a001bda:	2b00      	cmp	r3, #0
1a001bdc:	d01b      	beq.n	1a001c16 <Chip_Clock_GetRate+0x72>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001bde:	88fb      	ldrh	r3, [r7, #6]
1a001be0:	4618      	mov	r0, r3
1a001be2:	f7ff fcc3 	bl	1a00156c <Chip_Clock_FindBaseClock>
1a001be6:	4603      	mov	r3, r0
1a001be8:	72fb      	strb	r3, [r7, #11]

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001bea:	7afb      	ldrb	r3, [r7, #11]
1a001bec:	4618      	mov	r0, r3
1a001bee:	f7ff fee5 	bl	1a0019bc <Chip_Clock_GetBaseClocktHz>
1a001bf2:	60f8      	str	r0, [r7, #12]

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a001bf4:	697b      	ldr	r3, [r7, #20]
1a001bf6:	095b      	lsrs	r3, r3, #5
1a001bf8:	f003 0307 	and.w	r3, r3, #7
1a001bfc:	2b00      	cmp	r3, #0
1a001bfe:	d102      	bne.n	1a001c06 <Chip_Clock_GetRate+0x62>
			div = 1;
1a001c00:	2301      	movs	r3, #1
1a001c02:	613b      	str	r3, [r7, #16]
1a001c04:	e001      	b.n	1a001c0a <Chip_Clock_GetRate+0x66>
		}
		else {
			div = 2;/* No other dividers supported */
1a001c06:	2302      	movs	r3, #2
1a001c08:	613b      	str	r3, [r7, #16]

		}
		rate = rate / div;
1a001c0a:	68fa      	ldr	r2, [r7, #12]
1a001c0c:	693b      	ldr	r3, [r7, #16]
1a001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
1a001c12:	60fb      	str	r3, [r7, #12]
1a001c14:	e001      	b.n	1a001c1a <Chip_Clock_GetRate+0x76>
	}
	else {
		rate = 0;
1a001c16:	2300      	movs	r3, #0
1a001c18:	60fb      	str	r3, [r7, #12]
	}

	return rate;
1a001c1a:	68fb      	ldr	r3, [r7, #12]
}
1a001c1c:	4618      	mov	r0, r3
1a001c1e:	3718      	adds	r7, #24
1a001c20:	46bd      	mov	sp, r7
1a001c22:	bd80      	pop	{r7, pc}
1a001c24:	40052000 	.word	0x40052000
1a001c28:	40051000 	.word	0x40051000

1a001c2c <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a001c2c:	b480      	push	{r7}
1a001c2e:	b083      	sub	sp, #12
1a001c30:	af00      	add	r7, sp, #0
1a001c32:	6078      	str	r0, [r7, #4]
}
1a001c34:	bf00      	nop
1a001c36:	370c      	adds	r7, #12
1a001c38:	46bd      	mov	sp, r7
1a001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001c3e:	4770      	bx	lr

1a001c40 <Chip_Clock_DisableMainPLL>:
 * @return	none
 * Make sure the main PLL is not needed to clock the part before disabling it.
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
1a001c40:	b480      	push	{r7}
1a001c42:	af00      	add	r7, sp, #0
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001c44:	4b05      	ldr	r3, [pc, #20]	; (1a001c5c <Chip_Clock_DisableMainPLL+0x1c>)
1a001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a001c48:	4a04      	ldr	r2, [pc, #16]	; (1a001c5c <Chip_Clock_DisableMainPLL+0x1c>)
1a001c4a:	f043 0301 	orr.w	r3, r3, #1
1a001c4e:	6453      	str	r3, [r2, #68]	; 0x44
}
1a001c50:	bf00      	nop
1a001c52:	46bd      	mov	sp, r7
1a001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001c58:	4770      	bx	lr
1a001c5a:	bf00      	nop
1a001c5c:	40050000 	.word	0x40050000

1a001c60 <Chip_Clock_SetupMainPLL>:
 * @param	ppll	: Pointer to pll param structure #PLL_PARAM_T
 * @return	none
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
1a001c60:	b480      	push	{r7}
1a001c62:	b083      	sub	sp, #12
1a001c64:	af00      	add	r7, sp, #0
1a001c66:	6078      	str	r0, [r7, #4]
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001c68:	687b      	ldr	r3, [r7, #4]
1a001c6a:	681b      	ldr	r3, [r3, #0]
1a001c6c:	461a      	mov	r2, r3
1a001c6e:	687b      	ldr	r3, [r7, #4]
1a001c70:	791b      	ldrb	r3, [r3, #4]
1a001c72:	061b      	lsls	r3, r3, #24
1a001c74:	4313      	orrs	r3, r2
1a001c76:	687a      	ldr	r2, [r7, #4]
1a001c78:	6912      	ldr	r2, [r2, #16]
1a001c7a:	0412      	lsls	r2, r2, #16
1a001c7c:	4313      	orrs	r3, r2
1a001c7e:	687a      	ldr	r2, [r7, #4]
1a001c80:	6892      	ldr	r2, [r2, #8]
1a001c82:	0312      	lsls	r2, r2, #12
1a001c84:	4313      	orrs	r3, r2
1a001c86:	687a      	ldr	r2, [r7, #4]
1a001c88:	68d2      	ldr	r2, [r2, #12]
1a001c8a:	0212      	lsls	r2, r2, #8
1a001c8c:	4313      	orrs	r3, r2
1a001c8e:	4a05      	ldr	r2, [pc, #20]	; (1a001ca4 <Chip_Clock_SetupMainPLL+0x44>)
1a001c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001c94:	6453      	str	r3, [r2, #68]	; 0x44
}
1a001c96:	bf00      	nop
1a001c98:	370c      	adds	r7, #12
1a001c9a:	46bd      	mov	sp, r7
1a001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001ca0:	4770      	bx	lr
1a001ca2:	bf00      	nop
1a001ca4:	40050000 	.word	0x40050000

1a001ca8 <Chip_Clock_MainPLLLocked>:
 * @brief	Wait for Main PLL to be locked
 * @return	1 - PLL is LOCKED; 0 - PLL is not locked
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
1a001ca8:	b480      	push	{r7}
1a001caa:	af00      	add	r7, sp, #0
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001cac:	4b06      	ldr	r3, [pc, #24]	; (1a001cc8 <Chip_Clock_MainPLLLocked+0x20>)
1a001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001cb0:	f003 0301 	and.w	r3, r3, #1
1a001cb4:	2b00      	cmp	r3, #0
1a001cb6:	bf14      	ite	ne
1a001cb8:	2301      	movne	r3, #1
1a001cba:	2300      	moveq	r3, #0
1a001cbc:	b2db      	uxtb	r3, r3
}
1a001cbe:	4618      	mov	r0, r3
1a001cc0:	46bd      	mov	sp, r7
1a001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001cc6:	4770      	bx	lr
1a001cc8:	40050000 	.word	0x40050000

1a001ccc <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001ccc:	b590      	push	{r4, r7, lr}
1a001cce:	b08f      	sub	sp, #60	; 0x3c
1a001cd0:	af00      	add	r7, sp, #0
1a001cd2:	4603      	mov	r3, r0
1a001cd4:	6039      	str	r1, [r7, #0]
1a001cd6:	71fb      	strb	r3, [r7, #7]
1a001cd8:	4613      	mov	r3, r2
1a001cda:	71bb      	strb	r3, [r7, #6]
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001cdc:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t direct = 0, pdivide = 0;
1a001ce2:	2300      	movs	r3, #0
1a001ce4:	633b      	str	r3, [r7, #48]	; 0x30
1a001ce6:	2300      	movs	r3, #0
1a001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001cea:	79fb      	ldrb	r3, [r7, #7]
1a001cec:	2b06      	cmp	r3, #6
1a001cee:	d101      	bne.n	1a001cf4 <Chip_SetupCoreClock+0x28>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a001cf0:	f7ff fc84 	bl	1a0015fc <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001cf4:	79f9      	ldrb	r1, [r7, #7]
1a001cf6:	2300      	movs	r3, #0
1a001cf8:	2201      	movs	r2, #1
1a001cfa:	2004      	movs	r0, #4
1a001cfc:	f7ff fe70 	bl	1a0019e0 <Chip_Clock_SetBaseClock>
	Chip_Clock_DisableMainPLL(); /* Disable PLL */
1a001d00:	f7ff ff9e 	bl	1a001c40 <Chip_Clock_DisableMainPLL>

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001d04:	79fb      	ldrb	r3, [r7, #7]
1a001d06:	733b      	strb	r3, [r7, #12]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001d08:	f107 0308 	add.w	r3, r7, #8
1a001d0c:	4619      	mov	r1, r3
1a001d0e:	6838      	ldr	r0, [r7, #0]
1a001d10:	f7ff fcac 	bl	1a00166c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001d14:	683b      	ldr	r3, [r7, #0]
1a001d16:	4a3d      	ldr	r2, [pc, #244]	; (1a001e0c <Chip_SetupCoreClock+0x140>)
1a001d18:	4293      	cmp	r3, r2
1a001d1a:	d916      	bls.n	1a001d4a <Chip_SetupCoreClock+0x7e>
		if (ppll.ctrl & (1 << 6)) {
1a001d1c:	68bb      	ldr	r3, [r7, #8]
1a001d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a001d22:	2b00      	cmp	r3, #0
1a001d24:	d000      	beq.n	1a001d28 <Chip_SetupCoreClock+0x5c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001d26:	e7fe      	b.n	1a001d26 <Chip_SetupCoreClock+0x5a>
		} else if (ppll.ctrl & (1 << 7)){
1a001d28:	68bb      	ldr	r3, [r7, #8]
1a001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a001d2e:	2b00      	cmp	r3, #0
1a001d30:	d006      	beq.n	1a001d40 <Chip_SetupCoreClock+0x74>
			direct = 1;
1a001d32:	2301      	movs	r3, #1
1a001d34:	633b      	str	r3, [r7, #48]	; 0x30
			ppll.ctrl &= ~(1 << 7);
1a001d36:	68bb      	ldr	r3, [r7, #8]
1a001d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001d3c:	60bb      	str	r3, [r7, #8]
1a001d3e:	e004      	b.n	1a001d4a <Chip_SetupCoreClock+0x7e>
		} else {
			pdivide = 1;
1a001d40:	2301      	movs	r3, #1
1a001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
			ppll.psel++;
1a001d44:	697b      	ldr	r3, [r7, #20]
1a001d46:	3301      	adds	r3, #1
1a001d48:	617b      	str	r3, [r7, #20]
		}
	}

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);
1a001d4a:	f107 0308 	add.w	r3, r7, #8
1a001d4e:	4618      	mov	r0, r3
1a001d50:	f7ff ff86 	bl	1a001c60 <Chip_Clock_SetupMainPLL>

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001d54:	bf00      	nop
1a001d56:	f7ff ffa7 	bl	1a001ca8 <Chip_Clock_MainPLLLocked>
1a001d5a:	4603      	mov	r3, r0
1a001d5c:	2b00      	cmp	r3, #0
1a001d5e:	d0fa      	beq.n	1a001d56 <Chip_SetupCoreClock+0x8a>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001d60:	2300      	movs	r3, #0
1a001d62:	2201      	movs	r2, #1
1a001d64:	2109      	movs	r1, #9
1a001d66:	2004      	movs	r0, #4
1a001d68:	f7ff fe3a 	bl	1a0019e0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001d6e:	2b00      	cmp	r3, #0
1a001d70:	d012      	beq.n	1a001d98 <Chip_SetupCoreClock+0xcc>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001d72:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001d76:	62bb      	str	r3, [r7, #40]	; 0x28
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001d78:	bf00      	nop
1a001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001d7c:	1e5a      	subs	r2, r3, #1
1a001d7e:	62ba      	str	r2, [r7, #40]	; 0x28
1a001d80:	2b00      	cmp	r3, #0
1a001d82:	d1fa      	bne.n	1a001d7a <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a001d84:	68bb      	ldr	r3, [r7, #8]
1a001d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001d8a:	60bb      	str	r3, [r7, #8]
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
1a001d8c:	f107 0308 	add.w	r3, r7, #8
1a001d90:	4618      	mov	r0, r3
1a001d92:	f7ff ff65 	bl	1a001c60 <Chip_Clock_SetupMainPLL>
1a001d96:	e013      	b.n	1a001dc0 <Chip_SetupCoreClock+0xf4>
	} else if (pdivide) {
1a001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001d9a:	2b00      	cmp	r3, #0
1a001d9c:	d010      	beq.n	1a001dc0 <Chip_SetupCoreClock+0xf4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001d9e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001da2:	62bb      	str	r3, [r7, #40]	; 0x28
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001da4:	bf00      	nop
1a001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001da8:	1e5a      	subs	r2, r3, #1
1a001daa:	62ba      	str	r2, [r7, #40]	; 0x28
1a001dac:	2b00      	cmp	r3, #0
1a001dae:	d1fa      	bne.n	1a001da6 <Chip_SetupCoreClock+0xda>
		ppll.psel--;
1a001db0:	697b      	ldr	r3, [r7, #20]
1a001db2:	3b01      	subs	r3, #1
1a001db4:	617b      	str	r3, [r7, #20]
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
1a001db6:	f107 0308 	add.w	r3, r7, #8
1a001dba:	4618      	mov	r0, r3
1a001dbc:	f7ff ff50 	bl	1a001c60 <Chip_Clock_SetupMainPLL>
	}

	if (setbase) {
1a001dc0:	79bb      	ldrb	r3, [r7, #6]
1a001dc2:	2b00      	cmp	r3, #0
1a001dc4:	d01e      	beq.n	1a001e04 <Chip_SetupCoreClock+0x138>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001dc6:	2300      	movs	r3, #0
1a001dc8:	637b      	str	r3, [r7, #52]	; 0x34
1a001dca:	e018      	b.n	1a001dfe <Chip_SetupCoreClock+0x132>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001dcc:	4a10      	ldr	r2, [pc, #64]	; (1a001e10 <Chip_SetupCoreClock+0x144>)
1a001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001dd0:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
1a001dd4:	4a0e      	ldr	r2, [pc, #56]	; (1a001e10 <Chip_SetupCoreClock+0x144>)
1a001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001dd8:	009b      	lsls	r3, r3, #2
1a001dda:	4413      	add	r3, r2
1a001ddc:	7859      	ldrb	r1, [r3, #1]
1a001dde:	4a0c      	ldr	r2, [pc, #48]	; (1a001e10 <Chip_SetupCoreClock+0x144>)
1a001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001de2:	009b      	lsls	r3, r3, #2
1a001de4:	4413      	add	r3, r2
1a001de6:	789c      	ldrb	r4, [r3, #2]
1a001de8:	4a09      	ldr	r2, [pc, #36]	; (1a001e10 <Chip_SetupCoreClock+0x144>)
1a001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001dec:	009b      	lsls	r3, r3, #2
1a001dee:	4413      	add	r3, r2
1a001df0:	78db      	ldrb	r3, [r3, #3]
1a001df2:	4622      	mov	r2, r4
1a001df4:	f7ff fdf4 	bl	1a0019e0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001dfa:	3301      	adds	r3, #1
1a001dfc:	637b      	str	r3, [r7, #52]	; 0x34
1a001dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a001e00:	2b11      	cmp	r3, #17
1a001e02:	d9e3      	bls.n	1a001dcc <Chip_SetupCoreClock+0x100>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001e04:	bf00      	nop
1a001e06:	373c      	adds	r7, #60	; 0x3c
1a001e08:	46bd      	mov	sp, r7
1a001e0a:	bd90      	pop	{r4, r7, pc}
1a001e0c:	068e7780 	.word	0x068e7780
1a001e10:	1a002fd8 	.word	0x1a002fd8

1a001e14 <Chip_SSP_SetFormat>:
{
1a001e14:	b480      	push	{r7}
1a001e16:	b085      	sub	sp, #20
1a001e18:	af00      	add	r7, sp, #0
1a001e1a:	60f8      	str	r0, [r7, #12]
1a001e1c:	60b9      	str	r1, [r7, #8]
1a001e1e:	607a      	str	r2, [r7, #4]
1a001e20:	603b      	str	r3, [r7, #0]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001e22:	68fb      	ldr	r3, [r7, #12]
1a001e24:	681b      	ldr	r3, [r3, #0]
1a001e26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
1a001e2a:	68bb      	ldr	r3, [r7, #8]
1a001e2c:	431a      	orrs	r2, r3
1a001e2e:	687b      	ldr	r3, [r7, #4]
1a001e30:	431a      	orrs	r2, r3
1a001e32:	683b      	ldr	r3, [r7, #0]
1a001e34:	431a      	orrs	r2, r3
1a001e36:	68fb      	ldr	r3, [r7, #12]
1a001e38:	601a      	str	r2, [r3, #0]
}
1a001e3a:	bf00      	nop
1a001e3c:	3714      	adds	r7, #20
1a001e3e:	46bd      	mov	sp, r7
1a001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001e44:	4770      	bx	lr

1a001e46 <Chip_SSP_Set_Mode>:
{
1a001e46:	b480      	push	{r7}
1a001e48:	b083      	sub	sp, #12
1a001e4a:	af00      	add	r7, sp, #0
1a001e4c:	6078      	str	r0, [r7, #4]
1a001e4e:	6039      	str	r1, [r7, #0]
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001e50:	687b      	ldr	r3, [r7, #4]
1a001e52:	685b      	ldr	r3, [r3, #4]
1a001e54:	f023 0204 	bic.w	r2, r3, #4
1a001e58:	683b      	ldr	r3, [r7, #0]
1a001e5a:	431a      	orrs	r2, r3
1a001e5c:	687b      	ldr	r3, [r7, #4]
1a001e5e:	605a      	str	r2, [r3, #4]
}
1a001e60:	bf00      	nop
1a001e62:	370c      	adds	r7, #12
1a001e64:	46bd      	mov	sp, r7
1a001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001e6a:	4770      	bx	lr

1a001e6c <Chip_SSP_GetClockIndex>:
	}
}

/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
1a001e6c:	b480      	push	{r7}
1a001e6e:	b085      	sub	sp, #20
1a001e70:	af00      	add	r7, sp, #0
1a001e72:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001e74:	687b      	ldr	r3, [r7, #4]
1a001e76:	4a07      	ldr	r2, [pc, #28]	; (1a001e94 <Chip_SSP_GetClockIndex+0x28>)
1a001e78:	4293      	cmp	r3, r2
1a001e7a:	d102      	bne.n	1a001e82 <Chip_SSP_GetClockIndex+0x16>
		clkSSP = CLK_MX_SSP1;
1a001e7c:	23a5      	movs	r3, #165	; 0xa5
1a001e7e:	81fb      	strh	r3, [r7, #14]
1a001e80:	e001      	b.n	1a001e86 <Chip_SSP_GetClockIndex+0x1a>
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001e82:	2383      	movs	r3, #131	; 0x83
1a001e84:	81fb      	strh	r3, [r7, #14]
	}

	return clkSSP;
1a001e86:	89fb      	ldrh	r3, [r7, #14]
}
1a001e88:	4618      	mov	r0, r3
1a001e8a:	3714      	adds	r7, #20
1a001e8c:	46bd      	mov	sp, r7
1a001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001e92:	4770      	bx	lr
1a001e94:	400c5000 	.word	0x400c5000

1a001e98 <Chip_SSP_GetPeriphClockIndex>:

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
1a001e98:	b480      	push	{r7}
1a001e9a:	b085      	sub	sp, #20
1a001e9c:	af00      	add	r7, sp, #0
1a001e9e:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001ea0:	687b      	ldr	r3, [r7, #4]
1a001ea2:	4a08      	ldr	r2, [pc, #32]	; (1a001ec4 <Chip_SSP_GetPeriphClockIndex+0x2c>)
1a001ea4:	4293      	cmp	r3, r2
1a001ea6:	d103      	bne.n	1a001eb0 <Chip_SSP_GetPeriphClockIndex+0x18>
		clkSSP = CLK_APB2_SSP1;
1a001ea8:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
1a001eac:	81fb      	strh	r3, [r7, #14]
1a001eae:	e002      	b.n	1a001eb6 <Chip_SSP_GetPeriphClockIndex+0x1e>
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001eb0:	f240 2302 	movw	r3, #514	; 0x202
1a001eb4:	81fb      	strh	r3, [r7, #14]
	}

	return clkSSP;
1a001eb6:	89fb      	ldrh	r3, [r7, #14]
}
1a001eb8:	4618      	mov	r0, r3
1a001eba:	3714      	adds	r7, #20
1a001ebc:	46bd      	mov	sp, r7
1a001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001ec2:	4770      	bx	lr
1a001ec4:	400c5000 	.word	0x400c5000

1a001ec8 <Chip_SSP_SetClockRate>:
 * Public functions
 ****************************************************************************/

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
1a001ec8:	b480      	push	{r7}
1a001eca:	b087      	sub	sp, #28
1a001ecc:	af00      	add	r7, sp, #0
1a001ece:	60f8      	str	r0, [r7, #12]
1a001ed0:	60b9      	str	r1, [r7, #8]
1a001ed2:	607a      	str	r2, [r7, #4]
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001ed4:	68fb      	ldr	r3, [r7, #12]
1a001ed6:	681b      	ldr	r3, [r3, #0]
1a001ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1a001edc:	617b      	str	r3, [r7, #20]
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001ede:	68bb      	ldr	r3, [r7, #8]
1a001ee0:	021b      	lsls	r3, r3, #8
1a001ee2:	b29a      	uxth	r2, r3
1a001ee4:	697b      	ldr	r3, [r7, #20]
1a001ee6:	431a      	orrs	r2, r3
1a001ee8:	68fb      	ldr	r3, [r7, #12]
1a001eea:	601a      	str	r2, [r3, #0]
	pSSP->CPSR = prescale;
1a001eec:	68fb      	ldr	r3, [r7, #12]
1a001eee:	687a      	ldr	r2, [r7, #4]
1a001ef0:	611a      	str	r2, [r3, #16]
}
1a001ef2:	bf00      	nop
1a001ef4:	371c      	adds	r7, #28
1a001ef6:	46bd      	mov	sp, r7
1a001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001efc:	4770      	bx	lr

1a001efe <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001efe:	b580      	push	{r7, lr}
1a001f00:	b086      	sub	sp, #24
1a001f02:	af00      	add	r7, sp, #0
1a001f04:	6078      	str	r0, [r7, #4]
1a001f06:	6039      	str	r1, [r7, #0]
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001f08:	6878      	ldr	r0, [r7, #4]
1a001f0a:	f7ff ffc5 	bl	1a001e98 <Chip_SSP_GetPeriphClockIndex>
1a001f0e:	4603      	mov	r3, r0
1a001f10:	4618      	mov	r0, r3
1a001f12:	f7ff fe47 	bl	1a001ba4 <Chip_Clock_GetRate>
1a001f16:	60b8      	str	r0, [r7, #8]

	cr0_div = 0;
1a001f18:	2300      	movs	r3, #0
1a001f1a:	617b      	str	r3, [r7, #20]
	cmp_clk = 0xFFFFFFFF;
1a001f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001f20:	613b      	str	r3, [r7, #16]
	prescale = 2;
1a001f22:	2302      	movs	r3, #2
1a001f24:	60fb      	str	r3, [r7, #12]

	while (cmp_clk > bitRate) {
1a001f26:	e017      	b.n	1a001f58 <Chip_SSP_SetBitRate+0x5a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001f28:	697b      	ldr	r3, [r7, #20]
1a001f2a:	3301      	adds	r3, #1
1a001f2c:	68fa      	ldr	r2, [r7, #12]
1a001f2e:	fb02 f303 	mul.w	r3, r2, r3
1a001f32:	68ba      	ldr	r2, [r7, #8]
1a001f34:	fbb2 f3f3 	udiv	r3, r2, r3
1a001f38:	613b      	str	r3, [r7, #16]
		if (cmp_clk > bitRate) {
1a001f3a:	693a      	ldr	r2, [r7, #16]
1a001f3c:	683b      	ldr	r3, [r7, #0]
1a001f3e:	429a      	cmp	r2, r3
1a001f40:	d90a      	bls.n	1a001f58 <Chip_SSP_SetBitRate+0x5a>
			cr0_div++;
1a001f42:	697b      	ldr	r3, [r7, #20]
1a001f44:	3301      	adds	r3, #1
1a001f46:	617b      	str	r3, [r7, #20]
			if (cr0_div > 0xFF) {
1a001f48:	697b      	ldr	r3, [r7, #20]
1a001f4a:	2bff      	cmp	r3, #255	; 0xff
1a001f4c:	d904      	bls.n	1a001f58 <Chip_SSP_SetBitRate+0x5a>
				cr0_div = 0;
1a001f4e:	2300      	movs	r3, #0
1a001f50:	617b      	str	r3, [r7, #20]
				prescale += 2;
1a001f52:	68fb      	ldr	r3, [r7, #12]
1a001f54:	3302      	adds	r3, #2
1a001f56:	60fb      	str	r3, [r7, #12]
	while (cmp_clk > bitRate) {
1a001f58:	693a      	ldr	r2, [r7, #16]
1a001f5a:	683b      	ldr	r3, [r7, #0]
1a001f5c:	429a      	cmp	r2, r3
1a001f5e:	d8e3      	bhi.n	1a001f28 <Chip_SSP_SetBitRate+0x2a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001f60:	68fa      	ldr	r2, [r7, #12]
1a001f62:	6979      	ldr	r1, [r7, #20]
1a001f64:	6878      	ldr	r0, [r7, #4]
1a001f66:	f7ff ffaf 	bl	1a001ec8 <Chip_SSP_SetClockRate>
}
1a001f6a:	bf00      	nop
1a001f6c:	3718      	adds	r7, #24
1a001f6e:	46bd      	mov	sp, r7
1a001f70:	bd80      	pop	{r7, pc}
1a001f72:	Address 0x000000001a001f72 is out of bounds.


1a001f74 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001f74:	b580      	push	{r7, lr}
1a001f76:	b082      	sub	sp, #8
1a001f78:	af00      	add	r7, sp, #0
1a001f7a:	6078      	str	r0, [r7, #4]
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001f7c:	6878      	ldr	r0, [r7, #4]
1a001f7e:	f7ff ff75 	bl	1a001e6c <Chip_SSP_GetClockIndex>
1a001f82:	4603      	mov	r3, r0
1a001f84:	4618      	mov	r0, r3
1a001f86:	f7ff fddd 	bl	1a001b44 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001f8a:	6878      	ldr	r0, [r7, #4]
1a001f8c:	f7ff ff84 	bl	1a001e98 <Chip_SSP_GetPeriphClockIndex>
1a001f90:	4603      	mov	r3, r0
1a001f92:	4618      	mov	r0, r3
1a001f94:	f7ff fdd6 	bl	1a001b44 <Chip_Clock_Enable>

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
1a001f98:	2100      	movs	r1, #0
1a001f9a:	6878      	ldr	r0, [r7, #4]
1a001f9c:	f7ff ff53 	bl	1a001e46 <Chip_SSP_Set_Mode>
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
1a001fa0:	2300      	movs	r3, #0
1a001fa2:	2200      	movs	r2, #0
1a001fa4:	2107      	movs	r1, #7
1a001fa6:	6878      	ldr	r0, [r7, #4]
1a001fa8:	f7ff ff34 	bl	1a001e14 <Chip_SSP_SetFormat>
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001fac:	4903      	ldr	r1, [pc, #12]	; (1a001fbc <Chip_SSP_Init+0x48>)
1a001fae:	6878      	ldr	r0, [r7, #4]
1a001fb0:	f7ff ffa5 	bl	1a001efe <Chip_SSP_SetBitRate>
}
1a001fb4:	bf00      	nop
1a001fb6:	3708      	adds	r7, #8
1a001fb8:	46bd      	mov	sp, r7
1a001fba:	bd80      	pop	{r7, pc}
1a001fbc:	000186a0 	.word	0x000186a0

1a001fc0 <SCB_GetFPUType>:
   - \b  0: No FPU
   - \b  1: Single precision FPU
   - \b  2: Double + Single precision FPU
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
1a001fc0:	b480      	push	{r7}
1a001fc2:	b083      	sub	sp, #12
1a001fc4:	af00      	add	r7, sp, #0
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001fc6:	4b08      	ldr	r3, [pc, #32]	; (1a001fe8 <SCB_GetFPUType+0x28>)
1a001fc8:	691b      	ldr	r3, [r3, #16]
1a001fca:	607b      	str	r3, [r7, #4]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001fcc:	687b      	ldr	r3, [r7, #4]
1a001fce:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001fd2:	2b20      	cmp	r3, #32
1a001fd4:	d101      	bne.n	1a001fda <SCB_GetFPUType+0x1a>
  {
    return 1U;           /* Single precision FPU */
1a001fd6:	2301      	movs	r3, #1
1a001fd8:	e000      	b.n	1a001fdc <SCB_GetFPUType+0x1c>
  }
  else
  {
    return 0U;           /* No FPU */
1a001fda:	2300      	movs	r3, #0
  }
}
1a001fdc:	4618      	mov	r0, r3
1a001fde:	370c      	adds	r7, #12
1a001fe0:	46bd      	mov	sp, r7
1a001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001fe6:	4770      	bx	lr
1a001fe8:	e000ef30 	.word	0xe000ef30

1a001fec <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001fec:	b580      	push	{r7, lr}
1a001fee:	af00      	add	r7, sp, #0
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001ff0:	4b0a      	ldr	r3, [pc, #40]	; (1a00201c <SystemInit+0x30>)
1a001ff2:	4a0b      	ldr	r2, [pc, #44]	; (1a002020 <SystemInit+0x34>)
1a001ff4:	609a      	str	r2, [r3, #8]

   if (SCB_GetFPUType() > 0)
1a001ff6:	f7ff ffe3 	bl	1a001fc0 <SCB_GetFPUType>
1a001ffa:	4603      	mov	r3, r0
1a001ffc:	2b00      	cmp	r3, #0
1a001ffe:	d007      	beq.n	1a002010 <SystemInit+0x24>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002000:	4b06      	ldr	r3, [pc, #24]	; (1a00201c <SystemInit+0x30>)
1a002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1a002006:	4a05      	ldr	r2, [pc, #20]	; (1a00201c <SystemInit+0x30>)
1a002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a002010:	f7fe fdce 	bl	1a000bb0 <Board_SystemInit>
   Board_Init();
1a002014:	f7fe fcfe 	bl	1a000a14 <Board_Init>
#endif
}
1a002018:	bf00      	nop
1a00201a:	bd80      	pop	{r7, pc}
1a00201c:	e000ed00 	.word	0xe000ed00
1a002020:	1a000000 	.word	0x1a000000

1a002024 <cyclesCounterInit>:
/**
 * Funcion para configurar los registros para contar ciclos de clock.
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
1a002024:	b480      	push	{r7}
1a002026:	b083      	sub	sp, #12
1a002028:	af00      	add	r7, sp, #0
1a00202a:	6078      	str	r0, [r7, #4]
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00202c:	4a07      	ldr	r2, [pc, #28]	; (1a00204c <cyclesCounterInit+0x28>)
1a00202e:	687b      	ldr	r3, [r7, #4]
1a002030:	6013      	str	r3, [r2, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002032:	4b07      	ldr	r3, [pc, #28]	; (1a002050 <cyclesCounterInit+0x2c>)
1a002034:	681b      	ldr	r3, [r3, #0]
1a002036:	4a06      	ldr	r2, [pc, #24]	; (1a002050 <cyclesCounterInit+0x2c>)
1a002038:	f043 0301 	orr.w	r3, r3, #1
1a00203c:	6013      	str	r3, [r2, #0]
   return TRUE;
1a00203e:	2301      	movs	r3, #1
}
1a002040:	4618      	mov	r0, r3
1a002042:	370c      	adds	r7, #12
1a002044:	46bd      	mov	sp, r7
1a002046:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00204a:	4770      	bx	lr
1a00204c:	1000003c 	.word	0x1000003c
1a002050:	e0001000 	.word	0xe0001000

1a002054 <Chip_SCU_PinMuxSet>:
{
1a002054:	b480      	push	{r7}
1a002056:	b083      	sub	sp, #12
1a002058:	af00      	add	r7, sp, #0
1a00205a:	4603      	mov	r3, r0
1a00205c:	71fb      	strb	r3, [r7, #7]
1a00205e:	460b      	mov	r3, r1
1a002060:	71bb      	strb	r3, [r7, #6]
1a002062:	4613      	mov	r3, r2
1a002064:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002066:	4807      	ldr	r0, [pc, #28]	; (1a002084 <Chip_SCU_PinMuxSet+0x30>)
1a002068:	79f9      	ldrb	r1, [r7, #7]
1a00206a:	79bb      	ldrb	r3, [r7, #6]
1a00206c:	88ba      	ldrh	r2, [r7, #4]
1a00206e:	0149      	lsls	r1, r1, #5
1a002070:	440b      	add	r3, r1
1a002072:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a002076:	bf00      	nop
1a002078:	370c      	adds	r7, #12
1a00207a:	46bd      	mov	sp, r7
1a00207c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002080:	4770      	bx	lr
1a002082:	bf00      	nop
1a002084:	40086000 	.word	0x40086000

1a002088 <Chip_SCU_PinMux>:
{
1a002088:	b590      	push	{r4, r7, lr}
1a00208a:	b083      	sub	sp, #12
1a00208c:	af00      	add	r7, sp, #0
1a00208e:	4604      	mov	r4, r0
1a002090:	4608      	mov	r0, r1
1a002092:	4611      	mov	r1, r2
1a002094:	461a      	mov	r2, r3
1a002096:	4623      	mov	r3, r4
1a002098:	71fb      	strb	r3, [r7, #7]
1a00209a:	4603      	mov	r3, r0
1a00209c:	71bb      	strb	r3, [r7, #6]
1a00209e:	460b      	mov	r3, r1
1a0020a0:	80bb      	strh	r3, [r7, #4]
1a0020a2:	4613      	mov	r3, r2
1a0020a4:	70fb      	strb	r3, [r7, #3]
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0020a6:	78fb      	ldrb	r3, [r7, #3]
1a0020a8:	b29a      	uxth	r2, r3
1a0020aa:	88bb      	ldrh	r3, [r7, #4]
1a0020ac:	4313      	orrs	r3, r2
1a0020ae:	b29a      	uxth	r2, r3
1a0020b0:	79b9      	ldrb	r1, [r7, #6]
1a0020b2:	79fb      	ldrb	r3, [r7, #7]
1a0020b4:	4618      	mov	r0, r3
1a0020b6:	f7ff ffcd 	bl	1a002054 <Chip_SCU_PinMuxSet>
}
1a0020ba:	bf00      	nop
1a0020bc:	370c      	adds	r7, #12
1a0020be:	46bd      	mov	sp, r7
1a0020c0:	bd90      	pop	{r4, r7, pc}

1a0020c2 <Chip_UART_TXEnable>:
{
1a0020c2:	b480      	push	{r7}
1a0020c4:	b083      	sub	sp, #12
1a0020c6:	af00      	add	r7, sp, #0
1a0020c8:	6078      	str	r0, [r7, #4]
    pUART->TER2 = UART_TER2_TXEN;
1a0020ca:	687b      	ldr	r3, [r7, #4]
1a0020cc:	2201      	movs	r2, #1
1a0020ce:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a0020d0:	bf00      	nop
1a0020d2:	370c      	adds	r7, #12
1a0020d4:	46bd      	mov	sp, r7
1a0020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0020da:	4770      	bx	lr

1a0020dc <Chip_UART_SendByte>:
{
1a0020dc:	b480      	push	{r7}
1a0020de:	b083      	sub	sp, #12
1a0020e0:	af00      	add	r7, sp, #0
1a0020e2:	6078      	str	r0, [r7, #4]
1a0020e4:	460b      	mov	r3, r1
1a0020e6:	70fb      	strb	r3, [r7, #3]
	pUART->THR = (uint32_t) data;
1a0020e8:	78fa      	ldrb	r2, [r7, #3]
1a0020ea:	687b      	ldr	r3, [r7, #4]
1a0020ec:	601a      	str	r2, [r3, #0]
}
1a0020ee:	bf00      	nop
1a0020f0:	370c      	adds	r7, #12
1a0020f2:	46bd      	mov	sp, r7
1a0020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0020f8:	4770      	bx	lr

1a0020fa <Chip_UART_ReadByte>:
{
1a0020fa:	b480      	push	{r7}
1a0020fc:	b083      	sub	sp, #12
1a0020fe:	af00      	add	r7, sp, #0
1a002100:	6078      	str	r0, [r7, #4]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002102:	687b      	ldr	r3, [r7, #4]
1a002104:	681b      	ldr	r3, [r3, #0]
1a002106:	b2db      	uxtb	r3, r3
}
1a002108:	4618      	mov	r0, r3
1a00210a:	370c      	adds	r7, #12
1a00210c:	46bd      	mov	sp, r7
1a00210e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002112:	4770      	bx	lr

1a002114 <Chip_UART_SetupFIFOS>:
{
1a002114:	b480      	push	{r7}
1a002116:	b083      	sub	sp, #12
1a002118:	af00      	add	r7, sp, #0
1a00211a:	6078      	str	r0, [r7, #4]
1a00211c:	6039      	str	r1, [r7, #0]
	pUART->FCR = fcr;
1a00211e:	687b      	ldr	r3, [r7, #4]
1a002120:	683a      	ldr	r2, [r7, #0]
1a002122:	609a      	str	r2, [r3, #8]
}
1a002124:	bf00      	nop
1a002126:	370c      	adds	r7, #12
1a002128:	46bd      	mov	sp, r7
1a00212a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00212e:	4770      	bx	lr

1a002130 <Chip_UART_ReadLineStatus>:
 * @return	Line Status register (status)
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
1a002130:	b480      	push	{r7}
1a002132:	b083      	sub	sp, #12
1a002134:	af00      	add	r7, sp, #0
1a002136:	6078      	str	r0, [r7, #4]
	return pUART->LSR;
1a002138:	687b      	ldr	r3, [r7, #4]
1a00213a:	695b      	ldr	r3, [r3, #20]
}
1a00213c:	4618      	mov	r0, r3
1a00213e:	370c      	adds	r7, #12
1a002140:	46bd      	mov	sp, r7
1a002142:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002146:	4770      	bx	lr

1a002148 <Chip_UART_SetRS485Flags>:
 * @return	Nothing
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
1a002148:	b480      	push	{r7}
1a00214a:	b083      	sub	sp, #12
1a00214c:	af00      	add	r7, sp, #0
1a00214e:	6078      	str	r0, [r7, #4]
1a002150:	6039      	str	r1, [r7, #0]
	pUART->RS485CTRL |= ctrl;
1a002152:	687b      	ldr	r3, [r7, #4]
1a002154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1a002156:	683b      	ldr	r3, [r7, #0]
1a002158:	431a      	orrs	r2, r3
1a00215a:	687b      	ldr	r3, [r7, #4]
1a00215c:	64da      	str	r2, [r3, #76]	; 0x4c
}
1a00215e:	bf00      	nop
1a002160:	370c      	adds	r7, #12
1a002162:	46bd      	mov	sp, r7
1a002164:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002168:	4770      	bx	lr
1a00216a:	Address 0x000000001a00216a is out of bounds.


1a00216c <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}

// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
1a00216c:	b580      	push	{r7, lr}
1a00216e:	b082      	sub	sp, #8
1a002170:	af00      	add	r7, sp, #0
1a002172:	4603      	mov	r3, r0
1a002174:	71fb      	strb	r3, [r7, #7]
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a002176:	79fa      	ldrb	r2, [r7, #7]
1a002178:	4909      	ldr	r1, [pc, #36]	; (1a0021a0 <uartTxReady+0x34>)
1a00217a:	4613      	mov	r3, r2
1a00217c:	005b      	lsls	r3, r3, #1
1a00217e:	4413      	add	r3, r2
1a002180:	009b      	lsls	r3, r3, #2
1a002182:	440b      	add	r3, r1
1a002184:	681b      	ldr	r3, [r3, #0]
1a002186:	4618      	mov	r0, r3
1a002188:	f7ff ffd2 	bl	1a002130 <Chip_UART_ReadLineStatus>
1a00218c:	4603      	mov	r3, r0
1a00218e:	b2db      	uxtb	r3, r3
1a002190:	f003 0320 	and.w	r3, r3, #32
1a002194:	b2db      	uxtb	r3, r3
}
1a002196:	4618      	mov	r0, r3
1a002198:	3708      	adds	r7, #8
1a00219a:	46bd      	mov	sp, r7
1a00219c:	bd80      	pop	{r7, pc}
1a00219e:	bf00      	nop
1a0021a0:	1a003020 	.word	0x1a003020

1a0021a4 <uartTxWrite>:
   }
}

// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
1a0021a4:	b580      	push	{r7, lr}
1a0021a6:	b082      	sub	sp, #8
1a0021a8:	af00      	add	r7, sp, #0
1a0021aa:	4603      	mov	r3, r0
1a0021ac:	460a      	mov	r2, r1
1a0021ae:	71fb      	strb	r3, [r7, #7]
1a0021b0:	4613      	mov	r3, r2
1a0021b2:	71bb      	strb	r3, [r7, #6]
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0021b4:	79fa      	ldrb	r2, [r7, #7]
1a0021b6:	4908      	ldr	r1, [pc, #32]	; (1a0021d8 <uartTxWrite+0x34>)
1a0021b8:	4613      	mov	r3, r2
1a0021ba:	005b      	lsls	r3, r3, #1
1a0021bc:	4413      	add	r3, r2
1a0021be:	009b      	lsls	r3, r3, #2
1a0021c0:	440b      	add	r3, r1
1a0021c2:	681b      	ldr	r3, [r3, #0]
1a0021c4:	79ba      	ldrb	r2, [r7, #6]
1a0021c6:	4611      	mov	r1, r2
1a0021c8:	4618      	mov	r0, r3
1a0021ca:	f7ff ff87 	bl	1a0020dc <Chip_UART_SendByte>
}
1a0021ce:	bf00      	nop
1a0021d0:	3708      	adds	r7, #8
1a0021d2:	46bd      	mov	sp, r7
1a0021d4:	bd80      	pop	{r7, pc}
1a0021d6:	bf00      	nop
1a0021d8:	1a003020 	.word	0x1a003020

1a0021dc <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0021dc:	b590      	push	{r4, r7, lr}
1a0021de:	b083      	sub	sp, #12
1a0021e0:	af00      	add	r7, sp, #0
1a0021e2:	4603      	mov	r3, r0
1a0021e4:	6039      	str	r1, [r7, #0]
1a0021e6:	71fb      	strb	r3, [r7, #7]
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0021e8:	79fa      	ldrb	r2, [r7, #7]
1a0021ea:	4943      	ldr	r1, [pc, #268]	; (1a0022f8 <uartInit+0x11c>)
1a0021ec:	4613      	mov	r3, r2
1a0021ee:	005b      	lsls	r3, r3, #1
1a0021f0:	4413      	add	r3, r2
1a0021f2:	009b      	lsls	r3, r3, #2
1a0021f4:	440b      	add	r3, r1
1a0021f6:	681b      	ldr	r3, [r3, #0]
1a0021f8:	4618      	mov	r0, r3
1a0021fa:	f7fe fe17 	bl	1a000e2c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0021fe:	79fa      	ldrb	r2, [r7, #7]
1a002200:	493d      	ldr	r1, [pc, #244]	; (1a0022f8 <uartInit+0x11c>)
1a002202:	4613      	mov	r3, r2
1a002204:	005b      	lsls	r3, r3, #1
1a002206:	4413      	add	r3, r2
1a002208:	009b      	lsls	r3, r3, #2
1a00220a:	440b      	add	r3, r1
1a00220c:	681b      	ldr	r3, [r3, #0]
1a00220e:	6839      	ldr	r1, [r7, #0]
1a002210:	4618      	mov	r0, r3
1a002212:	f7fe fe4f 	bl	1a000eb4 <Chip_UART_SetBaud>
   
   //Chip_UART_ConfigData(LPC_UART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT));
   
   // Restart FIFOS using FCR (FIFO Control Register).
   // Set Enable, Reset content, set trigger level
   Chip_UART_SetupFIFOS( lpcUarts[uart].uartAddr,
1a002216:	79fa      	ldrb	r2, [r7, #7]
1a002218:	4937      	ldr	r1, [pc, #220]	; (1a0022f8 <uartInit+0x11c>)
1a00221a:	4613      	mov	r3, r2
1a00221c:	005b      	lsls	r3, r3, #1
1a00221e:	4413      	add	r3, r2
1a002220:	009b      	lsls	r3, r3, #2
1a002222:	440b      	add	r3, r1
1a002224:	681b      	ldr	r3, [r3, #0]
1a002226:	2107      	movs	r1, #7
1a002228:	4618      	mov	r0, r3
1a00222a:	f7ff ff73 	bl	1a002114 <Chip_UART_SetupFIFOS>
                         UART_FCR_TRG_LEV0 );
	/*Chip_UART_SetupFIFOS(lpcUarts[uart].uartAddr, 
                          (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));*/
   
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a00222e:	79fa      	ldrb	r2, [r7, #7]
1a002230:	4931      	ldr	r1, [pc, #196]	; (1a0022f8 <uartInit+0x11c>)
1a002232:	4613      	mov	r3, r2
1a002234:	005b      	lsls	r3, r3, #1
1a002236:	4413      	add	r3, r2
1a002238:	009b      	lsls	r3, r3, #2
1a00223a:	440b      	add	r3, r1
1a00223c:	681b      	ldr	r3, [r3, #0]
1a00223e:	4618      	mov	r0, r3
1a002240:	f7ff ff5b 	bl	1a0020fa <Chip_UART_ReadByte>
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
1a002244:	79fa      	ldrb	r2, [r7, #7]
1a002246:	492c      	ldr	r1, [pc, #176]	; (1a0022f8 <uartInit+0x11c>)
1a002248:	4613      	mov	r3, r2
1a00224a:	005b      	lsls	r3, r3, #1
1a00224c:	4413      	add	r3, r2
1a00224e:	009b      	lsls	r3, r3, #2
1a002250:	440b      	add	r3, r1
1a002252:	681b      	ldr	r3, [r3, #0]
1a002254:	4618      	mov	r0, r3
1a002256:	f7ff ff34 	bl	1a0020c2 <Chip_UART_TXEnable>
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00225a:	79fa      	ldrb	r2, [r7, #7]
1a00225c:	4926      	ldr	r1, [pc, #152]	; (1a0022f8 <uartInit+0x11c>)
1a00225e:	4613      	mov	r3, r2
1a002260:	005b      	lsls	r3, r3, #1
1a002262:	4413      	add	r3, r2
1a002264:	009b      	lsls	r3, r3, #2
1a002266:	440b      	add	r3, r1
1a002268:	3304      	adds	r3, #4
1a00226a:	7818      	ldrb	r0, [r3, #0]
1a00226c:	79fa      	ldrb	r2, [r7, #7]
1a00226e:	4922      	ldr	r1, [pc, #136]	; (1a0022f8 <uartInit+0x11c>)
1a002270:	4613      	mov	r3, r2
1a002272:	005b      	lsls	r3, r3, #1
1a002274:	4413      	add	r3, r2
1a002276:	009b      	lsls	r3, r3, #2
1a002278:	440b      	add	r3, r1
1a00227a:	3305      	adds	r3, #5
1a00227c:	781c      	ldrb	r4, [r3, #0]
1a00227e:	79fa      	ldrb	r2, [r7, #7]
1a002280:	491d      	ldr	r1, [pc, #116]	; (1a0022f8 <uartInit+0x11c>)
1a002282:	4613      	mov	r3, r2
1a002284:	005b      	lsls	r3, r3, #1
1a002286:	4413      	add	r3, r2
1a002288:	009b      	lsls	r3, r3, #2
1a00228a:	440b      	add	r3, r1
1a00228c:	3306      	adds	r3, #6
1a00228e:	781b      	ldrb	r3, [r3, #0]
1a002290:	2218      	movs	r2, #24
1a002292:	4621      	mov	r1, r4
1a002294:	f7ff fef8 	bl	1a002088 <Chip_SCU_PinMux>
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002298:	79fa      	ldrb	r2, [r7, #7]
1a00229a:	4917      	ldr	r1, [pc, #92]	; (1a0022f8 <uartInit+0x11c>)
1a00229c:	4613      	mov	r3, r2
1a00229e:	005b      	lsls	r3, r3, #1
1a0022a0:	4413      	add	r3, r2
1a0022a2:	009b      	lsls	r3, r3, #2
1a0022a4:	440b      	add	r3, r1
1a0022a6:	3307      	adds	r3, #7
1a0022a8:	7818      	ldrb	r0, [r3, #0]
1a0022aa:	79fa      	ldrb	r2, [r7, #7]
1a0022ac:	4912      	ldr	r1, [pc, #72]	; (1a0022f8 <uartInit+0x11c>)
1a0022ae:	4613      	mov	r3, r2
1a0022b0:	005b      	lsls	r3, r3, #1
1a0022b2:	4413      	add	r3, r2
1a0022b4:	009b      	lsls	r3, r3, #2
1a0022b6:	440b      	add	r3, r1
1a0022b8:	3308      	adds	r3, #8
1a0022ba:	781c      	ldrb	r4, [r3, #0]
1a0022bc:	79fa      	ldrb	r2, [r7, #7]
1a0022be:	490e      	ldr	r1, [pc, #56]	; (1a0022f8 <uartInit+0x11c>)
1a0022c0:	4613      	mov	r3, r2
1a0022c2:	005b      	lsls	r3, r3, #1
1a0022c4:	4413      	add	r3, r2
1a0022c6:	009b      	lsls	r3, r3, #2
1a0022c8:	440b      	add	r3, r1
1a0022ca:	3309      	adds	r3, #9
1a0022cc:	781b      	ldrb	r3, [r3, #0]
1a0022ce:	22d0      	movs	r2, #208	; 0xd0
1a0022d0:	4621      	mov	r1, r4
1a0022d2:	f7ff fed9 	bl	1a002088 <Chip_SCU_PinMux>
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0022d6:	79fb      	ldrb	r3, [r7, #7]
1a0022d8:	2b01      	cmp	r3, #1
1a0022da:	d109      	bne.n	1a0022f0 <uartInit+0x114>
      // Specific RS485 Flags
      Chip_UART_SetRS485Flags( LPC_USART0,
1a0022dc:	2130      	movs	r1, #48	; 0x30
1a0022de:	4807      	ldr	r0, [pc, #28]	; (1a0022fc <uartInit+0x120>)
1a0022e0:	f7ff ff32 	bl	1a002148 <Chip_UART_SetRS485Flags>
                               UART_RS485CTRL_DCTRL_EN |
                               UART_RS485CTRL_OINV_1     );
      // UARTn_DIR extra pin for RS485
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
1a0022e4:	2006      	movs	r0, #6
1a0022e6:	2102      	movs	r1, #2
1a0022e8:	2302      	movs	r3, #2
1a0022ea:	2218      	movs	r2, #24
1a0022ec:	f7ff fecc 	bl	1a002088 <Chip_SCU_PinMux>
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0022f0:	bf00      	nop
1a0022f2:	370c      	adds	r7, #12
1a0022f4:	46bd      	mov	sp, r7
1a0022f6:	bd90      	pop	{r4, r7, pc}
1a0022f8:	1a003020 	.word	0x1a003020
1a0022fc:	40081000 	.word	0x40081000

1a002300 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a002300:	b580      	push	{r7, lr}
1a002302:	b082      	sub	sp, #8
1a002304:	af00      	add	r7, sp, #0
1a002306:	4603      	mov	r3, r0
1a002308:	460a      	mov	r2, r1
1a00230a:	71fb      	strb	r3, [r7, #7]
1a00230c:	4613      	mov	r3, r2
1a00230e:	71bb      	strb	r3, [r7, #6]
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a002310:	bf00      	nop
1a002312:	79fb      	ldrb	r3, [r7, #7]
1a002314:	4618      	mov	r0, r3
1a002316:	f7ff ff29 	bl	1a00216c <uartTxReady>
1a00231a:	4603      	mov	r3, r0
1a00231c:	2b00      	cmp	r3, #0
1a00231e:	d0f8      	beq.n	1a002312 <uartWriteByte+0x12>
   // Send byte
   uartTxWrite( uart, value );
1a002320:	79ba      	ldrb	r2, [r7, #6]
1a002322:	79fb      	ldrb	r3, [r7, #7]
1a002324:	4611      	mov	r1, r2
1a002326:	4618      	mov	r0, r3
1a002328:	f7ff ff3c 	bl	1a0021a4 <uartTxWrite>
}
1a00232c:	bf00      	nop
1a00232e:	3708      	adds	r7, #8
1a002330:	46bd      	mov	sp, r7
1a002332:	bd80      	pop	{r7, pc}

1a002334 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002334:	b580      	push	{r7, lr}
1a002336:	b082      	sub	sp, #8
1a002338:	af00      	add	r7, sp, #0
1a00233a:	4603      	mov	r3, r0
1a00233c:	6039      	str	r1, [r7, #0]
1a00233e:	71fb      	strb	r3, [r7, #7]
   while( *str != 0 ) {
1a002340:	e009      	b.n	1a002356 <uartWriteString+0x22>
      uartWriteByte( uart, (uint8_t)*str );
1a002342:	683b      	ldr	r3, [r7, #0]
1a002344:	781a      	ldrb	r2, [r3, #0]
1a002346:	79fb      	ldrb	r3, [r7, #7]
1a002348:	4611      	mov	r1, r2
1a00234a:	4618      	mov	r0, r3
1a00234c:	f7ff ffd8 	bl	1a002300 <uartWriteByte>
      str++;
1a002350:	683b      	ldr	r3, [r7, #0]
1a002352:	3301      	adds	r3, #1
1a002354:	603b      	str	r3, [r7, #0]
   while( *str != 0 ) {
1a002356:	683b      	ldr	r3, [r7, #0]
1a002358:	781b      	ldrb	r3, [r3, #0]
1a00235a:	2b00      	cmp	r3, #0
1a00235c:	d1f1      	bne.n	1a002342 <uartWriteString+0xe>
   }
}
1a00235e:	bf00      	nop
1a002360:	3708      	adds	r7, #8
1a002362:	46bd      	mov	sp, r7
1a002364:	bd80      	pop	{r7, pc}
1a002366:	Address 0x000000001a002366 is out of bounds.


1a002368 <__NVIC_SetPriority>:
{
1a002368:	b480      	push	{r7}
1a00236a:	b083      	sub	sp, #12
1a00236c:	af00      	add	r7, sp, #0
1a00236e:	4603      	mov	r3, r0
1a002370:	6039      	str	r1, [r7, #0]
1a002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
1a002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a002378:	2b00      	cmp	r3, #0
1a00237a:	db0a      	blt.n	1a002392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00237c:	683b      	ldr	r3, [r7, #0]
1a00237e:	b2da      	uxtb	r2, r3
1a002380:	490c      	ldr	r1, [pc, #48]	; (1a0023b4 <__NVIC_SetPriority+0x4c>)
1a002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a002386:	0152      	lsls	r2, r2, #5
1a002388:	b2d2      	uxtb	r2, r2
1a00238a:	440b      	add	r3, r1
1a00238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
1a002390:	e00a      	b.n	1a0023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a002392:	683b      	ldr	r3, [r7, #0]
1a002394:	b2da      	uxtb	r2, r3
1a002396:	4908      	ldr	r1, [pc, #32]	; (1a0023b8 <__NVIC_SetPriority+0x50>)
1a002398:	79fb      	ldrb	r3, [r7, #7]
1a00239a:	f003 030f 	and.w	r3, r3, #15
1a00239e:	3b04      	subs	r3, #4
1a0023a0:	0152      	lsls	r2, r2, #5
1a0023a2:	b2d2      	uxtb	r2, r2
1a0023a4:	440b      	add	r3, r1
1a0023a6:	761a      	strb	r2, [r3, #24]
}
1a0023a8:	bf00      	nop
1a0023aa:	370c      	adds	r7, #12
1a0023ac:	46bd      	mov	sp, r7
1a0023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0023b2:	4770      	bx	lr
1a0023b4:	e000e100 	.word	0xe000e100
1a0023b8:	e000ed00 	.word	0xe000ed00

1a0023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1a0023bc:	b580      	push	{r7, lr}
1a0023be:	b082      	sub	sp, #8
1a0023c0:	af00      	add	r7, sp, #0
1a0023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0023c4:	687b      	ldr	r3, [r7, #4]
1a0023c6:	3b01      	subs	r3, #1
1a0023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a0023cc:	d301      	bcc.n	1a0023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1a0023ce:	2301      	movs	r3, #1
1a0023d0:	e00f      	b.n	1a0023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0023d2:	4a0a      	ldr	r2, [pc, #40]	; (1a0023fc <SysTick_Config+0x40>)
1a0023d4:	687b      	ldr	r3, [r7, #4]
1a0023d6:	3b01      	subs	r3, #1
1a0023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1a0023da:	2107      	movs	r1, #7
1a0023dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0023e0:	f7ff ffc2 	bl	1a002368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0023e4:	4b05      	ldr	r3, [pc, #20]	; (1a0023fc <SysTick_Config+0x40>)
1a0023e6:	2200      	movs	r2, #0
1a0023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0023ea:	4b04      	ldr	r3, [pc, #16]	; (1a0023fc <SysTick_Config+0x40>)
1a0023ec:	2207      	movs	r2, #7
1a0023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1a0023f0:	2300      	movs	r3, #0
}
1a0023f2:	4618      	mov	r0, r3
1a0023f4:	3708      	adds	r7, #8
1a0023f6:	46bd      	mov	sp, r7
1a0023f8:	bd80      	pop	{r7, pc}
1a0023fa:	bf00      	nop
1a0023fc:	e000e010 	.word	0xe000e010

1a002400 <tickInit>:
void tickerCallback( void );


// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a002400:	b590      	push	{r4, r7, lr}
1a002402:	b087      	sub	sp, #28
1a002404:	af00      	add	r7, sp, #0
1a002406:	e9c7 0100 	strd	r0, r1, [r7]
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickInit() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t ret_val = 1;
1a00240a:	2301      	movs	r3, #1
1a00240c:	75fb      	strb	r3, [r7, #23]
      tick_t tickRateHz = 0;
1a00240e:	f04f 0300 	mov.w	r3, #0
1a002412:	f04f 0400 	mov.w	r4, #0
1a002416:	e9c7 3402 	strd	r3, r4, [r7, #8]
      if( tickRateMSvalue == 0 ) {
1a00241a:	e9d7 3400 	ldrd	r3, r4, [r7]
1a00241e:	4323      	orrs	r3, r4
1a002420:	d105      	bne.n	1a00242e <tickInit+0x2e>
         tickPowerSet( OFF );
1a002422:	2000      	movs	r0, #0
1a002424:	f000 f848 	bl	1a0024b8 <tickPowerSet>
         ret_val = 0;
1a002428:	2300      	movs	r3, #0
1a00242a:	75fb      	strb	r3, [r7, #23]
1a00242c:	e02f      	b.n	1a00248e <tickInit+0x8e>
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00242e:	e9d7 3400 	ldrd	r3, r4, [r7]
1a002432:	4323      	orrs	r3, r4
1a002434:	d029      	beq.n	1a00248a <tickInit+0x8a>
1a002436:	e9d7 3400 	ldrd	r3, r4, [r7]
1a00243a:	2c00      	cmp	r4, #0
1a00243c:	bf08      	it	eq
1a00243e:	2b33      	cmpeq	r3, #51	; 0x33
1a002440:	d223      	bcs.n	1a00248a <tickInit+0x8a>
            tickRateMS = tickRateMSvalue;
1a002442:	4a15      	ldr	r2, [pc, #84]	; (1a002498 <tickInit+0x98>)
1a002444:	e9d7 3400 	ldrd	r3, r4, [r7]
1a002448:	e9c2 3400 	strd	r3, r4, [r2]
            // tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
            // tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            // tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            // tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00244c:	4b13      	ldr	r3, [pc, #76]	; (1a00249c <tickInit+0x9c>)
1a00244e:	681b      	ldr	r3, [r3, #0]
1a002450:	f04f 0400 	mov.w	r4, #0
1a002454:	683a      	ldr	r2, [r7, #0]
1a002456:	fb04 f102 	mul.w	r1, r4, r2
1a00245a:	687a      	ldr	r2, [r7, #4]
1a00245c:	fb03 f202 	mul.w	r2, r3, r2
1a002460:	440a      	add	r2, r1
1a002462:	6839      	ldr	r1, [r7, #0]
1a002464:	fba1 0103 	umull	r0, r1, r1, r3
1a002468:	1853      	adds	r3, r2, r1
1a00246a:	4619      	mov	r1, r3
1a00246c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a002470:	f04f 0300 	mov.w	r3, #0
1a002474:	f000 fb26 	bl	1a002ac4 <__aeabi_uldivmod>
1a002478:	4603      	mov	r3, r0
1a00247a:	460c      	mov	r4, r1
1a00247c:	4618      	mov	r0, r3
1a00247e:	f7ff ff9d 	bl	1a0023bc <SysTick_Config>
            // if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
            //    //DEBUG_BREAK;
            //    ret_val = 0;
            // }
            tickPowerSet( ON );
1a002482:	2001      	movs	r0, #1
1a002484:	f000 f818 	bl	1a0024b8 <tickPowerSet>
1a002488:	e001      	b.n	1a00248e <tickInit+0x8e>
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a00248a:	2300      	movs	r3, #0
1a00248c:	75fb      	strb	r3, [r7, #23]
         }
      }
      return ret_val;
1a00248e:	7dfb      	ldrb	r3, [r7, #23]
   #endif
}
1a002490:	4618      	mov	r0, r3
1a002492:	371c      	adds	r7, #28
1a002494:	46bd      	mov	sp, r7
1a002496:	bd90      	pop	{r4, r7, pc}
1a002498:	10000040 	.word	0x10000040
1a00249c:	10000084 	.word	0x10000084

1a0024a0 <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a0024a0:	b490      	push	{r4, r7}
1a0024a2:	af00      	add	r7, sp, #0
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
1a0024a4:	4b03      	ldr	r3, [pc, #12]	; (1a0024b4 <tickRead+0x14>)
1a0024a6:	e9d3 3400 	ldrd	r3, r4, [r3]
   #endif
}
1a0024aa:	4618      	mov	r0, r3
1a0024ac:	4621      	mov	r1, r4
1a0024ae:	46bd      	mov	sp, r7
1a0024b0:	bc90      	pop	{r4, r7}
1a0024b2:	4770      	bx	lr
1a0024b4:	10000070 	.word	0x10000070

1a0024b8 <tickPowerSet>:
   #endif
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
1a0024b8:	b480      	push	{r7}
1a0024ba:	b083      	sub	sp, #12
1a0024bc:	af00      	add	r7, sp, #0
1a0024be:	4603      	mov	r3, r0
1a0024c0:	71fb      	strb	r3, [r7, #7]
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0024c2:	79fb      	ldrb	r3, [r7, #7]
1a0024c4:	2b00      	cmp	r3, #0
1a0024c6:	d003      	beq.n	1a0024d0 <tickPowerSet+0x18>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0024c8:	4b06      	ldr	r3, [pc, #24]	; (1a0024e4 <tickPowerSet+0x2c>)
1a0024ca:	2207      	movs	r2, #7
1a0024cc:	601a      	str	r2, [r3, #0]
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
      }
   #endif
}
1a0024ce:	e002      	b.n	1a0024d6 <tickPowerSet+0x1e>
         SysTick->CTRL = 0x0000000;
1a0024d0:	4b04      	ldr	r3, [pc, #16]	; (1a0024e4 <tickPowerSet+0x2c>)
1a0024d2:	2200      	movs	r2, #0
1a0024d4:	601a      	str	r2, [r3, #0]
}
1a0024d6:	bf00      	nop
1a0024d8:	370c      	adds	r7, #12
1a0024da:	46bd      	mov	sp, r7
1a0024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0024e0:	4770      	bx	lr
1a0024e2:	bf00      	nop
1a0024e4:	e000e010 	.word	0xe000e010

1a0024e8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0024e8:	b598      	push	{r3, r4, r7, lr}
1a0024ea:	af00      	add	r7, sp, #0
   // Increment Tick counters
   tickCounter++;
1a0024ec:	4b0a      	ldr	r3, [pc, #40]	; (1a002518 <SysTick_Handler+0x30>)
1a0024ee:	e9d3 3400 	ldrd	r3, r4, [r3]
1a0024f2:	1c59      	adds	r1, r3, #1
1a0024f4:	f144 0200 	adc.w	r2, r4, #0
1a0024f8:	4b07      	ldr	r3, [pc, #28]	; (1a002518 <SysTick_Handler+0x30>)
1a0024fa:	e9c3 1200 	strd	r1, r2, [r3]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0024fe:	4b07      	ldr	r3, [pc, #28]	; (1a00251c <SysTick_Handler+0x34>)
1a002500:	681b      	ldr	r3, [r3, #0]
1a002502:	2b00      	cmp	r3, #0
1a002504:	d005      	beq.n	1a002512 <SysTick_Handler+0x2a>
      (* tickHookFunction )( callBackFuncParams );
1a002506:	4b05      	ldr	r3, [pc, #20]	; (1a00251c <SysTick_Handler+0x34>)
1a002508:	681b      	ldr	r3, [r3, #0]
1a00250a:	4a05      	ldr	r2, [pc, #20]	; (1a002520 <SysTick_Handler+0x38>)
1a00250c:	6812      	ldr	r2, [r2, #0]
1a00250e:	4610      	mov	r0, r2
1a002510:	4798      	blx	r3
   }
}
1a002512:	bf00      	nop
1a002514:	bd98      	pop	{r3, r4, r7, pc}
1a002516:	bf00      	nop
1a002518:	10000070 	.word	0x10000070
1a00251c:	10000078 	.word	0x10000078
1a002520:	1000007c 	.word	0x1000007c

1a002524 <Chip_SCU_PinMuxSet>:
{
1a002524:	b480      	push	{r7}
1a002526:	b083      	sub	sp, #12
1a002528:	af00      	add	r7, sp, #0
1a00252a:	4603      	mov	r3, r0
1a00252c:	71fb      	strb	r3, [r7, #7]
1a00252e:	460b      	mov	r3, r1
1a002530:	71bb      	strb	r3, [r7, #6]
1a002532:	4613      	mov	r3, r2
1a002534:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002536:	4807      	ldr	r0, [pc, #28]	; (1a002554 <Chip_SCU_PinMuxSet+0x30>)
1a002538:	79f9      	ldrb	r1, [r7, #7]
1a00253a:	79bb      	ldrb	r3, [r7, #6]
1a00253c:	88ba      	ldrh	r2, [r7, #4]
1a00253e:	0149      	lsls	r1, r1, #5
1a002540:	440b      	add	r3, r1
1a002542:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a002546:	bf00      	nop
1a002548:	370c      	adds	r7, #12
1a00254a:	46bd      	mov	sp, r7
1a00254c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002550:	4770      	bx	lr
1a002552:	bf00      	nop
1a002554:	40086000 	.word	0x40086000

1a002558 <Chip_SCU_PinMux>:
{
1a002558:	b590      	push	{r4, r7, lr}
1a00255a:	b083      	sub	sp, #12
1a00255c:	af00      	add	r7, sp, #0
1a00255e:	4604      	mov	r4, r0
1a002560:	4608      	mov	r0, r1
1a002562:	4611      	mov	r1, r2
1a002564:	461a      	mov	r2, r3
1a002566:	4623      	mov	r3, r4
1a002568:	71fb      	strb	r3, [r7, #7]
1a00256a:	4603      	mov	r3, r0
1a00256c:	71bb      	strb	r3, [r7, #6]
1a00256e:	460b      	mov	r3, r1
1a002570:	80bb      	strh	r3, [r7, #4]
1a002572:	4613      	mov	r3, r2
1a002574:	70fb      	strb	r3, [r7, #3]
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002576:	78fb      	ldrb	r3, [r7, #3]
1a002578:	b29a      	uxth	r2, r3
1a00257a:	88bb      	ldrh	r3, [r7, #4]
1a00257c:	4313      	orrs	r3, r2
1a00257e:	b29a      	uxth	r2, r3
1a002580:	79b9      	ldrb	r1, [r7, #6]
1a002582:	79fb      	ldrb	r3, [r7, #7]
1a002584:	4618      	mov	r0, r3
1a002586:	f7ff ffcd 	bl	1a002524 <Chip_SCU_PinMuxSet>
}
1a00258a:	bf00      	nop
1a00258c:	370c      	adds	r7, #12
1a00258e:	46bd      	mov	sp, r7
1a002590:	bd90      	pop	{r4, r7, pc}

1a002592 <Chip_GPIO_SetPinState>:
{
1a002592:	b480      	push	{r7}
1a002594:	b083      	sub	sp, #12
1a002596:	af00      	add	r7, sp, #0
1a002598:	6078      	str	r0, [r7, #4]
1a00259a:	4608      	mov	r0, r1
1a00259c:	4611      	mov	r1, r2
1a00259e:	461a      	mov	r2, r3
1a0025a0:	4603      	mov	r3, r0
1a0025a2:	70fb      	strb	r3, [r7, #3]
1a0025a4:	460b      	mov	r3, r1
1a0025a6:	70bb      	strb	r3, [r7, #2]
1a0025a8:	4613      	mov	r3, r2
1a0025aa:	707b      	strb	r3, [r7, #1]
	pGPIO->B[port][pin] = setting;
1a0025ac:	78fa      	ldrb	r2, [r7, #3]
1a0025ae:	78bb      	ldrb	r3, [r7, #2]
1a0025b0:	7878      	ldrb	r0, [r7, #1]
1a0025b2:	6879      	ldr	r1, [r7, #4]
1a0025b4:	0152      	lsls	r2, r2, #5
1a0025b6:	440a      	add	r2, r1
1a0025b8:	4413      	add	r3, r2
1a0025ba:	4602      	mov	r2, r0
1a0025bc:	701a      	strb	r2, [r3, #0]
}
1a0025be:	bf00      	nop
1a0025c0:	370c      	adds	r7, #12
1a0025c2:	46bd      	mov	sp, r7
1a0025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0025c8:	4770      	bx	lr

1a0025ca <Chip_GPIO_ReadPortBit>:
{
1a0025ca:	b480      	push	{r7}
1a0025cc:	b085      	sub	sp, #20
1a0025ce:	af00      	add	r7, sp, #0
1a0025d0:	60f8      	str	r0, [r7, #12]
1a0025d2:	60b9      	str	r1, [r7, #8]
1a0025d4:	4613      	mov	r3, r2
1a0025d6:	71fb      	strb	r3, [r7, #7]
	return (bool) pGPIO->B[port][pin];
1a0025d8:	79fb      	ldrb	r3, [r7, #7]
1a0025da:	68f9      	ldr	r1, [r7, #12]
1a0025dc:	68ba      	ldr	r2, [r7, #8]
1a0025de:	0152      	lsls	r2, r2, #5
1a0025e0:	440a      	add	r2, r1
1a0025e2:	4413      	add	r3, r2
1a0025e4:	781b      	ldrb	r3, [r3, #0]
1a0025e6:	b2db      	uxtb	r3, r3
1a0025e8:	2b00      	cmp	r3, #0
1a0025ea:	bf14      	ite	ne
1a0025ec:	2301      	movne	r3, #1
1a0025ee:	2300      	moveq	r3, #0
1a0025f0:	b2db      	uxtb	r3, r3
}
1a0025f2:	4618      	mov	r0, r3
1a0025f4:	3714      	adds	r7, #20
1a0025f6:	46bd      	mov	sp, r7
1a0025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0025fc:	4770      	bx	lr

1a0025fe <Chip_GPIO_SetDir>:
 * @return	None
 * @note	Bits set to '0' are not altered. It is recommended to use the
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
1a0025fe:	b480      	push	{r7}
1a002600:	b085      	sub	sp, #20
1a002602:	af00      	add	r7, sp, #0
1a002604:	60f8      	str	r0, [r7, #12]
1a002606:	607a      	str	r2, [r7, #4]
1a002608:	461a      	mov	r2, r3
1a00260a:	460b      	mov	r3, r1
1a00260c:	72fb      	strb	r3, [r7, #11]
1a00260e:	4613      	mov	r3, r2
1a002610:	72bb      	strb	r3, [r7, #10]
	if (out) {
1a002612:	7abb      	ldrb	r3, [r7, #10]
1a002614:	2b00      	cmp	r3, #0
1a002616:	d00e      	beq.n	1a002636 <Chip_GPIO_SetDir+0x38>
		pGPIO->DIR[portNum] |= bitValue;
1a002618:	7afa      	ldrb	r2, [r7, #11]
1a00261a:	68fb      	ldr	r3, [r7, #12]
1a00261c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a002624:	7afa      	ldrb	r2, [r7, #11]
1a002626:	687b      	ldr	r3, [r7, #4]
1a002628:	4319      	orrs	r1, r3
1a00262a:	68fb      	ldr	r3, [r7, #12]
1a00262c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
	}
}
1a002634:	e00e      	b.n	1a002654 <Chip_GPIO_SetDir+0x56>
		pGPIO->DIR[portNum] &= ~bitValue;
1a002636:	7afa      	ldrb	r2, [r7, #11]
1a002638:	68fb      	ldr	r3, [r7, #12]
1a00263a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00263e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a002642:	687b      	ldr	r3, [r7, #4]
1a002644:	43db      	mvns	r3, r3
1a002646:	7afa      	ldrb	r2, [r7, #11]
1a002648:	4019      	ands	r1, r3
1a00264a:	68fb      	ldr	r3, [r7, #12]
1a00264c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a002654:	bf00      	nop
1a002656:	3714      	adds	r7, #20
1a002658:	46bd      	mov	sp, r7
1a00265a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00265e:	4770      	bx	lr

1a002660 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002660:	b480      	push	{r7}
1a002662:	b085      	sub	sp, #20
1a002664:	af00      	add	r7, sp, #0
1a002666:	60b9      	str	r1, [r7, #8]
1a002668:	607a      	str	r2, [r7, #4]
1a00266a:	603b      	str	r3, [r7, #0]
1a00266c:	4603      	mov	r3, r0
1a00266e:	73fb      	strb	r3, [r7, #15]

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002670:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a002674:	491f      	ldr	r1, [pc, #124]	; (1a0026f4 <gpioObtainPinInit+0x94>)
1a002676:	4613      	mov	r3, r2
1a002678:	009b      	lsls	r3, r3, #2
1a00267a:	4413      	add	r3, r2
1a00267c:	440b      	add	r3, r1
1a00267e:	f993 2000 	ldrsb.w	r2, [r3]
1a002682:	68bb      	ldr	r3, [r7, #8]
1a002684:	701a      	strb	r2, [r3, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002686:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a00268a:	491a      	ldr	r1, [pc, #104]	; (1a0026f4 <gpioObtainPinInit+0x94>)
1a00268c:	4613      	mov	r3, r2
1a00268e:	009b      	lsls	r3, r3, #2
1a002690:	4413      	add	r3, r2
1a002692:	440b      	add	r3, r1
1a002694:	3301      	adds	r3, #1
1a002696:	f993 2000 	ldrsb.w	r2, [r3]
1a00269a:	687b      	ldr	r3, [r7, #4]
1a00269c:	701a      	strb	r2, [r3, #0]
   *func        = gpioPinsInit[pin].func;
1a00269e:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a0026a2:	4914      	ldr	r1, [pc, #80]	; (1a0026f4 <gpioObtainPinInit+0x94>)
1a0026a4:	4613      	mov	r3, r2
1a0026a6:	009b      	lsls	r3, r3, #2
1a0026a8:	4413      	add	r3, r2
1a0026aa:	440b      	add	r3, r1
1a0026ac:	3302      	adds	r3, #2
1a0026ae:	f993 2000 	ldrsb.w	r2, [r3]
1a0026b2:	683b      	ldr	r3, [r7, #0]
1a0026b4:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0026b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a0026ba:	490e      	ldr	r1, [pc, #56]	; (1a0026f4 <gpioObtainPinInit+0x94>)
1a0026bc:	4613      	mov	r3, r2
1a0026be:	009b      	lsls	r3, r3, #2
1a0026c0:	4413      	add	r3, r2
1a0026c2:	440b      	add	r3, r1
1a0026c4:	3303      	adds	r3, #3
1a0026c6:	f993 2000 	ldrsb.w	r2, [r3]
1a0026ca:	69bb      	ldr	r3, [r7, #24]
1a0026cc:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0026ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a0026d2:	4908      	ldr	r1, [pc, #32]	; (1a0026f4 <gpioObtainPinInit+0x94>)
1a0026d4:	4613      	mov	r3, r2
1a0026d6:	009b      	lsls	r3, r3, #2
1a0026d8:	4413      	add	r3, r2
1a0026da:	440b      	add	r3, r1
1a0026dc:	3304      	adds	r3, #4
1a0026de:	f993 2000 	ldrsb.w	r2, [r3]
1a0026e2:	69fb      	ldr	r3, [r7, #28]
1a0026e4:	701a      	strb	r2, [r3, #0]
}
1a0026e6:	bf00      	nop
1a0026e8:	3714      	adds	r7, #20
1a0026ea:	46bd      	mov	sp, r7
1a0026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0026f0:	4770      	bx	lr
1a0026f2:	bf00      	nop
1a0026f4:	1a003068 	.word	0x1a003068

1a0026f8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0026f8:	b590      	push	{r4, r7, lr}
1a0026fa:	b087      	sub	sp, #28
1a0026fc:	af02      	add	r7, sp, #8
1a0026fe:	4603      	mov	r3, r0
1a002700:	460a      	mov	r2, r1
1a002702:	71fb      	strb	r3, [r7, #7]
1a002704:	4613      	mov	r3, r2
1a002706:	71bb      	strb	r3, [r7, #6]
   if( pin == VCC ){
1a002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00270c:	f113 0f02 	cmn.w	r3, #2
1a002710:	d101      	bne.n	1a002716 <gpioInit+0x1e>
	  return FALSE;
1a002712:	2300      	movs	r3, #0
1a002714:	e0ca      	b.n	1a0028ac <gpioInit+0x1b4>
   }
   if( pin == GND ){
1a002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00271a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00271e:	d101      	bne.n	1a002724 <gpioInit+0x2c>
	  return FALSE;
1a002720:	2300      	movs	r3, #0
1a002722:	e0c3      	b.n	1a0028ac <gpioInit+0x1b4>
   }

   bool_t ret_val     = 1;
1a002724:	2301      	movs	r3, #1
1a002726:	73fb      	strb	r3, [r7, #15]

   int8_t pinNamePort = 0;
1a002728:	2300      	movs	r3, #0
1a00272a:	73bb      	strb	r3, [r7, #14]
   int8_t pinNamePin  = 0;
1a00272c:	2300      	movs	r3, #0
1a00272e:	737b      	strb	r3, [r7, #13]

   int8_t func        = 0;
1a002730:	2300      	movs	r3, #0
1a002732:	733b      	strb	r3, [r7, #12]

   int8_t gpioPort    = 0;
1a002734:	2300      	movs	r3, #0
1a002736:	72fb      	strb	r3, [r7, #11]
   int8_t gpioPin     = 0;
1a002738:	2300      	movs	r3, #0
1a00273a:	72bb      	strb	r3, [r7, #10]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00273c:	f107 040c 	add.w	r4, r7, #12
1a002740:	f107 020d 	add.w	r2, r7, #13
1a002744:	f107 010e 	add.w	r1, r7, #14
1a002748:	f997 0007 	ldrsb.w	r0, [r7, #7]
1a00274c:	f107 030a 	add.w	r3, r7, #10
1a002750:	9301      	str	r3, [sp, #4]
1a002752:	f107 030b 	add.w	r3, r7, #11
1a002756:	9300      	str	r3, [sp, #0]
1a002758:	4623      	mov	r3, r4
1a00275a:	f7ff ff81 	bl	1a002660 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00275e:	79bb      	ldrb	r3, [r7, #6]
1a002760:	2b05      	cmp	r3, #5
1a002762:	f200 809f 	bhi.w	1a0028a4 <gpioInit+0x1ac>
1a002766:	a201      	add	r2, pc, #4	; (adr r2, 1a00276c <gpioInit+0x74>)
1a002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00276c:	1a00278d 	.word	0x1a00278d
1a002770:	1a00285d 	.word	0x1a00285d
1a002774:	1a0027c1 	.word	0x1a0027c1
1a002778:	1a0027f5 	.word	0x1a0027f5
1a00277c:	1a002829 	.word	0x1a002829
1a002780:	1a002785 	.word	0x1a002785

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002784:	484b      	ldr	r0, [pc, #300]	; (1a0028b4 <gpioInit+0x1bc>)
1a002786:	f7ff fa51 	bl	1a001c2c <Chip_GPIO_Init>
      break;
1a00278a:	e08e      	b.n	1a0028aa <gpioInit+0x1b2>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a00278c:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a002790:	b2d8      	uxtb	r0, r3
1a002792:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a002796:	b2d9      	uxtb	r1, r3
1a002798:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a00279c:	b2db      	uxtb	r3, r3
1a00279e:	22d0      	movs	r2, #208	; 0xd0
1a0027a0:	f7ff feda 	bl	1a002558 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0027a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a0027a8:	b2d9      	uxtb	r1, r3
1a0027aa:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a0027ae:	461a      	mov	r2, r3
1a0027b0:	2301      	movs	r3, #1
1a0027b2:	4093      	lsls	r3, r2
1a0027b4:	461a      	mov	r2, r3
1a0027b6:	2300      	movs	r3, #0
1a0027b8:	483e      	ldr	r0, [pc, #248]	; (1a0028b4 <gpioInit+0x1bc>)
1a0027ba:	f7ff ff20 	bl	1a0025fe <Chip_GPIO_SetDir>
      break;
1a0027be:	e074      	b.n	1a0028aa <gpioInit+0x1b2>

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0027c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a0027c4:	b2d8      	uxtb	r0, r3
1a0027c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a0027ca:	b2d9      	uxtb	r1, r3
1a0027cc:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a0027d0:	b2db      	uxtb	r3, r3
1a0027d2:	22c0      	movs	r2, #192	; 0xc0
1a0027d4:	f7ff fec0 	bl	1a002558 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0027d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a0027dc:	b2d9      	uxtb	r1, r3
1a0027de:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a0027e2:	461a      	mov	r2, r3
1a0027e4:	2301      	movs	r3, #1
1a0027e6:	4093      	lsls	r3, r2
1a0027e8:	461a      	mov	r2, r3
1a0027ea:	2300      	movs	r3, #0
1a0027ec:	4831      	ldr	r0, [pc, #196]	; (1a0028b4 <gpioInit+0x1bc>)
1a0027ee:	f7ff ff06 	bl	1a0025fe <Chip_GPIO_SetDir>
      break;
1a0027f2:	e05a      	b.n	1a0028aa <gpioInit+0x1b2>

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a0027f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a0027f8:	b2d8      	uxtb	r0, r3
1a0027fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a0027fe:	b2d9      	uxtb	r1, r3
1a002800:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a002804:	b2db      	uxtb	r3, r3
1a002806:	22d8      	movs	r2, #216	; 0xd8
1a002808:	f7ff fea6 	bl	1a002558 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00280c:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a002810:	b2d9      	uxtb	r1, r3
1a002812:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a002816:	461a      	mov	r2, r3
1a002818:	2301      	movs	r3, #1
1a00281a:	4093      	lsls	r3, r2
1a00281c:	461a      	mov	r2, r3
1a00281e:	2300      	movs	r3, #0
1a002820:	4824      	ldr	r0, [pc, #144]	; (1a0028b4 <gpioInit+0x1bc>)
1a002822:	f7ff feec 	bl	1a0025fe <Chip_GPIO_SetDir>
      break;
1a002826:	e040      	b.n	1a0028aa <gpioInit+0x1b2>
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a002828:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a00282c:	b2d8      	uxtb	r0, r3
1a00282e:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a002832:	b2d9      	uxtb	r1, r3
1a002834:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a002838:	b2db      	uxtb	r3, r3
1a00283a:	22c8      	movs	r2, #200	; 0xc8
1a00283c:	f7ff fe8c 	bl	1a002558 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002840:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a002844:	b2d9      	uxtb	r1, r3
1a002846:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a00284a:	461a      	mov	r2, r3
1a00284c:	2301      	movs	r3, #1
1a00284e:	4093      	lsls	r3, r2
1a002850:	461a      	mov	r2, r3
1a002852:	2300      	movs	r3, #0
1a002854:	4817      	ldr	r0, [pc, #92]	; (1a0028b4 <gpioInit+0x1bc>)
1a002856:	f7ff fed2 	bl	1a0025fe <Chip_GPIO_SetDir>
      break;
1a00285a:	e026      	b.n	1a0028aa <gpioInit+0x1b2>

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a00285c:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a002860:	b2d8      	uxtb	r0, r3
1a002862:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a002866:	b2d9      	uxtb	r1, r3
1a002868:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a00286c:	b2db      	uxtb	r3, r3
1a00286e:	22d0      	movs	r2, #208	; 0xd0
1a002870:	f7ff fe72 	bl	1a002558 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002874:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a002878:	b2d9      	uxtb	r1, r3
1a00287a:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a00287e:	461a      	mov	r2, r3
1a002880:	2301      	movs	r3, #1
1a002882:	4093      	lsls	r3, r2
1a002884:	461a      	mov	r2, r3
1a002886:	2301      	movs	r3, #1
1a002888:	480a      	ldr	r0, [pc, #40]	; (1a0028b4 <gpioInit+0x1bc>)
1a00288a:	f7ff feb8 	bl	1a0025fe <Chip_GPIO_SetDir>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00288e:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a002892:	b2d9      	uxtb	r1, r3
1a002894:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a002898:	b2da      	uxtb	r2, r3
1a00289a:	2300      	movs	r3, #0
1a00289c:	4805      	ldr	r0, [pc, #20]	; (1a0028b4 <gpioInit+0x1bc>)
1a00289e:	f7ff fe78 	bl	1a002592 <Chip_GPIO_SetPinState>
      break;
1a0028a2:	e002      	b.n	1a0028aa <gpioInit+0x1b2>

   default:
      ret_val = 0;
1a0028a4:	2300      	movs	r3, #0
1a0028a6:	73fb      	strb	r3, [r7, #15]
      break;
1a0028a8:	bf00      	nop
   }

   return ret_val;
1a0028aa:	7bfb      	ldrb	r3, [r7, #15]

}
1a0028ac:	4618      	mov	r0, r3
1a0028ae:	3714      	adds	r7, #20
1a0028b0:	46bd      	mov	sp, r7
1a0028b2:	bd90      	pop	{r4, r7, pc}
1a0028b4:	400f4000 	.word	0x400f4000

1a0028b8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0028b8:	b590      	push	{r4, r7, lr}
1a0028ba:	b087      	sub	sp, #28
1a0028bc:	af02      	add	r7, sp, #8
1a0028be:	4603      	mov	r3, r0
1a0028c0:	460a      	mov	r2, r1
1a0028c2:	71fb      	strb	r3, [r7, #7]
1a0028c4:	4613      	mov	r3, r2
1a0028c6:	71bb      	strb	r3, [r7, #6]
   if( pin == VCC ){
1a0028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a0028cc:	f113 0f02 	cmn.w	r3, #2
1a0028d0:	d101      	bne.n	1a0028d6 <gpioWrite+0x1e>
	  return FALSE;
1a0028d2:	2300      	movs	r3, #0
1a0028d4:	e033      	b.n	1a00293e <gpioWrite+0x86>
   }
   if( pin == GND ){
1a0028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a0028da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0028de:	d101      	bne.n	1a0028e4 <gpioWrite+0x2c>
	  return FALSE;
1a0028e0:	2300      	movs	r3, #0
1a0028e2:	e02c      	b.n	1a00293e <gpioWrite+0x86>
   }

   bool_t ret_val     = 1;
1a0028e4:	2301      	movs	r3, #1
1a0028e6:	73fb      	strb	r3, [r7, #15]

   int8_t pinNamePort = 0;
1a0028e8:	2300      	movs	r3, #0
1a0028ea:	73bb      	strb	r3, [r7, #14]
   int8_t pinNamePin  = 0;
1a0028ec:	2300      	movs	r3, #0
1a0028ee:	737b      	strb	r3, [r7, #13]

   int8_t func        = 0;
1a0028f0:	2300      	movs	r3, #0
1a0028f2:	733b      	strb	r3, [r7, #12]

   int8_t gpioPort    = 0;
1a0028f4:	2300      	movs	r3, #0
1a0028f6:	72fb      	strb	r3, [r7, #11]
   int8_t gpioPin     = 0;
1a0028f8:	2300      	movs	r3, #0
1a0028fa:	72bb      	strb	r3, [r7, #10]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0028fc:	f107 040c 	add.w	r4, r7, #12
1a002900:	f107 020d 	add.w	r2, r7, #13
1a002904:	f107 010e 	add.w	r1, r7, #14
1a002908:	f997 0007 	ldrsb.w	r0, [r7, #7]
1a00290c:	f107 030a 	add.w	r3, r7, #10
1a002910:	9301      	str	r3, [sp, #4]
1a002912:	f107 030b 	add.w	r3, r7, #11
1a002916:	9300      	str	r3, [sp, #0]
1a002918:	4623      	mov	r3, r4
1a00291a:	f7ff fea1 	bl	1a002660 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00291e:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a002922:	b2d9      	uxtb	r1, r3
1a002924:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a002928:	b2da      	uxtb	r2, r3
1a00292a:	79bb      	ldrb	r3, [r7, #6]
1a00292c:	2b00      	cmp	r3, #0
1a00292e:	bf14      	ite	ne
1a002930:	2301      	movne	r3, #1
1a002932:	2300      	moveq	r3, #0
1a002934:	b2db      	uxtb	r3, r3
1a002936:	4804      	ldr	r0, [pc, #16]	; (1a002948 <gpioWrite+0x90>)
1a002938:	f7ff fe2b 	bl	1a002592 <Chip_GPIO_SetPinState>

   return ret_val;
1a00293c:	7bfb      	ldrb	r3, [r7, #15]
}
1a00293e:	4618      	mov	r0, r3
1a002940:	3714      	adds	r7, #20
1a002942:	46bd      	mov	sp, r7
1a002944:	bd90      	pop	{r4, r7, pc}
1a002946:	bf00      	nop
1a002948:	400f4000 	.word	0x400f4000

1a00294c <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00294c:	b590      	push	{r4, r7, lr}
1a00294e:	b087      	sub	sp, #28
1a002950:	af02      	add	r7, sp, #8
1a002952:	4603      	mov	r3, r0
1a002954:	71fb      	strb	r3, [r7, #7]
   if( pin == VCC ){
1a002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00295a:	f113 0f02 	cmn.w	r3, #2
1a00295e:	d101      	bne.n	1a002964 <gpioRead+0x18>
      return TRUE;
1a002960:	2301      	movs	r3, #1
1a002962:	e030      	b.n	1a0029c6 <gpioRead+0x7a>
   }
   if( pin == GND ){
1a002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a002968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00296c:	d101      	bne.n	1a002972 <gpioRead+0x26>
      return FALSE;
1a00296e:	2300      	movs	r3, #0
1a002970:	e029      	b.n	1a0029c6 <gpioRead+0x7a>
   }

   bool_t ret_val     = OFF;
1a002972:	2300      	movs	r3, #0
1a002974:	73fb      	strb	r3, [r7, #15]

   int8_t pinNamePort = 0;
1a002976:	2300      	movs	r3, #0
1a002978:	73bb      	strb	r3, [r7, #14]
   int8_t pinNamePin  = 0;
1a00297a:	2300      	movs	r3, #0
1a00297c:	737b      	strb	r3, [r7, #13]

   int8_t func        = 0;
1a00297e:	2300      	movs	r3, #0
1a002980:	733b      	strb	r3, [r7, #12]

   int8_t gpioPort    = 0;
1a002982:	2300      	movs	r3, #0
1a002984:	72fb      	strb	r3, [r7, #11]
   int8_t gpioPin     = 0;
1a002986:	2300      	movs	r3, #0
1a002988:	72bb      	strb	r3, [r7, #10]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00298a:	f107 040c 	add.w	r4, r7, #12
1a00298e:	f107 020d 	add.w	r2, r7, #13
1a002992:	f107 010e 	add.w	r1, r7, #14
1a002996:	f997 0007 	ldrsb.w	r0, [r7, #7]
1a00299a:	f107 030a 	add.w	r3, r7, #10
1a00299e:	9301      	str	r3, [sp, #4]
1a0029a0:	f107 030b 	add.w	r3, r7, #11
1a0029a4:	9300      	str	r3, [sp, #0]
1a0029a6:	4623      	mov	r3, r4
1a0029a8:	f7ff fe5a 	bl	1a002660 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0029ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a0029b0:	4619      	mov	r1, r3
1a0029b2:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a0029b6:	b2db      	uxtb	r3, r3
1a0029b8:	461a      	mov	r2, r3
1a0029ba:	4805      	ldr	r0, [pc, #20]	; (1a0029d0 <gpioRead+0x84>)
1a0029bc:	f7ff fe05 	bl	1a0025ca <Chip_GPIO_ReadPortBit>
1a0029c0:	4603      	mov	r3, r0
1a0029c2:	73fb      	strb	r3, [r7, #15]

   return ret_val;
1a0029c4:	7bfb      	ldrb	r3, [r7, #15]
}
1a0029c6:	4618      	mov	r0, r3
1a0029c8:	3714      	adds	r7, #20
1a0029ca:	46bd      	mov	sp, r7
1a0029cc:	bd90      	pop	{r4, r7, pc}
1a0029ce:	bf00      	nop
1a0029d0:	400f4000 	.word	0x400f4000

1a0029d4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0029d4:	b580      	push	{r7, lr}
1a0029d6:	af00      	add	r7, sp, #0
   USBD_API->hw->ISR(g_hUsb);
1a0029d8:	4b04      	ldr	r3, [pc, #16]	; (1a0029ec <USB0_IRQHandler+0x18>)
1a0029da:	681b      	ldr	r3, [r3, #0]
1a0029dc:	681b      	ldr	r3, [r3, #0]
1a0029de:	68db      	ldr	r3, [r3, #12]
1a0029e0:	4a03      	ldr	r2, [pc, #12]	; (1a0029f0 <USB0_IRQHandler+0x1c>)
1a0029e2:	6812      	ldr	r2, [r2, #0]
1a0029e4:	4610      	mov	r0, r2
1a0029e6:	4798      	blx	r3
}
1a0029e8:	bf00      	nop
1a0029ea:	bd80      	pop	{r7, pc}
1a0029ec:	10000088 	.word	0x10000088
1a0029f0:	10000080 	.word	0x10000080

1a0029f4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0029f4:	b580      	push	{r7, lr}
1a0029f6:	af00      	add	r7, sp, #0
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0029f8:	f7fe fc28 	bl	1a00124c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0029fc:	4b1c      	ldr	r3, [pc, #112]	; (1a002a70 <boardInit+0x7c>)
1a0029fe:	681b      	ldr	r3, [r3, #0]
1a002a00:	4618      	mov	r0, r3
1a002a02:	f7ff fb0f 	bl	1a002024 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a002a06:	f04f 0001 	mov.w	r0, #1
1a002a0a:	f04f 0100 	mov.w	r1, #0
1a002a0e:	f7ff fcf7 	bl	1a002400 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a002a12:	2105      	movs	r1, #5
1a002a14:	2000      	movs	r0, #0
1a002a16:	f7ff fe6f 	bl	1a0026f8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a002a1a:	2100      	movs	r1, #0
1a002a1c:	2024      	movs	r0, #36	; 0x24
1a002a1e:	f7ff fe6b 	bl	1a0026f8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a002a22:	2100      	movs	r1, #0
1a002a24:	2025      	movs	r0, #37	; 0x25
1a002a26:	f7ff fe67 	bl	1a0026f8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a002a2a:	2100      	movs	r1, #0
1a002a2c:	2026      	movs	r0, #38	; 0x26
1a002a2e:	f7ff fe63 	bl	1a0026f8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a002a32:	2100      	movs	r1, #0
1a002a34:	2027      	movs	r0, #39	; 0x27
1a002a36:	f7ff fe5f 	bl	1a0026f8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a002a3a:	2101      	movs	r1, #1
1a002a3c:	2028      	movs	r0, #40	; 0x28
1a002a3e:	f7ff fe5b 	bl	1a0026f8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a002a42:	2101      	movs	r1, #1
1a002a44:	2029      	movs	r0, #41	; 0x29
1a002a46:	f7ff fe57 	bl	1a0026f8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a002a4a:	2101      	movs	r1, #1
1a002a4c:	202a      	movs	r0, #42	; 0x2a
1a002a4e:	f7ff fe53 	bl	1a0026f8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a002a52:	2101      	movs	r1, #1
1a002a54:	202b      	movs	r0, #43	; 0x2b
1a002a56:	f7ff fe4f 	bl	1a0026f8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a002a5a:	2101      	movs	r1, #1
1a002a5c:	202c      	movs	r0, #44	; 0x2c
1a002a5e:	f7ff fe4b 	bl	1a0026f8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a002a62:	2101      	movs	r1, #1
1a002a64:	202d      	movs	r0, #45	; 0x2d
1a002a66:	f7ff fe47 	bl	1a0026f8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a002a6a:	bf00      	nop
1a002a6c:	bd80      	pop	{r7, pc}
1a002a6e:	bf00      	nop
1a002a70:	10000084 	.word	0x10000084

1a002a74 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a002a74:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002a76:	b085      	sub	sp, #20
1a002a78:	af00      	add	r7, sp, #0
1a002a7a:	e9c7 0100 	strd	r0, r1, [r7]
   tick_t startTime = tickRead();
1a002a7e:	f7ff fd0f 	bl	1a0024a0 <tickRead>
1a002a82:	e9c7 0102 	strd	r0, r1, [r7, #8]
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a002a86:	bf00      	nop
1a002a88:	f7ff fd0a 	bl	1a0024a0 <tickRead>
1a002a8c:	460a      	mov	r2, r1
1a002a8e:	4601      	mov	r1, r0
1a002a90:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
1a002a94:	1acd      	subs	r5, r1, r3
1a002a96:	eb62 0604 	sbc.w	r6, r2, r4
1a002a9a:	4b09      	ldr	r3, [pc, #36]	; (1a002ac0 <delay+0x4c>)
1a002a9c:	e9d3 3400 	ldrd	r3, r4, [r3]
1a002aa0:	461a      	mov	r2, r3
1a002aa2:	4623      	mov	r3, r4
1a002aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
1a002aa8:	f000 f80c 	bl	1a002ac4 <__aeabi_uldivmod>
1a002aac:	4603      	mov	r3, r0
1a002aae:	460c      	mov	r4, r1
1a002ab0:	42a6      	cmp	r6, r4
1a002ab2:	bf08      	it	eq
1a002ab4:	429d      	cmpeq	r5, r3
1a002ab6:	d3e7      	bcc.n	1a002a88 <delay+0x14>
}
1a002ab8:	bf00      	nop
1a002aba:	3714      	adds	r7, #20
1a002abc:	46bd      	mov	sp, r7
1a002abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002ac0:	10000040 	.word	0x10000040

1a002ac4 <__aeabi_uldivmod>:
1a002ac4:	b953      	cbnz	r3, 1a002adc <__aeabi_uldivmod+0x18>
1a002ac6:	b94a      	cbnz	r2, 1a002adc <__aeabi_uldivmod+0x18>
1a002ac8:	2900      	cmp	r1, #0
1a002aca:	bf08      	it	eq
1a002acc:	2800      	cmpeq	r0, #0
1a002ace:	bf1c      	itt	ne
1a002ad0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002ad4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002ad8:	f000 b974 	b.w	1a002dc4 <__aeabi_idiv0>
1a002adc:	f1ad 0c08 	sub.w	ip, sp, #8
1a002ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002ae4:	f000 f806 	bl	1a002af4 <__udivmoddi4>
1a002ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002af0:	b004      	add	sp, #16
1a002af2:	4770      	bx	lr

1a002af4 <__udivmoddi4>:
1a002af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002af8:	9e08      	ldr	r6, [sp, #32]
1a002afa:	4604      	mov	r4, r0
1a002afc:	4688      	mov	r8, r1
1a002afe:	2b00      	cmp	r3, #0
1a002b00:	f040 8085 	bne.w	1a002c0e <__udivmoddi4+0x11a>
1a002b04:	428a      	cmp	r2, r1
1a002b06:	4615      	mov	r5, r2
1a002b08:	d948      	bls.n	1a002b9c <__udivmoddi4+0xa8>
1a002b0a:	fab2 f282 	clz	r2, r2
1a002b0e:	b14a      	cbz	r2, 1a002b24 <__udivmoddi4+0x30>
1a002b10:	f1c2 0720 	rsb	r7, r2, #32
1a002b14:	fa01 f302 	lsl.w	r3, r1, r2
1a002b18:	fa20 f707 	lsr.w	r7, r0, r7
1a002b1c:	4095      	lsls	r5, r2
1a002b1e:	ea47 0803 	orr.w	r8, r7, r3
1a002b22:	4094      	lsls	r4, r2
1a002b24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002b28:	0c23      	lsrs	r3, r4, #16
1a002b2a:	fbb8 f7fe 	udiv	r7, r8, lr
1a002b2e:	fa1f fc85 	uxth.w	ip, r5
1a002b32:	fb0e 8817 	mls	r8, lr, r7, r8
1a002b36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002b3a:	fb07 f10c 	mul.w	r1, r7, ip
1a002b3e:	4299      	cmp	r1, r3
1a002b40:	d909      	bls.n	1a002b56 <__udivmoddi4+0x62>
1a002b42:	18eb      	adds	r3, r5, r3
1a002b44:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002b48:	f080 80e3 	bcs.w	1a002d12 <__udivmoddi4+0x21e>
1a002b4c:	4299      	cmp	r1, r3
1a002b4e:	f240 80e0 	bls.w	1a002d12 <__udivmoddi4+0x21e>
1a002b52:	3f02      	subs	r7, #2
1a002b54:	442b      	add	r3, r5
1a002b56:	1a5b      	subs	r3, r3, r1
1a002b58:	b2a4      	uxth	r4, r4
1a002b5a:	fbb3 f0fe 	udiv	r0, r3, lr
1a002b5e:	fb0e 3310 	mls	r3, lr, r0, r3
1a002b62:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002b66:	fb00 fc0c 	mul.w	ip, r0, ip
1a002b6a:	45a4      	cmp	ip, r4
1a002b6c:	d909      	bls.n	1a002b82 <__udivmoddi4+0x8e>
1a002b6e:	192c      	adds	r4, r5, r4
1a002b70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002b74:	f080 80cb 	bcs.w	1a002d0e <__udivmoddi4+0x21a>
1a002b78:	45a4      	cmp	ip, r4
1a002b7a:	f240 80c8 	bls.w	1a002d0e <__udivmoddi4+0x21a>
1a002b7e:	3802      	subs	r0, #2
1a002b80:	442c      	add	r4, r5
1a002b82:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002b86:	eba4 040c 	sub.w	r4, r4, ip
1a002b8a:	2700      	movs	r7, #0
1a002b8c:	b11e      	cbz	r6, 1a002b96 <__udivmoddi4+0xa2>
1a002b8e:	40d4      	lsrs	r4, r2
1a002b90:	2300      	movs	r3, #0
1a002b92:	e9c6 4300 	strd	r4, r3, [r6]
1a002b96:	4639      	mov	r1, r7
1a002b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002b9c:	2a00      	cmp	r2, #0
1a002b9e:	d053      	beq.n	1a002c48 <__udivmoddi4+0x154>
1a002ba0:	fab2 f282 	clz	r2, r2
1a002ba4:	2a00      	cmp	r2, #0
1a002ba6:	f040 80b6 	bne.w	1a002d16 <__udivmoddi4+0x222>
1a002baa:	1b49      	subs	r1, r1, r5
1a002bac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002bb0:	fa1f f885 	uxth.w	r8, r5
1a002bb4:	2701      	movs	r7, #1
1a002bb6:	fbb1 fcfe 	udiv	ip, r1, lr
1a002bba:	0c23      	lsrs	r3, r4, #16
1a002bbc:	fb0e 111c 	mls	r1, lr, ip, r1
1a002bc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002bc4:	fb08 f10c 	mul.w	r1, r8, ip
1a002bc8:	4299      	cmp	r1, r3
1a002bca:	d907      	bls.n	1a002bdc <__udivmoddi4+0xe8>
1a002bcc:	18eb      	adds	r3, r5, r3
1a002bce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002bd2:	d202      	bcs.n	1a002bda <__udivmoddi4+0xe6>
1a002bd4:	4299      	cmp	r1, r3
1a002bd6:	f200 80ec 	bhi.w	1a002db2 <__udivmoddi4+0x2be>
1a002bda:	4684      	mov	ip, r0
1a002bdc:	1a59      	subs	r1, r3, r1
1a002bde:	b2a3      	uxth	r3, r4
1a002be0:	fbb1 f0fe 	udiv	r0, r1, lr
1a002be4:	fb0e 1410 	mls	r4, lr, r0, r1
1a002be8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002bec:	fb08 f800 	mul.w	r8, r8, r0
1a002bf0:	45a0      	cmp	r8, r4
1a002bf2:	d907      	bls.n	1a002c04 <__udivmoddi4+0x110>
1a002bf4:	192c      	adds	r4, r5, r4
1a002bf6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002bfa:	d202      	bcs.n	1a002c02 <__udivmoddi4+0x10e>
1a002bfc:	45a0      	cmp	r8, r4
1a002bfe:	f200 80dc 	bhi.w	1a002dba <__udivmoddi4+0x2c6>
1a002c02:	4618      	mov	r0, r3
1a002c04:	eba4 0408 	sub.w	r4, r4, r8
1a002c08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002c0c:	e7be      	b.n	1a002b8c <__udivmoddi4+0x98>
1a002c0e:	428b      	cmp	r3, r1
1a002c10:	d908      	bls.n	1a002c24 <__udivmoddi4+0x130>
1a002c12:	2e00      	cmp	r6, #0
1a002c14:	d078      	beq.n	1a002d08 <__udivmoddi4+0x214>
1a002c16:	2700      	movs	r7, #0
1a002c18:	e9c6 0100 	strd	r0, r1, [r6]
1a002c1c:	4638      	mov	r0, r7
1a002c1e:	4639      	mov	r1, r7
1a002c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002c24:	fab3 f783 	clz	r7, r3
1a002c28:	b97f      	cbnz	r7, 1a002c4a <__udivmoddi4+0x156>
1a002c2a:	428b      	cmp	r3, r1
1a002c2c:	d302      	bcc.n	1a002c34 <__udivmoddi4+0x140>
1a002c2e:	4282      	cmp	r2, r0
1a002c30:	f200 80bd 	bhi.w	1a002dae <__udivmoddi4+0x2ba>
1a002c34:	1a84      	subs	r4, r0, r2
1a002c36:	eb61 0303 	sbc.w	r3, r1, r3
1a002c3a:	2001      	movs	r0, #1
1a002c3c:	4698      	mov	r8, r3
1a002c3e:	2e00      	cmp	r6, #0
1a002c40:	d0a9      	beq.n	1a002b96 <__udivmoddi4+0xa2>
1a002c42:	e9c6 4800 	strd	r4, r8, [r6]
1a002c46:	e7a6      	b.n	1a002b96 <__udivmoddi4+0xa2>
1a002c48:	deff      	udf	#255	; 0xff
1a002c4a:	f1c7 0520 	rsb	r5, r7, #32
1a002c4e:	40bb      	lsls	r3, r7
1a002c50:	fa22 fc05 	lsr.w	ip, r2, r5
1a002c54:	ea4c 0c03 	orr.w	ip, ip, r3
1a002c58:	fa01 f407 	lsl.w	r4, r1, r7
1a002c5c:	fa20 f805 	lsr.w	r8, r0, r5
1a002c60:	fa21 f305 	lsr.w	r3, r1, r5
1a002c64:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002c68:	ea48 0404 	orr.w	r4, r8, r4
1a002c6c:	fbb3 f9fe 	udiv	r9, r3, lr
1a002c70:	0c21      	lsrs	r1, r4, #16
1a002c72:	fb0e 3319 	mls	r3, lr, r9, r3
1a002c76:	fa1f f88c 	uxth.w	r8, ip
1a002c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002c7e:	fb09 fa08 	mul.w	sl, r9, r8
1a002c82:	459a      	cmp	sl, r3
1a002c84:	fa02 f207 	lsl.w	r2, r2, r7
1a002c88:	fa00 f107 	lsl.w	r1, r0, r7
1a002c8c:	d90b      	bls.n	1a002ca6 <__udivmoddi4+0x1b2>
1a002c8e:	eb1c 0303 	adds.w	r3, ip, r3
1a002c92:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002c96:	f080 8088 	bcs.w	1a002daa <__udivmoddi4+0x2b6>
1a002c9a:	459a      	cmp	sl, r3
1a002c9c:	f240 8085 	bls.w	1a002daa <__udivmoddi4+0x2b6>
1a002ca0:	f1a9 0902 	sub.w	r9, r9, #2
1a002ca4:	4463      	add	r3, ip
1a002ca6:	eba3 030a 	sub.w	r3, r3, sl
1a002caa:	b2a4      	uxth	r4, r4
1a002cac:	fbb3 f0fe 	udiv	r0, r3, lr
1a002cb0:	fb0e 3310 	mls	r3, lr, r0, r3
1a002cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002cb8:	fb00 f808 	mul.w	r8, r0, r8
1a002cbc:	45a0      	cmp	r8, r4
1a002cbe:	d908      	bls.n	1a002cd2 <__udivmoddi4+0x1de>
1a002cc0:	eb1c 0404 	adds.w	r4, ip, r4
1a002cc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002cc8:	d26b      	bcs.n	1a002da2 <__udivmoddi4+0x2ae>
1a002cca:	45a0      	cmp	r8, r4
1a002ccc:	d969      	bls.n	1a002da2 <__udivmoddi4+0x2ae>
1a002cce:	3802      	subs	r0, #2
1a002cd0:	4464      	add	r4, ip
1a002cd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002cd6:	eba4 0408 	sub.w	r4, r4, r8
1a002cda:	fba0 8902 	umull	r8, r9, r0, r2
1a002cde:	454c      	cmp	r4, r9
1a002ce0:	46c6      	mov	lr, r8
1a002ce2:	464b      	mov	r3, r9
1a002ce4:	d354      	bcc.n	1a002d90 <__udivmoddi4+0x29c>
1a002ce6:	d051      	beq.n	1a002d8c <__udivmoddi4+0x298>
1a002ce8:	2e00      	cmp	r6, #0
1a002cea:	d069      	beq.n	1a002dc0 <__udivmoddi4+0x2cc>
1a002cec:	ebb1 020e 	subs.w	r2, r1, lr
1a002cf0:	eb64 0403 	sbc.w	r4, r4, r3
1a002cf4:	fa04 f505 	lsl.w	r5, r4, r5
1a002cf8:	fa22 f307 	lsr.w	r3, r2, r7
1a002cfc:	40fc      	lsrs	r4, r7
1a002cfe:	431d      	orrs	r5, r3
1a002d00:	e9c6 5400 	strd	r5, r4, [r6]
1a002d04:	2700      	movs	r7, #0
1a002d06:	e746      	b.n	1a002b96 <__udivmoddi4+0xa2>
1a002d08:	4637      	mov	r7, r6
1a002d0a:	4630      	mov	r0, r6
1a002d0c:	e743      	b.n	1a002b96 <__udivmoddi4+0xa2>
1a002d0e:	4618      	mov	r0, r3
1a002d10:	e737      	b.n	1a002b82 <__udivmoddi4+0x8e>
1a002d12:	4607      	mov	r7, r0
1a002d14:	e71f      	b.n	1a002b56 <__udivmoddi4+0x62>
1a002d16:	f1c2 0320 	rsb	r3, r2, #32
1a002d1a:	fa20 f703 	lsr.w	r7, r0, r3
1a002d1e:	4095      	lsls	r5, r2
1a002d20:	fa01 f002 	lsl.w	r0, r1, r2
1a002d24:	fa21 f303 	lsr.w	r3, r1, r3
1a002d28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002d2c:	4338      	orrs	r0, r7
1a002d2e:	0c01      	lsrs	r1, r0, #16
1a002d30:	fbb3 f7fe 	udiv	r7, r3, lr
1a002d34:	fa1f f885 	uxth.w	r8, r5
1a002d38:	fb0e 3317 	mls	r3, lr, r7, r3
1a002d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002d40:	fb07 f308 	mul.w	r3, r7, r8
1a002d44:	428b      	cmp	r3, r1
1a002d46:	fa04 f402 	lsl.w	r4, r4, r2
1a002d4a:	d907      	bls.n	1a002d5c <__udivmoddi4+0x268>
1a002d4c:	1869      	adds	r1, r5, r1
1a002d4e:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002d52:	d228      	bcs.n	1a002da6 <__udivmoddi4+0x2b2>
1a002d54:	428b      	cmp	r3, r1
1a002d56:	d926      	bls.n	1a002da6 <__udivmoddi4+0x2b2>
1a002d58:	3f02      	subs	r7, #2
1a002d5a:	4429      	add	r1, r5
1a002d5c:	1acb      	subs	r3, r1, r3
1a002d5e:	b281      	uxth	r1, r0
1a002d60:	fbb3 f0fe 	udiv	r0, r3, lr
1a002d64:	fb0e 3310 	mls	r3, lr, r0, r3
1a002d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002d6c:	fb00 f308 	mul.w	r3, r0, r8
1a002d70:	428b      	cmp	r3, r1
1a002d72:	d907      	bls.n	1a002d84 <__udivmoddi4+0x290>
1a002d74:	1869      	adds	r1, r5, r1
1a002d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002d7a:	d210      	bcs.n	1a002d9e <__udivmoddi4+0x2aa>
1a002d7c:	428b      	cmp	r3, r1
1a002d7e:	d90e      	bls.n	1a002d9e <__udivmoddi4+0x2aa>
1a002d80:	3802      	subs	r0, #2
1a002d82:	4429      	add	r1, r5
1a002d84:	1ac9      	subs	r1, r1, r3
1a002d86:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002d8a:	e714      	b.n	1a002bb6 <__udivmoddi4+0xc2>
1a002d8c:	4541      	cmp	r1, r8
1a002d8e:	d2ab      	bcs.n	1a002ce8 <__udivmoddi4+0x1f4>
1a002d90:	ebb8 0e02 	subs.w	lr, r8, r2
1a002d94:	eb69 020c 	sbc.w	r2, r9, ip
1a002d98:	3801      	subs	r0, #1
1a002d9a:	4613      	mov	r3, r2
1a002d9c:	e7a4      	b.n	1a002ce8 <__udivmoddi4+0x1f4>
1a002d9e:	4660      	mov	r0, ip
1a002da0:	e7f0      	b.n	1a002d84 <__udivmoddi4+0x290>
1a002da2:	4618      	mov	r0, r3
1a002da4:	e795      	b.n	1a002cd2 <__udivmoddi4+0x1de>
1a002da6:	4667      	mov	r7, ip
1a002da8:	e7d8      	b.n	1a002d5c <__udivmoddi4+0x268>
1a002daa:	4681      	mov	r9, r0
1a002dac:	e77b      	b.n	1a002ca6 <__udivmoddi4+0x1b2>
1a002dae:	4638      	mov	r0, r7
1a002db0:	e745      	b.n	1a002c3e <__udivmoddi4+0x14a>
1a002db2:	f1ac 0c02 	sub.w	ip, ip, #2
1a002db6:	442b      	add	r3, r5
1a002db8:	e710      	b.n	1a002bdc <__udivmoddi4+0xe8>
1a002dba:	3802      	subs	r0, #2
1a002dbc:	442c      	add	r4, r5
1a002dbe:	e721      	b.n	1a002c04 <__udivmoddi4+0x110>
1a002dc0:	4637      	mov	r7, r6
1a002dc2:	e6e8      	b.n	1a002b96 <__udivmoddi4+0xa2>

1a002dc4 <__aeabi_idiv0>:
1a002dc4:	4770      	bx	lr
1a002dc6:	bf00      	nop

1a002dc8 <__libc_init_array>:
1a002dc8:	b570      	push	{r4, r5, r6, lr}
1a002dca:	4d0d      	ldr	r5, [pc, #52]	; (1a002e00 <__libc_init_array+0x38>)
1a002dcc:	4c0d      	ldr	r4, [pc, #52]	; (1a002e04 <__libc_init_array+0x3c>)
1a002dce:	1b64      	subs	r4, r4, r5
1a002dd0:	10a4      	asrs	r4, r4, #2
1a002dd2:	2600      	movs	r6, #0
1a002dd4:	42a6      	cmp	r6, r4
1a002dd6:	d109      	bne.n	1a002dec <__libc_init_array+0x24>
1a002dd8:	4d0b      	ldr	r5, [pc, #44]	; (1a002e08 <__libc_init_array+0x40>)
1a002dda:	4c0c      	ldr	r4, [pc, #48]	; (1a002e0c <__libc_init_array+0x44>)
1a002ddc:	f7fd fc1c 	bl	1a000618 <_init>
1a002de0:	1b64      	subs	r4, r4, r5
1a002de2:	10a4      	asrs	r4, r4, #2
1a002de4:	2600      	movs	r6, #0
1a002de6:	42a6      	cmp	r6, r4
1a002de8:	d105      	bne.n	1a002df6 <__libc_init_array+0x2e>
1a002dea:	bd70      	pop	{r4, r5, r6, pc}
1a002dec:	f855 3b04 	ldr.w	r3, [r5], #4
1a002df0:	4798      	blx	r3
1a002df2:	3601      	adds	r6, #1
1a002df4:	e7ee      	b.n	1a002dd4 <__libc_init_array+0xc>
1a002df6:	f855 3b04 	ldr.w	r3, [r5], #4
1a002dfa:	4798      	blx	r3
1a002dfc:	3601      	adds	r6, #1
1a002dfe:	e7f2      	b.n	1a002de6 <__libc_init_array+0x1e>
1a002e00:	1a003150 	.word	0x1a003150
1a002e04:	1a003150 	.word	0x1a003150
1a002e08:	1a003150 	.word	0x1a003150
1a002e0c:	1a003154 	.word	0x1a003154

1a002e10 <memset>:
1a002e10:	4402      	add	r2, r0
1a002e12:	4603      	mov	r3, r0
1a002e14:	4293      	cmp	r3, r2
1a002e16:	d100      	bne.n	1a002e1a <memset+0xa>
1a002e18:	4770      	bx	lr
1a002e1a:	f803 1b01 	strb.w	r1, [r3], #1
1a002e1e:	e7f9      	b.n	1a002e14 <memset+0x4>
1a002e20:	7778797a 	.word	0x7778797a
1a002e24:	73747576 	.word	0x73747576
1a002e28:	6f707172 	.word	0x6f707172
1a002e2c:	6b6c6d6e 	.word	0x6b6c6d6e
1a002e30:	6768696a 	.word	0x6768696a
1a002e34:	63646566 	.word	0x63646566
1a002e38:	38396162 	.word	0x38396162
1a002e3c:	34353637 	.word	0x34353637
1a002e40:	30313233 	.word	0x30313233
1a002e44:	34333231 	.word	0x34333231
1a002e48:	38373635 	.word	0x38373635
1a002e4c:	63626139 	.word	0x63626139
1a002e50:	67666564 	.word	0x67666564
1a002e54:	6b6a6968 	.word	0x6b6a6968
1a002e58:	6f6e6d6c 	.word	0x6f6e6d6c
1a002e5c:	73727170 	.word	0x73727170
1a002e60:	77767574 	.word	0x77767574
1a002e64:	007a7978 	.word	0x007a7978
1a002e68:	63696e49 	.word	0x63696e49
1a002e6c:	7a696c69 	.word	0x7a696c69
1a002e70:	c3696361 	.word	0xc3696361
1a002e74:	63206eb3 	.word	0x63206eb3
1a002e78:	6572726f 	.word	0x6572726f
1a002e7c:	2e617463 	.word	0x2e617463
1a002e80:	000a0d2e 	.word	0x000a0d2e
1a002e84:	ff000a0d 	.word	0xff000a0d
1a002e88:	63696e69 	.word	0x63696e69
1a002e8c:	696c6169 	.word	0x696c6169
1a002e90:	0d20617a 	.word	0x0d20617a
1a002e94:	ffff000a 	.word	0xffff000a
1a002e98:	63696e69 	.word	0x63696e69
1a002e9c:	696c6169 	.word	0x696c6169
1a002ea0:	0d20617a 	.word	0x0d20617a
1a002ea4:	ffff000a 	.word	0xffff000a

1a002ea8 <ExtRateIn>:
1a002ea8:	00000000                                ....

1a002eac <OscRateIn>:
1a002eac:	00b71b00                                ....

1a002eb0 <GpioLeds>:
1a002eb0:	01050005 0e000205 0c010b01              ............

1a002ebc <GpioButtons>:
1a002ebc:	08000400 09010900                       ........

1a002ec4 <GpioPorts>:
1a002ec4:	03030003 0f050403 05031005 07030603     ................
1a002ed4:	ffff0802                                ....

1a002ed8 <InitClkStates>:
1a002ed8:	01010f01                                ....

1a002edc <pinmuxing>:
1a002edc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002eec:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002efc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002f0c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002f1c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002f2c:	00d50301 00d50401 00160107 00560207     ..............V.
1a002f3c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002f4c:	00570206                                ..W.

1a002f50 <UART_PClock>:
1a002f50:	00820081 00a200a1                       ........

1a002f58 <UART_BClock>:
1a002f58:	01a201c2 01620182                       ......b.

1a002f60 <periph_to_base>:
1a002f60:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002f70:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002f80:	000100e0 01000100 01200003 00060120     .......... . ...
1a002f90:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002fa0:	01820013 00120182 01a201a2 01c20011     ................
1a002fb0:	001001c2 01e201e2 0202000f 000e0202     ................
1a002fc0:	02220222 0223000d 001c0223 08040201     "."...#.#.......
1a002fd0:	0f0f0f03 ffff00ff                       ........

1a002fd8 <InitClkStates>:
1a002fd8:	00010100 00010909 0001090a 01010701     ................
1a002fe8:	00010902 00010906 0101090c 0001090d     ................
1a002ff8:	0001090e 0001090f 00010910 00010911     ................
1a003008:	00010912 00010913 00011114 00011119     ................
1a003018:	0001111a 0001111b                       ........

1a003020 <lpcUarts>:
1a003020:	40081000 06020406 00180205 40081000     ...@...........@
1a003030:	09070509 00180706 40082000 00000000     ......... .@....
1a003040:	00190000 400c1000 07060107 001a0602     .......@........
1a003050:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a003060:	02020302 001b0204                       ........

1a003068 <gpioPinsInit>:
1a003068:	02000104 00050701 05010d03 04080100     ................
1a003078:	02020002 02000304 00000403 04070002     ................
1a003088:	030c0300 09050402 05040103 04030208     ................
1a003098:	04020305 06040504 0802000c 03000b06     ................
1a0030a8:	00090607 07060503 060f0504 03030004     ................
1a0030b8:	02000404 00050404 06040502 04060200     ................
1a0030c8:	0c050408 05040a04 0003010e 14010a00     ................
1a0030d8:	010f0000 0d000012 00001101 0010010c     ................
1a0030e8:	07070300 000f0300 01000001 00000000     ................
1a0030f8:	000a0600 08060603 06100504 04030005     ................
1a003108:	03000106 04090400 04010d05 010b0000     ................
1a003118:	0200000f 00000001 00010104 02010800     ................
1a003128:	01090000 09010006 05040002 04010200     ................
1a003138:	02020105 02020504 0e00000a 01000b02     ................
1a003148:	000c020b ffff0c01                       ........
